!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
28	Main/ID.v	/^    wire   [`SINGLE_WORD]   partialDelaySlot = extendAction_up[0][`ZERO_EXTEND_INDEX] ? {AB_VAddr_up[0][31:28],28'b0} : (AB_VAddr_up[0] + 3'd4);$/;"	n
AB_ExcCode_p	Main/ID.v	/^    wire [2*`EXCCODE]                  AB_ExcCode_p             ;$/;"	n
AB_ExcCode_up	Main/ID.v	/^    wire    [`EXCCODE]                  AB_ExcCode_up         [1:0];  $/;"	n
AB_ExcCode_up	Main/components/ID/Arbitrator.v	/^    wire    [`EXCCODE]                  AB_ExcCode_up         [1:0];  $/;"	n
AB_Inst_p	Main/ID.v	/^    wire [2*`SINGLE_WORD]              AB_Inst_p                ;$/;"	n
AB_VAddr_p	Main/ID.v	/^    wire [2*`SINGLE_WORD]              AB_VAddr_p               ;$/;"	n
AB_VAddr_up	Main/ID.v	/^    wire    [`SINGLE_WORD]              AB_VAddr_up           [1:0];  $/;"	n
AB_VAddr_up	Main/components/ID/Arbitrator.v	/^    wire    [`SINGLE_WORD]              AB_VAddr_up           [1:0];  $/;"	n
AB_checkPoint_p	Main/ID.v	/^    wire [2*`ALL_CHECKPOINT]           AB_checkPoint_p          ;$/;"	n
AB_checkPoint_up	Main/ID.v	/^    wire    [`ALL_CHECKPOINT]           AB_checkPoint_up      [1:0];  $/;"	n
AB_checkPoint_up	Main/components/ID/Arbitrator.v	/^    wire    [`ALL_CHECKPOINT]           AB_checkPoint_up      [1:0];  $/;"	n
AB_hasException_p	Main/ID.v	/^    wire [1:0]                         AB_hasException_p        ;$/;"	n
AB_hasException_up	Main/ID.v	/^    wire    [0:0]                       AB_hasException_up    [1:0];  $/;"	n
AB_hasException_up	Main/components/ID/Arbitrator.v	/^    wire    [0:0]                       AB_hasException_up    [1:0];  $/;"	n
AB_inst_up	Main/ID.v	/^    wire    [`SINGLE_WORD]              AB_inst_up            [1:0];  $/;"	n
AB_inst_up	Main/components/ID/Arbitrator.v	/^    wire    [`SINGLE_WORD]              AB_inst_up            [1:0];  $/;"	n
AB_isRefill_p	Main/ID.v	/^    wire [1:0]                         AB_isRefill_p            ;$/;"	n
AB_isRefill_up	Main/components/ID/Arbitrator.v	/^    wire    [0:0]                       AB_isRefill_up        [1:0];  $/;"	n
AB_issueMode_w	Main/ID.v	/^    wire [`ISSUE_MODE]                 AB_issueMode_w           ;$/;"	n
AB_needRead_p_w	Main/ID.v	/^    wire [3:0]                         AB_needRead_p_w          ; \/\/ WIRE_NEW$/;"	n
AB_needRead_up	Main/components/ID/Arbitrator.v	/^    wire    [1:0]           AB_needRead_up      [1:0];$/;"	n
AB_predDest_p	Main/ID.v	/^    wire [2*`SINGLE_WORD]              AB_predDest_p            ;$/;"	n
AB_predDest_up	Main/ID.v	/^    wire    [`SINGLE_WORD]              AB_predDest_up        [1:0];  $/;"	n
AB_predDest_up	Main/components/ID/Arbitrator.v	/^    wire    [`SINGLE_WORD]              AB_predDest_up        [1:0];  $/;"	n
AB_predTake_p	Main/ID.v	/^    wire [1:0]                         AB_predTake_p            ;$/;"	n
AB_predTake_up	Main/ID.v	/^    wire    [0:0]                       AB_predTake_up        [1:0];  $/;"	n
AB_predTake_up	Main/components/ID/Arbitrator.v	/^    wire    [0:0]                       AB_predTake_up        [1:0];  $/;"	n
AB_regReadNum_p_w	Main/ID.v	/^    wire [4*`GPR_NUM]                  AB_regReadNum_p_w        ;$/;"	n
AB_regReadNum_up	Main/components/ID/Arbitrator.v	/^    wire    [2*`GPR_NUM]    AB_regReadNum_up    [1:0];$/;"	n
AB_regWriteNum_p_w	Main/ID.v	/^    wire [2*`GPR_NUM]                  AB_regWriteNum_p_w       ;$/;"	n
AB_regWriteNum_up	Main/components/ID/Arbitrator.v	/^    wire    [`GPR_NUM]      AB_regWriteNum_up   [1:0];$/;"	n
ACCUM_OP	MyDefines.v	/^`define ACCUM_OP    7   \/\/ 表示+或-$/;"	c
ACCUM_REQ	MyDefines.v	/^`define ACCUM_REQ   6   \/\/ 是否是累计模式     $/;"	c
ADDR_BADVADDR	MyDefines.v	/^    `define  ADDR_BADVADDR {5'd8,3'd0}$/;"	c
ADDR_CAUSE	MyDefines.v	/^    `define  ADDR_CAUSE {5'd13,3'd0}$/;"	c
ADDR_COMPARE	MyDefines.v	/^    `define  ADDR_COMPARE {5'd11,3'd0}$/;"	c
ADDR_CONFIG	MyDefines.v	/^    `define ADDR_CONFIG {5'd16,3'b0}$/;"	c
ADDR_CONFIG1	MyDefines.v	/^    `define ADDR_CONFIG1 {5'd16,3'b1}$/;"	c
ADDR_COUNT	MyDefines.v	/^    `define  ADDR_COUNT {5'd9,3'd0}$/;"	c
ADDR_ENRTYHI	MyDefines.v	/^    `define     ADDR_ENRTYHI    {5'd10,3'd0}$/;"	c
ADDR_ENRTYLO0	MyDefines.v	/^    `define     ADDR_ENRTYLO0   {5'd2,3'd0}$/;"	c
ADDR_ENRTYLO1	MyDefines.v	/^    `define     ADDR_ENRTYLO1   {5'd3,3'd0}$/;"	c
ADDR_EPC	MyDefines.v	/^    `define  ADDR_EPC {5'd14,3'd0}$/;"	c
ADDR_INDEX	MyDefines.v	/^    `define     ADDR_INDEX      {5'd0,3'd0}$/;"	c
ADDR_STATUS	MyDefines.v	/^    `define ADDR_STATUS {5'd12,3'd0}$/;"	c
ADEL	MyDefines.v	/^`define ADEL    5'h4$/;"	c
ADES	MyDefines.v	/^`define ADES    5'h5$/;"	c
ALL_CHECKPOINT	MyDefines.v	/^`define ALL_CHECKPOINT  `ALL_CHECKPOINT_LEN-1:0$/;"	c
ALL_CHECKPOINT_LEN	MyDefines.v	/^`define ALL_CHECKPOINT_LEN (`RAS_CHECKPOINT_LEN+`PHT_CHECKPOINT_LEN+`IJTC_CHECKPOINT_LEN)$/;"	c
ALL_INFO	Main/PrimaryExceptionProcessor.v	/^    `define ALL_INFO `ALL_INFO_LEN-1:0$/;"	c
ALL_INFO_LEN	Main/PrimaryExceptionProcessor.v	/^    `define ALL_INFO_LEN 73$/;"	c
ALU	Main/components/EXE/ALU.v	/^module ALU($/;"	m
ALUOP	MyDefines.v	/^`define ALUOP `ALUOP_LEN-1:0  $/;"	c
ALUOP_LEN	MyDefines.v	/^`define ALUOP_LEN   14$/;"	c
ALU_ADD	MyDefines.v	/^`define ALU_ADD     11$/;"	c
ALU_AND	MyDefines.v	/^`define ALU_AND     9$/;"	c
ALU_LUI	MyDefines.v	/^`define ALU_LUI     0$/;"	c
ALU_MOVN	MyDefines.v	/^`define ALU_MOVN    13$/;"	c
ALU_MOVZ	MyDefines.v	/^`define ALU_MOVZ    12$/;"	c
ALU_NOR	MyDefines.v	/^`define ALU_NOR     7$/;"	c
ALU_OR	MyDefines.v	/^`define ALU_OR      8$/;"	c
ALU_SLL	MyDefines.v	/^`define ALU_SLL     3$/;"	c
ALU_SLT	MyDefines.v	/^`define ALU_SLT     5$/;"	c
ALU_SLTU	MyDefines.v	/^`define ALU_SLTU    4$/;"	c
ALU_SRA	MyDefines.v	/^`define ALU_SRA     1$/;"	c
ALU_SRL	MyDefines.v	/^`define ALU_SRL     2$/;"	c
ALU_SUB	MyDefines.v	/^`define ALU_SUB     10$/;"	c
ALU_XOR	MyDefines.v	/^`define ALU_XOR     6$/;"	c
ASID	MyDefines.v	/^`define ASID 70:63$/;"	c
AT_SLOT_ONE	MyDefines.v	/^`define AT_SLOT_ONE             2'b10$/;"	c
AT_SLOT_ZERO	MyDefines.v	/^`define AT_SLOT_ZERO            2'b01$/;"	c
Arbitrator	Main/components/ID/Arbitrator.v	/^module Arbitrator($/;"	m
BD	MyDefines.v	/^    `define BD  31$/;"	c
BEV	MyDefines.v	/^    `define BEV 22$/;"	c
BP	MyDefines.v	/^`define BP      5'h9$/;"	c
BPU_checkPoint	Main/IF/BranchSelectCheck.v	/^    wire [`ALL_CHECKPOINT]      BPU_checkPoint                  ;$/;"	n
BPU_checkPoint_up	Main/IF/BranchSelectCheck.v	/^    wire [`ALL_CHECKPOINT]      BPU_checkPoint_up [3:0]         ;$/;"	n
BPU_erroVAddr	Main/IF/BranchSelectCheck.v	/^    wire [`SINGLE_WORD]         BPU_erroVAddr                   ;$/;"	n
BPU_predDest_p	Main/IF/BranchSelectCheck.v	/^    wire [4*`SINGLE_WORD]   BPU_predDest_p;$/;"	n
BPU_predDest_up	Main/IF/BranchSelectCheck.v	/^    wire [`SINGLE_WORD]         BPU_predDest_up [3:0]           ;$/;"	n
BPU_predTake_p	Main/IF/BranchSelectCheck.v	/^    wire [3:0]              BPU_predTake_p;$/;"	n
BPU_predTake_up	Main/IF/BranchSelectCheck.v	/^    wire [0:0]                  BPU_predTake_up [3:0]           ;$/;"	n
BRANCH_EQUAL	MyDefines.v	/^`define BRANCH_EQUAL    5$/;"	c
BRANCH_GE	MyDefines.v	/^`define BRANCH_GE       3$/;"	c
BRANCH_GT	MyDefines.v	/^`define BRANCH_GT       0$/;"	c
BRANCH_KIND	MyDefines.v	/^`define BRANCH_KIND     `BRANCH_KIND_LEN-1:0$/;"	c
BRANCH_KIND_LEN	MyDefines.v	/^`define BRANCH_KIND_LEN 6$/;"	c
BRANCH_LE	MyDefines.v	/^`define BRANCH_LE       1$/;"	c
BRANCH_LT	MyDefines.v	/^`define BRANCH_LT       2$/;"	c
BRANCH_NEQ	MyDefines.v	/^`define BRANCH_NEQ      4$/;"	c
BSC_DelaySlotIsGetted_w_i	Main/IF.v	/^	wire	[0:0]	BSC_DelaySlotIsGetted_w_o;	wire	[0:0]	BSC_DelaySlotIsGetted_w_i;$/;"	n
BSC_DelaySlotIsGetted_w_o	Main/IF.v	/^	wire	[0:0]	BSC_DelaySlotIsGetted_w_o;	wire	[0:0]	BSC_DelaySlotIsGetted_w_i;$/;"	n
BSC_allCheckPoint_w_i	Main/IF.v	/^	wire	[60:0]	BSC_allCheckPoint_w_o;	wire	[60:0]	BSC_allCheckPoint_w_i;$/;"	n
BSC_allCheckPoint_w_o	Main/IF.v	/^	wire	[60:0]	BSC_allCheckPoint_w_o;	wire	[60:0]	BSC_allCheckPoint_w_i;$/;"	n
BSC_correctDest_w_i	Main/IF.v	/^	wire	[31:0]	BSC_correctDest_w_o;	wire	[31:0]	BSC_correctDest_w_i;$/;"	n
BSC_correctDest_w_o	Main/IF.v	/^	wire	[31:0]	BSC_correctDest_w_o;	wire	[31:0]	BSC_correctDest_w_i;$/;"	n
BSC_correctTake_w_i	Main/IF.v	/^	wire	[0:0]	BSC_correctTake_w_o;	wire	[0:0]	BSC_correctTake_w_i;$/;"	n
BSC_correctTake_w_o	Main/IF.v	/^	wire	[0:0]	BSC_correctTake_w_o;	wire	[0:0]	BSC_correctTake_w_i;$/;"	n
BSC_erroVAdr_w_i	Main/IF.v	/^	wire	[31:0]	BSC_erroVAdr_w_o;	wire	[31:0]	BSC_erroVAdr_w_i;$/;"	n
BSC_erroVAdr_w_o	Main/IF.v	/^	wire	[31:0]	BSC_erroVAdr_w_o;	wire	[31:0]	BSC_erroVAdr_w_i;$/;"	n
BSC_fifthVAddr_w_i	Main/IF.v	/^	wire	[31:0]	BSC_fifthVAddr_w_o;	wire	[31:0]	BSC_fifthVAddr_w_i;$/;"	n
BSC_fifthVAddr_w_o	Main/IF.v	/^	wire	[31:0]	BSC_fifthVAddr_w_o;	wire	[31:0]	BSC_fifthVAddr_w_i;$/;"	n
BSC_isDiffRes_w_i	Main/IF.v	/^	wire	[0:0]	BSC_isDiffRes_w_o;	wire	[0:0]	BSC_isDiffRes_w_i;$/;"	n
BSC_isDiffRes_w_o	Main/IF.v	/^	wire	[0:0]	BSC_isDiffRes_w_o;	wire	[0:0]	BSC_isDiffRes_w_i;$/;"	n
BSC_needCancel_w_i	Main/IF.v	/^	wire	[0:0]	BSC_needCancel_w_o;	wire	[0:0]	BSC_needCancel_w_i;$/;"	n
BSC_needCancel_w_o	Main/IF.v	/^	wire	[0:0]	BSC_needCancel_w_o;	wire	[0:0]	BSC_needCancel_w_i;$/;"	n
BSC_needDelaySlot_w_i	Main/IF.v	/^	wire	[0:0]	BSC_needDelaySlot_w_o;	wire	[0:0]	BSC_needDelaySlot_w_i;$/;"	n
BSC_needDelaySlot_w_o	Main/IF.v	/^	wire	[0:0]	BSC_needDelaySlot_w_o;	wire	[0:0]	BSC_needDelaySlot_w_i;$/;"	n
BSC_repairAction_w_i	Main/IF.v	/^	wire	[7:0]	BSC_repairAction_w_o;	wire	[7:0]	BSC_repairAction_w_i;$/;"	n
BSC_repairAction_w_o	Main/IF.v	/^	wire	[7:0]	BSC_repairAction_w_o;	wire	[7:0]	BSC_repairAction_w_i;$/;"	n
BSC_validDest_w_i	Main/IF.v	/^	wire	[31:0]	BSC_validDest_w_o;	wire	[31:0]	BSC_validDest_w_i;$/;"	n
BSC_validDest_w_o	Main/IF.v	/^	wire	[31:0]	BSC_validDest_w_o;	wire	[31:0]	BSC_validDest_w_i;$/;"	n
BTB_ACTION	MyDefines.v	/^`define BTB_ACTION          0$/;"	c
BTB_DEST	MyDefines.v	/^`define BTB_DEST    2$/;"	c
BTB_DelaySlotIsGetted_i	Main/IF.v	/^	wire	[0:0]	BTB_DelaySlotIsGetted_o;	wire	[0:0]	BTB_DelaySlotIsGetted_i;$/;"	n
BTB_DelaySlotIsGetted_o	Main/IF.v	/^	wire	[0:0]	BTB_DelaySlotIsGetted_o;	wire	[0:0]	BTB_DelaySlotIsGetted_i;$/;"	n
BTB_ENRTY_NUM	Main/IF/BranchTargetBuffer.v	/^    `define BTB_ENRTY_NUM   16 $/;"	c
BTB_INDEX	Main/IF/BranchTargetBuffer.v	/^    `define BTB_INDEX       `BTB_ENRTY_NUM-1:0$/;"	c
BTB_NOACTION	MyDefines.v	/^`define BTB_NOACTION        1'b0 \/*}}}*\/$/;"	c
BTB_ONLY	MyDefines.v	/^`define BTB_ONLY$/;"	c
BTB_REPAIRE	MyDefines.v	/^`define BTB_REPAIRE         1'b1$/;"	c
BTB_fifthVAddr_i	Main/IF.v	/^	wire	[31:0]	BTB_fifthVAddr_o;	wire	[31:0]	BTB_fifthVAddr_i;$/;"	n
BTB_fifthVAddr_o	Main/IF.v	/^	wire	[31:0]	BTB_fifthVAddr_o;	wire	[31:0]	BTB_fifthVAddr_i;$/;"	n
BTB_instEnable_i	Main/IF.v	/^	wire	[3:0]	BTB_instEnable_o;	wire	[3:0]	BTB_instEnable_i;$/;"	n
BTB_instEnable_o	Main/IF.v	/^	wire	[3:0]	BTB_instEnable_o;	wire	[3:0]	BTB_instEnable_i;$/;"	n
BTB_needDelaySlot_i	Main/IF.v	/^	wire	[0:0]	BTB_needDelaySlot_o;	wire	[0:0]	BTB_needDelaySlot_i;$/;"	n
BTB_needDelaySlot_o	Main/IF.v	/^	wire	[0:0]	BTB_needDelaySlot_o;	wire	[0:0]	BTB_needDelaySlot_i;$/;"	n
BTB_predDest_p_i	Main/IF.v	/^	wire	[127:0]	BTB_predDest_p_o;	wire	[127:0]	BTB_predDest_p_i;$/;"	n
BTB_predDest_p_o	Main/IF.v	/^	wire	[127:0]	BTB_predDest_p_o;	wire	[127:0]	BTB_predDest_p_i;$/;"	n
BTB_predDest_up	Main/IF/BranchSelectCheck.v	/^    wire [`SINGLE_WORD] BTB_predDest_up [3:0];$/;"	n
BTB_predDest_up	Main/IF/BranchTargetBuffer.v	/^    wire    [`SINGLE_WORD]  BTB_predDest_up [3:0];$/;"	n
BTB_predTake_p_i	Main/IF.v	/^	wire	[3:0]	BTB_predTake_p_o;	wire	[3:0]	BTB_predTake_p_i;$/;"	n
BTB_predTake_p_o	Main/IF.v	/^	wire	[3:0]	BTB_predTake_p_o;	wire	[3:0]	BTB_predTake_p_i;$/;"	n
BTB_predTake_up	Main/IF/BranchSelectCheck.v	/^    wire [3:0]          BTB_predTake_up  = SCT_predTake_p_i;$/;"	n
BTB_predTake_up	Main/IF/BranchTargetBuffer.v	/^    wire    [0:0]           BTB_predTake_up [3:0];$/;"	n
BTB_validDest_i	Main/IF.v	/^	wire	[31:0]	BTB_validDest_o;	wire	[31:0]	BTB_validDest_i;$/;"	n
BTB_validDest_o	Main/IF.v	/^	wire	[31:0]	BTB_validDest_o;	wire	[31:0]	BTB_validDest_i;$/;"	n
BTB_validTake_i	Main/IF.v	/^	wire	[0:0]	BTB_validTake_o;	wire	[0:0]	BTB_validTake_i;$/;"	n
BTB_validTake_o	Main/IF.v	/^	wire	[0:0]	BTB_validTake_o;	wire	[0:0]	BTB_validTake_i;$/;"	n
B_SELECT	MyDefines.v	/^`define B_SELECT `B_SEL_LEN-1:0$/;"	c
B_SEL_LEN	MyDefines.v	/^`define B_SEL_LEN   5$/;"	c
BadVAdder	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]	        BadVAdder;$/;"	n
BranchFourToOne	Main/IF/components/BranchFourToOne.v	/^module BranchFourToOne($/;"	m
BranchSelectCheck	Main/IF/BranchSelectCheck.v	/^module BranchSelectCheck ($/;"	m
BranchTargetBuffer	Main/IF/BranchTargetBuffer.v	/^module BranchTargetBuffer ($/;"	m
ByteEnable	Main/EXEDOWN.v	/^    wire [3:0]  ByteEnable =    alignCheck==2'b00 ? 4'b0001 :$/;"	n
CACHED	MyDefines.v	/^`define CACHED   3'd3$/;"	c
CACHE_INDEX	MyDefines.v	/^`define CACHE_INDEX 11:4$/;"	c
CACHE_INDEX_ZERO	MyDefines.v	/^`define CACHE_INDEX_ZERO 8'b0$/;"	c
CACHE_OP	MyDefines.v	/^`define CACHE_OP        4:0$/;"	c
CACHE_TAG	MyDefines.v	/^`define CACHE_TAG   31:12$/;"	c
CACHE_TAG_ZERO	MyDefines.v	/^`define CACHE_TAG_ZERO   20'b0$/;"	c
CBITS	MyDefines.v	/^`define CBITS 2:0$/;"	c
CP0_Cause_w_i	Main.v	/^	wire	[31:0]	CP0_Cause_w_o;	wire	[31:0]	CP0_Cause_w_i;$/;"	n
CP0_Cause_w_o	Main.v	/^	wire	[31:0]	CP0_Cause_w_o;	wire	[31:0]	CP0_Cause_w_i;$/;"	n
CP0_Config_w_i	Main.v	/^	wire	[31:0]	CP0_Config_w_o;	wire	[31:0]	CP0_Config_w_i;$/;"	n
CP0_Config_w_o	Main.v	/^	wire	[31:0]	CP0_Config_w_o;	wire	[31:0]	CP0_Config_w_i;$/;"	n
CP0_EntryHi_w_i	Main.v	/^	wire	[31:0]	CP0_EntryHi_w_o;	wire	[31:0]	CP0_EntryHi_w_i;$/;"	n
CP0_EntryHi_w_o	Main.v	/^	wire	[31:0]	CP0_EntryHi_w_o;	wire	[31:0]	CP0_EntryHi_w_i;$/;"	n
CP0_EntryLo0_w_i	Main.v	/^	wire	[31:0]	CP0_EntryLo0_w_o;	wire	[31:0]	CP0_EntryLo0_w_i;$/;"	n
CP0_EntryLo0_w_o	Main.v	/^	wire	[31:0]	CP0_EntryLo0_w_o;	wire	[31:0]	CP0_EntryLo0_w_i;$/;"	n
CP0_EntryLo1_w_i	Main.v	/^	wire	[31:0]	CP0_EntryLo1_w_o;	wire	[31:0]	CP0_EntryLo1_w_i;$/;"	n
CP0_EntryLo1_w_o	Main.v	/^	wire	[31:0]	CP0_EntryLo1_w_o;	wire	[31:0]	CP0_EntryLo1_w_i;$/;"	n
CP0_Index_w_i	Main.v	/^	wire	[31:0]	CP0_Index_w_o;	wire	[31:0]	CP0_Index_w_i;$/;"	n
CP0_Index_w_o	Main.v	/^	wire	[31:0]	CP0_Index_w_o;	wire	[31:0]	CP0_Index_w_i;$/;"	n
CP0_POSITION	MyDefines.v	/^`define CP0_POSITION    7:0$/;"	c
CP0_PageMask_w_i	Main.v	/^	wire	[31:0]	CP0_PageMask_w_o;	wire	[31:0]	CP0_PageMask_w_i;$/;"	n
CP0_PageMask_w_o	Main.v	/^	wire	[31:0]	CP0_PageMask_w_o;	wire	[31:0]	CP0_PageMask_w_i;$/;"	n
CP0_Random_w_i	Main.v	/^	wire	[31:0]	CP0_Random_w_o;	wire	[31:0]	CP0_Random_w_i;$/;"	n
CP0_Random_w_o	Main.v	/^	wire	[31:0]	CP0_Random_w_o;	wire	[31:0]	CP0_Random_w_i;$/;"	n
CP0_Status_w_i	Main.v	/^	wire	[31:0]	CP0_Status_w_o;	wire	[31:0]	CP0_Status_w_i;$/;"	n
CP0_Status_w_o	Main.v	/^	wire	[31:0]	CP0_Status_w_o;	wire	[31:0]	CP0_Status_w_i;$/;"	n
CP0_excDestPC_w_i	Main.v	/^	wire	[31:0]	CP0_excDestPC_w_o;	wire	[31:0]	CP0_excDestPC_w_i;$/;"	n
CP0_excDestPC_w_o	Main.v	/^	wire	[31:0]	CP0_excDestPC_w_o;	wire	[31:0]	CP0_excDestPC_w_i;$/;"	n
CP0_excOccur_w_i	Main.v	/^	wire	[0:0]	CP0_excOccur_w_o;	wire	[0:0]	CP0_excOccur_w_i;$/;"	n
CP0_excOccur_w_o	Main.v	/^	wire	[0:0]	CP0_excOccur_w_o;	wire	[0:0]	CP0_excOccur_w_i;$/;"	n
CP0_exceptSeg_w_i	Main.v	/^	wire	[3:0]	CP0_exceptSeg_w_o;	wire	[3:0]	CP0_exceptSeg_w_i;$/;"	n
CP0_exceptSeg_w_o	Main.v	/^	wire	[3:0]	CP0_exceptSeg_w_o;	wire	[3:0]	CP0_exceptSeg_w_i;$/;"	n
CP0_nonBlockMark_w_i	Main.v	/^	wire	[0:0]	CP0_nonBlockMark_w_o;	wire	[0:0]	CP0_nonBlockMark_w_i;$/;"	n
CP0_nonBlockMark_w_o	Main.v	/^	wire	[0:0]	CP0_nonBlockMark_w_o;	wire	[0:0]	CP0_nonBlockMark_w_i;$/;"	n
CP0_readData_w_i	Main.v	/^	wire	[31:0]	CP0_readData_w_o;	wire	[31:0]	CP0_readData_w_i;$/;"	n
CP0_readData_w_o	Main.v	/^	wire	[31:0]	CP0_readData_w_o;	wire	[31:0]	CP0_readData_w_i;$/;"	n
CPU	MyDefines.v	/^`define CPU     5'hb$/;"	c
Cause	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]	        Cause;$/;"	n
Cause_bd	Main/PrimaryExceptionProcessor.v	/^    reg Cause_bd;$/;"	r
Cause_exccode	Main/PrimaryExceptionProcessor.v	/^    reg     [`EXCCODE]  Cause_exccode;$/;"	r
Cause_ip	Main/PrimaryExceptionProcessor.v	/^    reg     [`IP7:`IP0] Cause_ip;$/;"	r
Cause_ti	Main/PrimaryExceptionProcessor.v	/^    reg Cause_ti;$/;"	r
Compare	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]	        Compare;$/;"	n
Compressor	Main/IF/components/Compressor.v	/^module Compressor ($/;"	m
Config	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]	        Config;$/;"	n
Config1	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]	        Config1;$/;"	n
Config_k0	Main/PrimaryExceptionProcessor.v	/^    reg     [`K0]   Config_k0;$/;"	r
Count	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]	        Count;$/;"	n
DA	MyDefines.v	/^    `define DA  3'd4$/;"	c
DIV_REQ	MyDefines.v	/^`define DIV_REQ     2$/;"	c
DIV_SIGN	MyDefines.v	/^`define DIV_SIGN    3$/;"	c
DL	MyDefines.v	/^    `define DL  3'd4$/;"	c
DMMU_EntryHi_i	Main.v	/^	wire	[31:0]	DMMU_EntryHi_o;	wire	[31:0]	DMMU_EntryHi_i;$/;"	n
DMMU_EntryHi_o	Main.v	/^	wire	[31:0]	DMMU_EntryHi_o;	wire	[31:0]	DMMU_EntryHi_i;$/;"	n
DMMU_EntryLo0_i	Main.v	/^	wire	[31:0]	DMMU_EntryLo0_o;	wire	[31:0]	DMMU_EntryLo0_i;$/;"	n
DMMU_EntryLo0_o	Main.v	/^	wire	[31:0]	DMMU_EntryLo0_o;	wire	[31:0]	DMMU_EntryLo0_i;$/;"	n
DMMU_EntryLo1_i	Main.v	/^	wire	[31:0]	DMMU_EntryLo1_o;	wire	[31:0]	DMMU_EntryLo1_i;$/;"	n
DMMU_EntryLo1_o	Main.v	/^	wire	[31:0]	DMMU_EntryLo1_o;	wire	[31:0]	DMMU_EntryLo1_i;$/;"	n
DMMU_ExcCode_i	Main.v	/^	wire	[4:0]	DMMU_ExcCode_o;	wire	[4:0]	DMMU_ExcCode_i;$/;"	n
DMMU_ExcCode_o	Main.v	/^	wire	[4:0]	DMMU_ExcCode_o;	wire	[4:0]	DMMU_ExcCode_i;$/;"	n
DMMU_Index_i	Main.v	/^	wire	[31:0]	DMMU_Index_o;	wire	[31:0]	DMMU_Index_i;$/;"	n
DMMU_Index_o	Main.v	/^	wire	[31:0]	DMMU_Index_o;	wire	[31:0]	DMMU_Index_i;$/;"	n
DMMU_PageMask_i	Main.v	/^	wire	[31:0]	DMMU_PageMask_o;	wire	[31:0]	DMMU_PageMask_i;$/;"	n
DMMU_PageMask_o	Main.v	/^	wire	[31:0]	DMMU_PageMask_o;	wire	[31:0]	DMMU_PageMask_i;$/;"	n
DMMU_TLBPwrite_i	Main.v	/^	wire	[0:0]	DMMU_TLBPwrite_o;	wire	[0:0]	DMMU_TLBPwrite_i;$/;"	n
DMMU_TLBPwrite_o	Main.v	/^	wire	[0:0]	DMMU_TLBPwrite_o;	wire	[0:0]	DMMU_TLBPwrite_i;$/;"	n
DMMU_TLBRwrite_i	Main.v	/^	wire	[0:0]	DMMU_TLBRwrite_o;	wire	[0:0]	DMMU_TLBRwrite_i;$/;"	n
DMMU_TLBRwrite_o	Main.v	/^	wire	[0:0]	DMMU_TLBRwrite_o;	wire	[0:0]	DMMU_TLBRwrite_i;$/;"	n
DMMU_tlbRefill_i	Main.v	/^	wire	[0:0]	DMMU_tlbRefill_o;	wire	[0:0]	DMMU_tlbRefill_i;$/;"	n
DMMU_tlbRefill_o	Main.v	/^	wire	[0:0]	DMMU_tlbRefill_o;	wire	[0:0]	DMMU_tlbRefill_i;$/;"	n
DS	MyDefines.v	/^    `define DS  3'd0$/;"	c
DSP_needDelaySlot_i	Main/IF.v	/^	wire	[0:0]	DSP_needDelaySlot_o;	wire	[0:0]	DSP_needDelaySlot_i;$/;"	n
DSP_needDelaySlot_o	Main/IF.v	/^	wire	[0:0]	DSP_needDelaySlot_o;	wire	[0:0]	DSP_needDelaySlot_i;$/;"	n
DSP_predictPC_i	Main/IF.v	/^	wire	[31:0]	DSP_predictPC_o;	wire	[31:0]	DSP_predictPC_i;$/;"	n
DSP_predictPC_o	Main/IF.v	/^	wire	[31:0]	DSP_predictPC_o;	wire	[31:0]	DSP_predictPC_i;$/;"	n
DUAL_ISSUE	MyDefines.v	/^`define DUAL_ISSUE              2'b11$/;"	c
DataMemoryManagementUnit	Main/DataMemoryManagementUnit.v	/^module DataMemoryManagementUnit($/;"	m
Decorder	Main/components/ID/Decorder.v	/^module Decorder($/;"	m
DelaySlotProcessor	Main/IF/DelaySlotProcessor.v	/^module DelaySlotProcessor ($/;"	m
Divider	Main/components/EXE/Divider.v	/^module Divider ($/;"	m
EPC	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]	        EPC;$/;"	n
EXCCODE	MyDefines.v	/^`define EXCCODE `EXCCODE_LEN-1:0$/;"	c
EXCCODE_LEN	MyDefines.v	/^`define EXCCODE_LEN 5$/;"	c
EXCEPRION_OV	MyDefines.v	/^`define EXCEPRION_OV    1$/;"	c
EXCEPRION_SEL	MyDefines.v	/^`define EXCEPRION_SEL `EXCEPRION_SEL_LEN-1:0$/;"	c
EXCEPRION_SEL_LEN	MyDefines.v	/^`define EXCEPRION_SEL_LEN 2$/;"	c
EXCEPRION_TR	MyDefines.v	/^`define EXCEPRION_TR    0$/;"	c
EXCEP_EXE	MyDefines.v	/^`define EXCEP_EXE       0$/;"	c
EXCEP_EXE_CODE	MyDefines.v	/^`define EXCEP_EXE_CODE      `EXCEP_SEG_LEN'b0001$/;"	c
EXCEP_MEM	MyDefines.v	/^`define EXCEP_MEM       2$/;"	c
EXCEP_MEM_CODE	MyDefines.v	/^`define EXCEP_MEM_CODE      `EXCEP_SEG_LEN'b0111$/;"	c
EXCEP_PREMEM	MyDefines.v	/^`define EXCEP_PREMEM    1$/;"	c
EXCEP_PREMEM_CODE	MyDefines.v	/^`define EXCEP_PREMEM_CODE   `EXCEP_SEG_LEN'b0011$/;"	c
EXCEP_SEG	MyDefines.v	/^`define EXCEP_SEG       `EXCEP_SEG_LEN-1:0$/;"	c
EXCEP_SEG_LEN	MyDefines.v	/^`define EXCEP_SEG_LEN   4$/;"	c
EXCEP_WB	MyDefines.v	/^`define EXCEP_WB        3$/;"	c
EXCEP_WB_CODE	MyDefines.v	/^`define EXCEP_WB_CODE       `EXCEP_SEG_LEN'b1111$/;"	c
EXEDOWN	Main/EXEDOWN.v	/^module EXEDOWN($/;"	m
EXEUP	Main/EXEUP.v	/^module EXEUP($/;"	m
EXE_down_CacheOperator_i	Main.v	/^	wire	[4:0]	EXE_down_CacheOperator_o;	wire	[4:0]	EXE_down_CacheOperator_i;$/;"	n
EXE_down_CacheOperator_o	Main.v	/^	wire	[4:0]	EXE_down_CacheOperator_o;	wire	[4:0]	EXE_down_CacheOperator_i;$/;"	n
EXE_down_CacheOperator_r_i	Main/PREMEM.v	/^	reg	[`CACHE_OP]			EXE_down_CacheOperator_r_i;$/;"	r
EXE_down_ExcCode_i	Main.v	/^	wire	[4:0]	EXE_down_ExcCode_o;	wire	[4:0]	EXE_down_ExcCode_i;$/;"	n
EXE_down_ExcCode_o	Main.v	/^	wire	[4:0]	EXE_down_ExcCode_o;	wire	[4:0]	EXE_down_ExcCode_i;$/;"	n
EXE_down_ExcCode_r_i	Main/PREMEM.v	/^	reg	[`EXCCODE]			EXE_down_ExcCode_r_i;$/;"	r
EXE_down_ExcCode_w_i	Main.v	/^	wire	[4:0]	EXE_down_ExcCode_w_o;	wire	[4:0]	EXE_down_ExcCode_w_i;$/;"	n
EXE_down_ExcCode_w_o	Main.v	/^	wire	[4:0]	EXE_down_ExcCode_w_o;	wire	[4:0]	EXE_down_ExcCode_w_i;$/;"	n
EXE_down_TLBInstOperator_i	Main.v	/^	wire	[3:0]	EXE_down_TLBInstOperator_o;	wire	[3:0]	EXE_down_TLBInstOperator_i;$/;"	n
EXE_down_TLBInstOperator_o	Main.v	/^	wire	[3:0]	EXE_down_TLBInstOperator_o;	wire	[3:0]	EXE_down_TLBInstOperator_i;$/;"	n
EXE_down_TLBInstOperator_r_i	Main/PREMEM.v	/^	reg	[`TLB_INST]			EXE_down_TLBInstOperator_r_i;$/;"	r
EXE_down_VAddr_i	Main.v	/^	wire	[31:0]	EXE_down_VAddr_o;	wire	[31:0]	EXE_down_VAddr_i;$/;"	n
EXE_down_VAddr_o	Main.v	/^	wire	[31:0]	EXE_down_VAddr_o;	wire	[31:0]	EXE_down_VAddr_i;$/;"	n
EXE_down_VAddr_r_i	Main/PREMEM.v	/^	reg	[`SINGLE_WORD]			EXE_down_VAddr_r_i;$/;"	r
EXE_down_allowin_w_i	Main.v	/^	wire	[0:0]	EXE_down_allowin_w_o;	wire	[0:0]	EXE_down_allowin_w_i;$/;"	n
EXE_down_allowin_w_o	Main.v	/^	wire	[0:0]	EXE_down_allowin_w_o;	wire	[0:0]	EXE_down_allowin_w_i;$/;"	n
EXE_down_aluRes_i	Main.v	/^	wire	[31:0]	EXE_down_aluRes_o;	wire	[31:0]	EXE_down_aluRes_i;$/;"	n
EXE_down_aluRes_o	Main.v	/^	wire	[31:0]	EXE_down_aluRes_o;	wire	[31:0]	EXE_down_aluRes_i;$/;"	n
EXE_down_aluRes_r_i	Main/EXEDOWN.v	/^	reg	[`SINGLE_WORD]			EXE_down_aluRes_r_i;$/;"	r
EXE_down_aluRes_r_i	Main/EXEUP.v	/^	reg	[`SINGLE_WORD]			EXE_down_aluRes_r_i;$/;"	r
EXE_down_aluRes_r_i	Main/PREMEM.v	/^	reg	[`SINGLE_WORD]			EXE_down_aluRes_r_i;$/;"	r
EXE_down_clRes_i	Main.v	/^	wire	[4:0]	EXE_down_clRes_o;	wire	[4:0]	EXE_down_clRes_i;$/;"	n
EXE_down_clRes_o	Main.v	/^	wire	[4:0]	EXE_down_clRes_o;	wire	[4:0]	EXE_down_clRes_i;$/;"	n
EXE_down_clRes_r_i	Main/PREMEM.v	/^	reg	[4:0]			EXE_down_clRes_r_i;$/;"	r
EXE_down_eret_i	Main.v	/^	wire	[0:0]	EXE_down_eret_o;	wire	[0:0]	EXE_down_eret_i;$/;"	n
EXE_down_eret_o	Main.v	/^	wire	[0:0]	EXE_down_eret_o;	wire	[0:0]	EXE_down_eret_i;$/;"	n
EXE_down_eret_r_i	Main/PREMEM.v	/^	reg	[0:0]			EXE_down_eret_r_i;$/;"	r
EXE_down_eret_w_i	Main.v	/^	wire	[0:0]	EXE_down_eret_w_o;	wire	[0:0]	EXE_down_eret_w_i;$/;"	n
EXE_down_eret_w_o	Main.v	/^	wire	[0:0]	EXE_down_eret_w_o;	wire	[0:0]	EXE_down_eret_w_i;$/;"	n
EXE_down_exceptBadVAddr_i	Main.v	/^	wire	[31:0]	EXE_down_exceptBadVAddr_o;	wire	[31:0]	EXE_down_exceptBadVAddr_i;$/;"	n
EXE_down_exceptBadVAddr_o	Main.v	/^	wire	[31:0]	EXE_down_exceptBadVAddr_o;	wire	[31:0]	EXE_down_exceptBadVAddr_i;$/;"	n
EXE_down_exceptBadVAddr_r_i	Main/PREMEM.v	/^	reg	[`SINGLE_WORD]			EXE_down_exceptBadVAddr_r_i;$/;"	r
EXE_down_exceptBadVAddr_w_i	Main.v	/^	wire	[31:0]	EXE_down_exceptBadVAddr_w_o;	wire	[31:0]	EXE_down_exceptBadVAddr_w_i;$/;"	n
EXE_down_exceptBadVAddr_w_o	Main.v	/^	wire	[31:0]	EXE_down_exceptBadVAddr_w_o;	wire	[31:0]	EXE_down_exceptBadVAddr_w_i;$/;"	n
EXE_down_exceptPC_w_i	Main.v	/^	wire	[31:0]	EXE_down_exceptPC_w_o;	wire	[31:0]	EXE_down_exceptPC_w_i;$/;"	n
EXE_down_exceptPC_w_o	Main.v	/^	wire	[31:0]	EXE_down_exceptPC_w_o;	wire	[31:0]	EXE_down_exceptPC_w_i;$/;"	n
EXE_down_exceptionRisk_i	Main.v	/^	wire	[0:0]	EXE_down_exceptionRisk_o;	wire	[0:0]	EXE_down_exceptionRisk_i;$/;"	n
EXE_down_exceptionRisk_o	Main.v	/^	wire	[0:0]	EXE_down_exceptionRisk_o;	wire	[0:0]	EXE_down_exceptionRisk_i;$/;"	n
EXE_down_exceptionRisk_r_i	Main/PREMEM.v	/^	reg	[0:0]			EXE_down_exceptionRisk_r_i;$/;"	r
EXE_down_forwardMode_w_i	Main.v	/^	wire	[0:0]	EXE_down_forwardMode_w_o;	wire	[0:0]	EXE_down_forwardMode_w_i;$/;"	n
EXE_down_forwardMode_w_o	Main.v	/^	wire	[0:0]	EXE_down_forwardMode_w_o;	wire	[0:0]	EXE_down_forwardMode_w_i;$/;"	n
EXE_down_hasDangerous_w_i	Main.v	/^	wire	[0:0]	EXE_down_hasDangerous_w_o;	wire	[0:0]	EXE_down_hasDangerous_w_i;$/;"	n
EXE_down_hasDangerous_w_o	Main.v	/^	wire	[0:0]	EXE_down_hasDangerous_w_o;	wire	[0:0]	EXE_down_hasDangerous_w_i;$/;"	n
EXE_down_hasExceprion_w_i	Main.v	/^	wire	[0:0]	EXE_down_hasExceprion_w_o;	wire	[0:0]	EXE_down_hasExceprion_w_i;$/;"	n
EXE_down_hasExceprion_w_o	Main.v	/^	wire	[0:0]	EXE_down_hasExceprion_w_o;	wire	[0:0]	EXE_down_hasExceprion_w_i;$/;"	n
EXE_down_hasException_i	Main.v	/^	wire	[0:0]	EXE_down_hasException_o;	wire	[0:0]	EXE_down_hasException_i;$/;"	n
EXE_down_hasException_o	Main.v	/^	wire	[0:0]	EXE_down_hasException_o;	wire	[0:0]	EXE_down_hasException_i;$/;"	n
EXE_down_hasException_r_i	Main/PREMEM.v	/^	reg	[0:0]			EXE_down_hasException_r_i;$/;"	r
EXE_down_hasRisk_w_o	Main/EXEDOWN.v	/^    wire EXE_down_hasRisk_w_o  =    ID_down_exceptionRisk_r_i || $/;"	n
EXE_down_isCacheInst_i	Main.v	/^	wire	[0:0]	EXE_down_isCacheInst_o;	wire	[0:0]	EXE_down_isCacheInst_i;$/;"	n
EXE_down_isCacheInst_o	Main.v	/^	wire	[0:0]	EXE_down_isCacheInst_o;	wire	[0:0]	EXE_down_isCacheInst_i;$/;"	n
EXE_down_isCacheInst_r_i	Main/PREMEM.v	/^	reg	[0:0]			EXE_down_isCacheInst_r_i;$/;"	r
EXE_down_isDangerous_i	Main.v	/^	wire	[0:0]	EXE_down_isDangerous_o;	wire	[0:0]	EXE_down_isDangerous_i;$/;"	n
EXE_down_isDangerous_o	Main.v	/^	wire	[0:0]	EXE_down_isDangerous_o;	wire	[0:0]	EXE_down_isDangerous_i;$/;"	n
EXE_down_isDangerous_r_i	Main/PREMEM.v	/^	reg	[0:0]			EXE_down_isDangerous_r_i;$/;"	r
EXE_down_isDelaySlot_i	Main.v	/^	wire	[0:0]	EXE_down_isDelaySlot_o;	wire	[0:0]	EXE_down_isDelaySlot_i;$/;"	n
EXE_down_isDelaySlot_o	Main.v	/^	wire	[0:0]	EXE_down_isDelaySlot_o;	wire	[0:0]	EXE_down_isDelaySlot_i;$/;"	n
EXE_down_isDelaySlot_r_i	Main/PREMEM.v	/^	reg	[0:0]			EXE_down_isDelaySlot_r_i;$/;"	r
EXE_down_isDelaySlot_w_i	Main.v	/^	wire	[0:0]	EXE_down_isDelaySlot_w_o;	wire	[0:0]	EXE_down_isDelaySlot_w_i;$/;"	n
EXE_down_isDelaySlot_w_o	Main.v	/^	wire	[0:0]	EXE_down_isDelaySlot_w_o;	wire	[0:0]	EXE_down_isDelaySlot_w_i;$/;"	n
EXE_down_isInterrupt_w_i	Main.v	/^	wire	[0:0]	EXE_down_isInterrupt_w_o;	wire	[0:0]	EXE_down_isInterrupt_w_i;$/;"	n
EXE_down_isInterrupt_w_o	Main.v	/^	wire	[0:0]	EXE_down_isInterrupt_w_o;	wire	[0:0]	EXE_down_isInterrupt_w_i;$/;"	n
EXE_down_isRefill_i	Main.v	/^	wire	[0:0]	EXE_down_isRefill_o;	wire	[0:0]	EXE_down_isRefill_i;$/;"	n
EXE_down_isRefill_o	Main.v	/^	wire	[0:0]	EXE_down_isRefill_o;	wire	[0:0]	EXE_down_isRefill_i;$/;"	n
EXE_down_isRefill_r_i	Main/PREMEM.v	/^	reg	[0:0]			EXE_down_isRefill_r_i;$/;"	r
EXE_down_isRefill_w_i	Main.v	/^	wire	[0:0]	EXE_down_isRefill_w_o;	wire	[0:0]	EXE_down_isRefill_w_i;$/;"	n
EXE_down_isRefill_w_o	Main.v	/^	wire	[0:0]	EXE_down_isRefill_w_o;	wire	[0:0]	EXE_down_isRefill_w_i;$/;"	n
EXE_down_isTLBInst_i	Main.v	/^	wire	[0:0]	EXE_down_isTLBInst_o;	wire	[0:0]	EXE_down_isTLBInst_i;$/;"	n
EXE_down_isTLBInst_o	Main.v	/^	wire	[0:0]	EXE_down_isTLBInst_o;	wire	[0:0]	EXE_down_isTLBInst_i;$/;"	n
EXE_down_isTLBInst_r_i	Main/PREMEM.v	/^	reg	[0:0]			EXE_down_isTLBInst_r_i;$/;"	r
EXE_down_loadSel_i	Main.v	/^	wire	[10:0]	EXE_down_loadSel_o;	wire	[10:0]	EXE_down_loadSel_i;$/;"	n
EXE_down_loadSel_o	Main.v	/^	wire	[10:0]	EXE_down_loadSel_o;	wire	[10:0]	EXE_down_loadSel_i;$/;"	n
EXE_down_loadSel_r_i	Main/PREMEM.v	/^	reg	[`LOAD_SEL]			EXE_down_loadSel_r_i;$/;"	r
EXE_down_mathResSel_i	Main.v	/^	wire	[3:0]	EXE_down_mathResSel_o;	wire	[3:0]	EXE_down_mathResSel_i;$/;"	n
EXE_down_mathResSel_o	Main.v	/^	wire	[3:0]	EXE_down_mathResSel_o;	wire	[3:0]	EXE_down_mathResSel_i;$/;"	n
EXE_down_mathResSel_r_i	Main/PREMEM.v	/^	reg	[`MATH_SEL]			EXE_down_mathResSel_r_i;$/;"	r
EXE_down_mduRes_i	Main.v	/^	wire	[31:0]	EXE_down_mduRes_o;	wire	[31:0]	EXE_down_mduRes_i;$/;"	n
EXE_down_mduRes_o	Main.v	/^	wire	[31:0]	EXE_down_mduRes_o;	wire	[31:0]	EXE_down_mduRes_i;$/;"	n
EXE_down_mduRes_r_i	Main/PREMEM.v	/^	reg	[`SINGLE_WORD]			EXE_down_mduRes_r_i;$/;"	r
EXE_down_memAtom_i	Main.v	/^	wire	[0:0]	EXE_down_memAtom_o;	wire	[0:0]	EXE_down_memAtom_i;$/;"	n
EXE_down_memAtom_o	Main.v	/^	wire	[0:0]	EXE_down_memAtom_o;	wire	[0:0]	EXE_down_memAtom_i;$/;"	n
EXE_down_memAtom_r_i	Main/PREMEM.v	/^	reg	[0:0]			EXE_down_memAtom_r_i;$/;"	r
EXE_down_memEnable_i	Main.v	/^	wire	[3:0]	EXE_down_memEnable_o;	wire	[3:0]	EXE_down_memEnable_i;$/;"	n
EXE_down_memEnable_o	Main.v	/^	wire	[3:0]	EXE_down_memEnable_o;	wire	[3:0]	EXE_down_memEnable_i;$/;"	n
EXE_down_memEnable_r_i	Main/PREMEM.v	/^	reg	[3:0]			EXE_down_memEnable_r_i;$/;"	r
EXE_down_memReq_i	Main.v	/^	wire	[0:0]	EXE_down_memReq_o;	wire	[0:0]	EXE_down_memReq_i;$/;"	n
EXE_down_memReq_o	Main.v	/^	wire	[0:0]	EXE_down_memReq_o;	wire	[0:0]	EXE_down_memReq_i;$/;"	n
EXE_down_memReq_r_i	Main/PREMEM.v	/^	reg	[0:0]			EXE_down_memReq_r_i;$/;"	r
EXE_down_memWR_i	Main.v	/^	wire	[0:0]	EXE_down_memWR_o;	wire	[0:0]	EXE_down_memWR_i;$/;"	n
EXE_down_memWR_o	Main.v	/^	wire	[0:0]	EXE_down_memWR_o;	wire	[0:0]	EXE_down_memWR_i;$/;"	n
EXE_down_memWR_r_i	Main/PREMEM.v	/^	reg	[0:0]			EXE_down_memWR_r_i;$/;"	r
EXE_down_mulRes_i	Main.v	/^	wire	[31:0]	EXE_down_mulRes_o;	wire	[31:0]	EXE_down_mulRes_i;$/;"	n
EXE_down_mulRes_o	Main.v	/^	wire	[31:0]	EXE_down_mulRes_o;	wire	[31:0]	EXE_down_mulRes_i;$/;"	n
EXE_down_mulRes_r_i	Main/PREMEM.v	/^	reg	[`SINGLE_WORD]			EXE_down_mulRes_r_i;$/;"	r
EXE_down_nonBlockDS_i	Main.v	/^	wire	[0:0]	EXE_down_nonBlockDS_o;	wire	[0:0]	EXE_down_nonBlockDS_i;$/;"	n
EXE_down_nonBlockDS_o	Main.v	/^	wire	[0:0]	EXE_down_nonBlockDS_o;	wire	[0:0]	EXE_down_nonBlockDS_i;$/;"	n
EXE_down_nonBlockDS_r_i	Main/SecondBranchAmend.v	/^	reg	[0:0]			EXE_down_nonBlockDS_r_i;$/;"	r
EXE_down_nonBlockMark_i	Main.v	/^	wire	[0:0]	EXE_down_nonBlockMark_o;	wire	[0:0]	EXE_down_nonBlockMark_i;$/;"	n
EXE_down_nonBlockMark_o	Main.v	/^	wire	[0:0]	EXE_down_nonBlockMark_o;	wire	[0:0]	EXE_down_nonBlockMark_i;$/;"	n
EXE_down_nonBlockMark_r_i	Main/PREMEM.v	/^	reg	[0:0]			EXE_down_nonBlockMark_r_i;$/;"	r
EXE_down_nonBlockMark_w_i	Main.v	/^	wire	[0:0]	EXE_down_nonBlockMark_w_o;	wire	[0:0]	EXE_down_nonBlockMark_w_i;$/;"	n
EXE_down_nonBlockMark_w_o	Main.v	/^	wire	[0:0]	EXE_down_nonBlockMark_w_o;	wire	[0:0]	EXE_down_nonBlockMark_w_i;$/;"	n
EXE_down_positionCp0_i	Main.v	/^	wire	[7:0]	EXE_down_positionCp0_o;	wire	[7:0]	EXE_down_positionCp0_i;$/;"	n
EXE_down_positionCp0_o	Main.v	/^	wire	[7:0]	EXE_down_positionCp0_o;	wire	[7:0]	EXE_down_positionCp0_i;$/;"	n
EXE_down_positionCp0_r_i	Main/PREMEM.v	/^	reg	[`CP0_POSITION]			EXE_down_positionCp0_r_i;$/;"	r
EXE_down_readCp0_i	Main.v	/^	wire	[0:0]	EXE_down_readCp0_o;	wire	[0:0]	EXE_down_readCp0_i;$/;"	n
EXE_down_readCp0_o	Main.v	/^	wire	[0:0]	EXE_down_readCp0_o;	wire	[0:0]	EXE_down_readCp0_i;$/;"	n
EXE_down_readCp0_r_i	Main/PREMEM.v	/^	reg	[0:0]			EXE_down_readCp0_r_i;$/;"	r
EXE_down_storeData_i	Main.v	/^	wire	[31:0]	EXE_down_storeData_o;	wire	[31:0]	EXE_down_storeData_i;$/;"	n
EXE_down_storeData_o	Main.v	/^	wire	[31:0]	EXE_down_storeData_o;	wire	[31:0]	EXE_down_storeData_i;$/;"	n
EXE_down_storeData_r_i	Main/PREMEM.v	/^	reg	[`SINGLE_WORD]			EXE_down_storeData_r_i;$/;"	r
EXE_down_valid_w_i	Main.v	/^	wire	[0:0]	EXE_down_valid_w_o;	wire	[0:0]	EXE_down_valid_w_i;$/;"	n
EXE_down_valid_w_o	Main.v	/^	wire	[0:0]	EXE_down_valid_w_o;	wire	[0:0]	EXE_down_valid_w_i;$/;"	n
EXE_down_writeCp0_i	Main.v	/^	wire	[0:0]	EXE_down_writeCp0_o;	wire	[0:0]	EXE_down_writeCp0_i;$/;"	n
EXE_down_writeCp0_o	Main.v	/^	wire	[0:0]	EXE_down_writeCp0_o;	wire	[0:0]	EXE_down_writeCp0_i;$/;"	n
EXE_down_writeCp0_r_i	Main/PREMEM.v	/^	reg	[0:0]			EXE_down_writeCp0_r_i;$/;"	r
EXE_down_writeNum_i	Main.v	/^	wire	[4:0]	EXE_down_writeNum_o;	wire	[4:0]	EXE_down_writeNum_i;$/;"	n
EXE_down_writeNum_o	Main.v	/^	wire	[4:0]	EXE_down_writeNum_o;	wire	[4:0]	EXE_down_writeNum_i;$/;"	n
EXE_down_writeNum_r_i	Main/PREMEM.v	/^	reg	[`GPR_NUM]			EXE_down_writeNum_r_i;$/;"	r
EXE_down_writeNum_w_i	Main.v	/^	wire	[4:0]	EXE_down_writeNum_w_o;	wire	[4:0]	EXE_down_writeNum_w_i;$/;"	n
EXE_down_writeNum_w_o	Main.v	/^	wire	[4:0]	EXE_down_writeNum_w_o;	wire	[4:0]	EXE_down_writeNum_w_i;$/;"	n
EXE_packedInfo	Main/PrimaryExceptionProcessor.v	/^    wire [`ALL_INFO] EXE_packedInfo = {$/;"	n
EXE_up_VAddr_i	Main.v	/^	wire	[31:0]	EXE_up_VAddr_o;	wire	[31:0]	EXE_up_VAddr_i;$/;"	n
EXE_up_VAddr_o	Main.v	/^	wire	[31:0]	EXE_up_VAddr_o;	wire	[31:0]	EXE_up_VAddr_i;$/;"	n
EXE_up_VAddr_r_i	Main/SecondBranchAmend.v	/^	reg	[`SINGLE_WORD]			EXE_up_VAddr_r_i;$/;"	r
EXE_up_aluRes_i	Main.v	/^	wire	[31:0]	EXE_up_aluRes_o;	wire	[31:0]	EXE_up_aluRes_i;$/;"	n
EXE_up_aluRes_o	Main.v	/^	wire	[31:0]	EXE_up_aluRes_o;	wire	[31:0]	EXE_up_aluRes_i;$/;"	n
EXE_up_aluRes_r_i	Main/EXEDOWN.v	/^	reg	[`SINGLE_WORD]			EXE_up_aluRes_r_i;$/;"	r
EXE_up_aluRes_r_i	Main/EXEUP.v	/^	reg	[`SINGLE_WORD]			EXE_up_aluRes_r_i;$/;"	r
EXE_up_aluRes_r_i	Main/SecondBranchAmend.v	/^	reg	[`SINGLE_WORD]			EXE_up_aluRes_r_i;$/;"	r
EXE_up_branchRisk_i	Main.v	/^	wire	[0:0]	EXE_up_branchRisk_o;	wire	[0:0]	EXE_up_branchRisk_i;$/;"	n
EXE_up_branchRisk_o	Main.v	/^	wire	[0:0]	EXE_up_branchRisk_o;	wire	[0:0]	EXE_up_branchRisk_i;$/;"	n
EXE_up_branchRisk_r_i	Main/PREMEM.v	/^	reg	[0:0]			EXE_up_branchRisk_r_i;$/;"	r
EXE_up_branchRisk_r_i	Main/SecondBranchAmend.v	/^	reg	[0:0]			EXE_up_branchRisk_r_i;$/;"	r
EXE_up_checkPoint_i	Main.v	/^	wire	[60:0]	EXE_up_checkPoint_o;	wire	[60:0]	EXE_up_checkPoint_i;$/;"	n
EXE_up_checkPoint_o	Main.v	/^	wire	[60:0]	EXE_up_checkPoint_o;	wire	[60:0]	EXE_up_checkPoint_i;$/;"	n
EXE_up_checkPoint_r_i	Main/SecondBranchAmend.v	/^	reg	[`ALL_CHECKPOINT]			EXE_up_checkPoint_r_i;$/;"	r
EXE_up_corrDest_i	Main.v	/^	wire	[31:0]	EXE_up_corrDest_o;	wire	[31:0]	EXE_up_corrDest_i;$/;"	n
EXE_up_corrDest_o	Main.v	/^	wire	[31:0]	EXE_up_corrDest_o;	wire	[31:0]	EXE_up_corrDest_i;$/;"	n
EXE_up_corrDest_r_i	Main/SecondBranchAmend.v	/^	reg	[`SINGLE_WORD]			EXE_up_corrDest_r_i;$/;"	r
EXE_up_corrTake_i	Main.v	/^	wire	[0:0]	EXE_up_corrTake_o;	wire	[0:0]	EXE_up_corrTake_i;$/;"	n
EXE_up_corrTake_o	Main.v	/^	wire	[0:0]	EXE_up_corrTake_o;	wire	[0:0]	EXE_up_corrTake_i;$/;"	n
EXE_up_corrTake_r_i	Main/SecondBranchAmend.v	/^	reg	[0:0]			EXE_up_corrTake_r_i;$/;"	r
EXE_up_forwardMode_w_i	Main.v	/^	wire	[0:0]	EXE_up_forwardMode_w_o;	wire	[0:0]	EXE_up_forwardMode_w_i;$/;"	n
EXE_up_forwardMode_w_o	Main.v	/^	wire	[0:0]	EXE_up_forwardMode_w_o;	wire	[0:0]	EXE_up_forwardMode_w_i;$/;"	n
EXE_up_okToChange_w_i	Main.v	/^	wire	[0:0]	EXE_up_okToChange_w_o;	wire	[0:0]	EXE_up_okToChange_w_i;$/;"	n
EXE_up_okToChange_w_o	Main.v	/^	wire	[0:0]	EXE_up_okToChange_w_o;	wire	[0:0]	EXE_up_okToChange_w_i;$/;"	n
EXE_up_repairAction_i	Main.v	/^	wire	[7:0]	EXE_up_repairAction_o;	wire	[7:0]	EXE_up_repairAction_i;$/;"	n
EXE_up_repairAction_o	Main.v	/^	wire	[7:0]	EXE_up_repairAction_o;	wire	[7:0]	EXE_up_repairAction_i;$/;"	n
EXE_up_repairAction_r_i	Main/SecondBranchAmend.v	/^	reg	[`REPAIR_ACTION]			EXE_up_repairAction_r_i;$/;"	r
EXE_up_valid_w_i	Main.v	/^	wire	[0:0]	EXE_up_valid_w_o;	wire	[0:0]	EXE_up_valid_w_i;$/;"	n
EXE_up_valid_w_o	Main.v	/^	wire	[0:0]	EXE_up_valid_w_o;	wire	[0:0]	EXE_up_valid_w_i;$/;"	n
EXE_up_writeNum_i	Main.v	/^	wire	[4:0]	EXE_up_writeNum_o;	wire	[4:0]	EXE_up_writeNum_i;$/;"	n
EXE_up_writeNum_o	Main.v	/^	wire	[4:0]	EXE_up_writeNum_o;	wire	[4:0]	EXE_up_writeNum_i;$/;"	n
EXE_up_writeNum_r_i	Main/SecondBranchAmend.v	/^	reg	[`GPR_NUM]			EXE_up_writeNum_r_i;$/;"	r
EXE_up_writeNum_w_i	Main.v	/^	wire	[4:0]	EXE_up_writeNum_w_o;	wire	[4:0]	EXE_up_writeNum_w_i;$/;"	n
EXE_up_writeNum_w_o	Main.v	/^	wire	[4:0]	EXE_up_writeNum_w_o;	wire	[4:0]	EXE_up_writeNum_w_i;$/;"	n
EXL	MyDefines.v	/^    `define EXL 1$/;"	c
EXTEND_ACTION	MyDefines.v	/^`define EXTEND_ACTION       `EXTEND_ACTION_LEN-1:0$/;"	c
EXTEND_ACTION_LEN	MyDefines.v	/^`define EXTEND_ACTION_LEN   3$/;"	c
EntryHi	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]	        EntryHi;$/;"	n
EntryLo0	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]	        EntryLo0;$/;"	n
EntryLo1	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]	        EntryLo1;$/;"	n
ExcCode	Main/PrimaryExceptionProcessor.v	/^    wire    [`EXCCODE]      ExcCode;$/;"	n
FALSE	MyDefines.v	/^`define FALSE 1'b0$/;"	c
FCT_BTBInstEnable_i	Main/IF.v	/^	wire	[3:0]	FCT_BTBInstEnable_o;	wire	[3:0]	FCT_BTBInstEnable_i;$/;"	n
FCT_BTBInstEnable_o	Main/IF.v	/^	wire	[3:0]	FCT_BTBInstEnable_o;	wire	[3:0]	FCT_BTBInstEnable_i;$/;"	n
FCT_BTBValidDest_i	Main/IF.v	/^	wire	[31:0]	FCT_BTBValidDest_o;	wire	[31:0]	FCT_BTBValidDest_i;$/;"	n
FCT_BTBValidDest_o	Main/IF.v	/^	wire	[31:0]	FCT_BTBValidDest_o;	wire	[31:0]	FCT_BTBValidDest_i;$/;"	n
FCT_BTBValidTake_i	Main/IF.v	/^	wire	[0:0]	FCT_BTBValidTake_o;	wire	[0:0]	FCT_BTBValidTake_i;$/;"	n
FCT_BTBValidTake_o	Main/IF.v	/^	wire	[0:0]	FCT_BTBValidTake_o;	wire	[0:0]	FCT_BTBValidTake_i;$/;"	n
FCT_BTBfifthVAddr_i	Main/IF.v	/^	wire	[31:0]	FCT_BTBfifthVAddr_o;	wire	[31:0]	FCT_BTBfifthVAddr_i;$/;"	n
FCT_BTBfifthVAddr_o	Main/IF.v	/^	wire	[31:0]	FCT_BTBfifthVAddr_o;	wire	[31:0]	FCT_BTBfifthVAddr_i;$/;"	n
FCT_ExcCode_i	Main/IF.v	/^	wire	[4:0]	FCT_ExcCode_o;	wire	[4:0]	FCT_ExcCode_i;$/;"	n
FCT_ExcCode_o	Main/IF.v	/^	wire	[4:0]	FCT_ExcCode_o;	wire	[4:0]	FCT_ExcCode_i;$/;"	n
FCT_VAddr_i	Main/IF.v	/^	wire	[31:0]	FCT_VAddr_o;	wire	[31:0]	FCT_VAddr_i;$/;"	n
FCT_VAddr_o	Main/IF.v	/^	wire	[31:0]	FCT_VAddr_o;	wire	[31:0]	FCT_VAddr_i;$/;"	n
FCT_hasException_i	Main/IF.v	/^	wire	[0:0]	FCT_hasException_o;	wire	[0:0]	FCT_hasException_i;$/;"	n
FCT_hasException_o	Main/IF.v	/^	wire	[0:0]	FCT_hasException_o;	wire	[0:0]	FCT_hasException_i;$/;"	n
FCT_isCanceled_i	Main/IF.v	/^	wire	[0:0]	FCT_isCanceled_o;	wire	[0:0]	FCT_isCanceled_i;$/;"	n
FCT_isCanceled_o	Main/IF.v	/^	wire	[0:0]	FCT_isCanceled_o;	wire	[0:0]	FCT_isCanceled_i;$/;"	n
FCT_needDelaySlot_i	Main/IF.v	/^	wire	[0:0]	FCT_needDelaySlot_o;	wire	[0:0]	FCT_needDelaySlot_i;$/;"	n
FCT_needDelaySlot_o	Main/IF.v	/^	wire	[0:0]	FCT_needDelaySlot_o;	wire	[0:0]	FCT_needDelaySlot_i;$/;"	n
FCT_originEnable_i	Main/IF.v	/^	wire	[3:0]	FCT_originEnable_o;	wire	[3:0]	FCT_originEnable_i;$/;"	n
FCT_originEnable_o	Main/IF.v	/^	wire	[3:0]	FCT_originEnable_o;	wire	[3:0]	FCT_originEnable_i;$/;"	n
FCT_predDest_p_i	Main/IF.v	/^	wire	[127:0]	FCT_predDest_p_o;	wire	[127:0]	FCT_predDest_p_i;$/;"	n
FCT_predDest_p_o	Main/IF.v	/^	wire	[127:0]	FCT_predDest_p_o;	wire	[127:0]	FCT_predDest_p_i;$/;"	n
FCT_predTake_p_i	Main/IF.v	/^	wire	[3:0]	FCT_predTake_p_o;	wire	[3:0]	FCT_predTake_p_i;$/;"	n
FCT_predTake_p_o	Main/IF.v	/^	wire	[3:0]	FCT_predTake_p_o;	wire	[3:0]	FCT_predTake_p_i;$/;"	n
FCT_valid_i	Main/IF.v	/^	wire	[0:0]	FCT_valid_o;	wire	[0:0]	FCT_valid_i;$/;"	n
FCT_valid_o	Main/IF.v	/^	wire	[0:0]	FCT_valid_o;	wire	[0:0]	FCT_valid_i;$/;"	n
FLAG0	MyDefines.v	/^`define FLAG0 29:25$/;"	c
FLAG1	MyDefines.v	/^`define FLAG1 4:0$/;"	c
FORWARD_EXE_DOWN_BIT	MyDefines.v	/^`define FORWARD_EXE_DOWN_BIT    6       $/;"	c
FORWARD_EXE_UP_BIT	MyDefines.v	/^`define FORWARD_EXE_UP_BIT      5$/;"	c
FORWARD_ID_BIT	MyDefines.v	/^`define FORWARD_ID_BIT          0   \/\/ 寄存器中有数据，无需前递$/;"	c
FORWARD_MEM_BIT	MyDefines.v	/^`define FORWARD_MEM_BIT         2$/;"	c
FORWARD_MODE	MyDefines.v	/^`define FORWARD_MODE        `FORWARD_MODE_LEN-1:0$/;"	c
FORWARD_MODE_EXE_DOWN	MyDefines.v	/^`define FORWARD_MODE_EXE_DOWN   `FORWARD_MODE_LEN'b1000000$/;"	c
FORWARD_MODE_EXE_UP	MyDefines.v	/^`define FORWARD_MODE_EXE_UP     `FORWARD_MODE_LEN'b0100000$/;"	c
FORWARD_MODE_ID	MyDefines.v	/^`define FORWARD_MODE_ID         `FORWARD_MODE_LEN'b0000001$/;"	c
FORWARD_MODE_LEN	MyDefines.v	/^`define FORWARD_MODE_LEN    7$/;"	c
FORWARD_MODE_MEM	MyDefines.v	/^`define FORWARD_MODE_MEM        `FORWARD_MODE_LEN'b0000100$/;"	c
FORWARD_MODE_PREMEM	MyDefines.v	/^`define FORWARD_MODE_PREMEM     `FORWARD_MODE_LEN'b0010000$/;"	c
FORWARD_MODE_REEXE	MyDefines.v	/^`define FORWARD_MODE_REEXE      `FORWARD_MODE_LEN'b0000010$/;"	c
FORWARD_MODE_SBA	MyDefines.v	/^`define FORWARD_MODE_SBA        `FORWARD_MODE_LEN'b0001000$/;"	c
FORWARD_PREMEM_BIT	MyDefines.v	/^`define FORWARD_PREMEM_BIT      4$/;"	c
FORWARD_REEXE_BIT	MyDefines.v	/^`define FORWARD_REEXE_BIT       1$/;"	c
FORWARD_SBA_BIT	MyDefines.v	/^`define FORWARD_SBA_BIT         3 $/;"	c
FOUR_WORDS	MyDefines.v	/^`define FOUR_WORDS 127:0$/;"	c
FU_allCheckPoint_w_i	Main/IF.v	/^	wire	[60:0]	FU_allCheckPoint_w_o;	wire	[60:0]	FU_allCheckPoint_w_i;$/;"	n
FU_allCheckPoint_w_o	Main/IF.v	/^	wire	[60:0]	FU_allCheckPoint_w_o;	wire	[60:0]	FU_allCheckPoint_w_i;$/;"	n
FU_correctDest_w_i	Main/IF.v	/^	wire	[31:0]	FU_correctDest_w_o;	wire	[31:0]	FU_correctDest_w_i;$/;"	n
FU_correctDest_w_o	Main/IF.v	/^	wire	[31:0]	FU_correctDest_w_o;	wire	[31:0]	FU_correctDest_w_i;$/;"	n
FU_correctTake_w_i	Main/IF.v	/^	wire	[0:0]	FU_correctTake_w_o;	wire	[0:0]	FU_correctTake_w_i;$/;"	n
FU_correctTake_w_o	Main/IF.v	/^	wire	[0:0]	FU_correctTake_w_o;	wire	[0:0]	FU_correctTake_w_i;$/;"	n
FU_erroVAddr_w_i	Main/IF.v	/^	wire	[31:0]	FU_erroVAddr_w_o;	wire	[31:0]	FU_erroVAddr_w_i;$/;"	n
FU_erroVAddr_w_o	Main/IF.v	/^	wire	[31:0]	FU_erroVAddr_w_o;	wire	[31:0]	FU_erroVAddr_w_i;$/;"	n
FU_repairAction_w_i	Main/IF.v	/^	wire	[7:0]	FU_repairAction_w_o;	wire	[7:0]	FU_repairAction_w_i;$/;"	n
FU_repairAction_w_o	Main/IF.v	/^	wire	[7:0]	FU_repairAction_w_o;	wire	[7:0]	FU_repairAction_w_i;$/;"	n
FirstCacheTrace	Main/IF/FirstCacheTrace.v	/^module FirstCacheTrace ($/;"	m
FixUnit	Main/IF/FixUnit.v	/^module FixUnit($/;"	m
GPR_NUM	MyDefines.v	/^`define GPR_NUM         `GPR_NUM_LEN-1:0$/;"	c
GPR_NUM_LEN	MyDefines.v	/^`define GPR_NUM_LEN     5$/;"	c
HILO	MyDefines.v	/^`define HILO        1:0$/;"	c
HILO_FILE	MyDefines.v	/^`define HILO_FILE               "..\/..\/..\/..\/..\/..\/mycpu\/trace\/hilofile.txt"$/;"	c
HI_ASID	MyDefines.v	/^    `define     HI_ASID         7:0   $/;"	c
HI_READ	MyDefines.v	/^`define HI_READ     0$/;"	c
HI_VPN	MyDefines.v	/^    `define     HI_VPN          31:13$/;"	c
HI_WRITE	MyDefines.v	/^`define HI_WRITE    0$/;"	c
HalfEnable	Main/EXEDOWN.v	/^    wire [3:0]  HalfEnable =    alignCheck==2'b00 ? 4'b0011 :$/;"	n
HiLoConflict	Main/EXEDOWN.v	/^    wire HiLoConflict = ((|ID_down_readHiLo_r_i)||(|isMduWrite))&&HiLo_busy;   $/;"	n
HiLo_busy	Main/EXEDOWN.v	/^    wire                 HiLo_busy;$/;"	n
IA	MyDefines.v	/^    `define IA  3'd0$/;"	c
ID	Main/ID.v	/^module ID ($/;"	m
ID_down_CacheOperator_i	Main.v	/^	wire	[4:0]	ID_down_CacheOperator_o;	wire	[4:0]	ID_down_CacheOperator_i;$/;"	n
ID_down_CacheOperator_o	Main.v	/^	wire	[4:0]	ID_down_CacheOperator_o;	wire	[4:0]	ID_down_CacheOperator_i;$/;"	n
ID_down_CacheOperator_r_i	Main/EXEDOWN.v	/^	reg	[`CACHE_OP]			ID_down_CacheOperator_r_i;$/;"	r
ID_down_ExcCode_i	Main.v	/^	wire	[4:0]	ID_down_ExcCode_o;	wire	[4:0]	ID_down_ExcCode_i;$/;"	n
ID_down_ExcCode_o	Main.v	/^	wire	[4:0]	ID_down_ExcCode_o;	wire	[4:0]	ID_down_ExcCode_i;$/;"	n
ID_down_ExcCode_r_i	Main/EXEDOWN.v	/^	reg	[`EXCCODE]			ID_down_ExcCode_r_i;$/;"	r
ID_down_TLBInstOperator_i	Main.v	/^	wire	[3:0]	ID_down_TLBInstOperator_o;	wire	[3:0]	ID_down_TLBInstOperator_i;$/;"	n
ID_down_TLBInstOperator_o	Main.v	/^	wire	[3:0]	ID_down_TLBInstOperator_o;	wire	[3:0]	ID_down_TLBInstOperator_i;$/;"	n
ID_down_TLBInstOperator_r_i	Main/EXEDOWN.v	/^	reg	[`TLB_INST]			ID_down_TLBInstOperator_r_i;$/;"	r
ID_down_VAddr_i	Main.v	/^	wire	[31:0]	ID_down_VAddr_o;	wire	[31:0]	ID_down_VAddr_i;$/;"	n
ID_down_VAddr_o	Main.v	/^	wire	[31:0]	ID_down_VAddr_o;	wire	[31:0]	ID_down_VAddr_i;$/;"	n
ID_down_VAddr_r_i	Main/EXEDOWN.v	/^	reg	[`SINGLE_WORD]			ID_down_VAddr_r_i;$/;"	r
ID_down_aluOprator_i	Main.v	/^	wire	[13:0]	ID_down_aluOprator_o;	wire	[13:0]	ID_down_aluOprator_i;$/;"	n
ID_down_aluOprator_o	Main.v	/^	wire	[13:0]	ID_down_aluOprator_o;	wire	[13:0]	ID_down_aluOprator_i;$/;"	n
ID_down_aluOprator_r_i	Main/EXEDOWN.v	/^	reg	[`ALUOP]			ID_down_aluOprator_r_i;$/;"	r
ID_down_data0Ready_i	Main.v	/^	wire	[0:0]	ID_down_data0Ready_o;	wire	[0:0]	ID_down_data0Ready_i;$/;"	n
ID_down_data0Ready_o	Main.v	/^	wire	[0:0]	ID_down_data0Ready_o;	wire	[0:0]	ID_down_data0Ready_i;$/;"	n
ID_down_data0Ready_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_data0Ready_r_i;$/;"	r
ID_down_data1Ready_i	Main.v	/^	wire	[0:0]	ID_down_data1Ready_o;	wire	[0:0]	ID_down_data1Ready_i;$/;"	n
ID_down_data1Ready_o	Main.v	/^	wire	[0:0]	ID_down_data1Ready_o;	wire	[0:0]	ID_down_data1Ready_i;$/;"	n
ID_down_data1Ready_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_data1Ready_r_i;$/;"	r
ID_down_dataReady_up	Main/EXEDOWN.v	/^    wire	                            ID_down_dataReady_up  [1:0];        \/\/ 表示该operand是否可用$/;"	n
ID_down_eret_i	Main.v	/^	wire	[0:0]	ID_down_eret_o;	wire	[0:0]	ID_down_eret_i;$/;"	n
ID_down_eret_o	Main.v	/^	wire	[0:0]	ID_down_eret_o;	wire	[0:0]	ID_down_eret_i;$/;"	n
ID_down_eret_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_eret_r_i;$/;"	r
ID_down_exceptionRisk_i	Main.v	/^	wire	[0:0]	ID_down_exceptionRisk_o;	wire	[0:0]	ID_down_exceptionRisk_i;$/;"	n
ID_down_exceptionRisk_o	Main.v	/^	wire	[0:0]	ID_down_exceptionRisk_o;	wire	[0:0]	ID_down_exceptionRisk_i;$/;"	n
ID_down_exceptionRisk_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_exceptionRisk_r_i;$/;"	r
ID_down_exceptionSel_i	Main.v	/^	wire	[1:0]	ID_down_exceptionSel_o;	wire	[1:0]	ID_down_exceptionSel_i;$/;"	n
ID_down_exceptionSel_o	Main.v	/^	wire	[1:0]	ID_down_exceptionSel_o;	wire	[1:0]	ID_down_exceptionSel_i;$/;"	n
ID_down_exceptionSel_r_i	Main/EXEDOWN.v	/^	reg	[`EXCEPRION_SEL]			ID_down_exceptionSel_r_i;$/;"	r
ID_down_forwardSel0_i	Main.v	/^	wire	[6:0]	ID_down_forwardSel0_o;	wire	[6:0]	ID_down_forwardSel0_i;$/;"	n
ID_down_forwardSel0_o	Main.v	/^	wire	[6:0]	ID_down_forwardSel0_o;	wire	[6:0]	ID_down_forwardSel0_i;$/;"	n
ID_down_forwardSel0_r_i	Main/EXEDOWN.v	/^	reg	[`FORWARD_MODE]			ID_down_forwardSel0_r_i;$/;"	r
ID_down_forwardSel1_i	Main.v	/^	wire	[6:0]	ID_down_forwardSel1_o;	wire	[6:0]	ID_down_forwardSel1_i;$/;"	n
ID_down_forwardSel1_o	Main.v	/^	wire	[6:0]	ID_down_forwardSel1_o;	wire	[6:0]	ID_down_forwardSel1_i;$/;"	n
ID_down_forwardSel1_r_i	Main/EXEDOWN.v	/^	reg	[`FORWARD_MODE]			ID_down_forwardSel1_r_i;$/;"	r
ID_down_forwardSel_up	Main/EXEDOWN.v	/^    wire	    [`FORWARD_MODE]         ID_down_forwardSel_up [1:0];        \/\/ 用于选择前递信号$/;"	n
ID_down_hasException_i	Main.v	/^	wire	[0:0]	ID_down_hasException_o;	wire	[0:0]	ID_down_hasException_i;$/;"	n
ID_down_hasException_o	Main.v	/^	wire	[0:0]	ID_down_hasException_o;	wire	[0:0]	ID_down_hasException_i;$/;"	n
ID_down_hasException_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_hasException_r_i;$/;"	r
ID_down_isCacheInst_i	Main.v	/^	wire	[0:0]	ID_down_isCacheInst_o;	wire	[0:0]	ID_down_isCacheInst_i;$/;"	n
ID_down_isCacheInst_o	Main.v	/^	wire	[0:0]	ID_down_isCacheInst_o;	wire	[0:0]	ID_down_isCacheInst_i;$/;"	n
ID_down_isCacheInst_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_isCacheInst_r_i;$/;"	r
ID_down_isDangerous_i	Main.v	/^	wire	[0:0]	ID_down_isDangerous_o;	wire	[0:0]	ID_down_isDangerous_i;$/;"	n
ID_down_isDangerous_o	Main.v	/^	wire	[0:0]	ID_down_isDangerous_o;	wire	[0:0]	ID_down_isDangerous_i;$/;"	n
ID_down_isDangerous_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_isDangerous_r_i;$/;"	r
ID_down_isDelaySlot_i	Main.v	/^	wire	[0:0]	ID_down_isDelaySlot_o;	wire	[0:0]	ID_down_isDelaySlot_i;$/;"	n
ID_down_isDelaySlot_o	Main.v	/^	wire	[0:0]	ID_down_isDelaySlot_o;	wire	[0:0]	ID_down_isDelaySlot_i;$/;"	n
ID_down_isDelaySlot_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_isDelaySlot_r_i;$/;"	r
ID_down_isRefill_i	Main.v	/^	wire	[0:0]	ID_down_isRefill_o;	wire	[0:0]	ID_down_isRefill_i;$/;"	n
ID_down_isRefill_o	Main.v	/^	wire	[0:0]	ID_down_isRefill_o;	wire	[0:0]	ID_down_isRefill_i;$/;"	n
ID_down_isRefill_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_isRefill_r_i;$/;"	r
ID_down_isTLBInst_i	Main.v	/^	wire	[0:0]	ID_down_isTLBInst_o;	wire	[0:0]	ID_down_isTLBInst_i;$/;"	n
ID_down_isTLBInst_o	Main.v	/^	wire	[0:0]	ID_down_isTLBInst_o;	wire	[0:0]	ID_down_isTLBInst_i;$/;"	n
ID_down_isTLBInst_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_isTLBInst_r_i;$/;"	r
ID_down_loadMode_i	Main.v	/^	wire	[6:0]	ID_down_loadMode_o;	wire	[6:0]	ID_down_loadMode_i;$/;"	n
ID_down_loadMode_o	Main.v	/^	wire	[6:0]	ID_down_loadMode_o;	wire	[6:0]	ID_down_loadMode_i;$/;"	n
ID_down_loadMode_r_i	Main/EXEDOWN.v	/^	reg	[`LOAD_MODE]			ID_down_loadMode_r_i;$/;"	r
ID_down_mduOperator_i	Main.v	/^	wire	[8:0]	ID_down_mduOperator_o;	wire	[8:0]	ID_down_mduOperator_i;$/;"	n
ID_down_mduOperator_o	Main.v	/^	wire	[8:0]	ID_down_mduOperator_o;	wire	[8:0]	ID_down_mduOperator_i;$/;"	n
ID_down_mduOperator_r_i	Main/EXEDOWN.v	/^	reg	[`MDUOP]			ID_down_mduOperator_r_i;$/;"	r
ID_down_memAtom_i	Main.v	/^	wire	[0:0]	ID_down_memAtom_o;	wire	[0:0]	ID_down_memAtom_i;$/;"	n
ID_down_memAtom_o	Main.v	/^	wire	[0:0]	ID_down_memAtom_o;	wire	[0:0]	ID_down_memAtom_i;$/;"	n
ID_down_memAtom_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_memAtom_r_i;$/;"	r
ID_down_memReq_i	Main.v	/^	wire	[0:0]	ID_down_memReq_o;	wire	[0:0]	ID_down_memReq_i;$/;"	n
ID_down_memReq_o	Main.v	/^	wire	[0:0]	ID_down_memReq_o;	wire	[0:0]	ID_down_memReq_i;$/;"	n
ID_down_memReq_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_memReq_r_i;$/;"	r
ID_down_memWR_i	Main.v	/^	wire	[0:0]	ID_down_memWR_o;	wire	[0:0]	ID_down_memWR_i;$/;"	n
ID_down_memWR_o	Main.v	/^	wire	[0:0]	ID_down_memWR_o;	wire	[0:0]	ID_down_memWR_i;$/;"	n
ID_down_memWR_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_memWR_r_i;$/;"	r
ID_down_oprand0IsReg_i	Main.v	/^	wire	[0:0]	ID_down_oprand0IsReg_o;	wire	[0:0]	ID_down_oprand0IsReg_i;$/;"	n
ID_down_oprand0IsReg_o	Main.v	/^	wire	[0:0]	ID_down_oprand0IsReg_o;	wire	[0:0]	ID_down_oprand0IsReg_i;$/;"	n
ID_down_oprand0IsReg_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_oprand0IsReg_r_i;$/;"	r
ID_down_oprand0_i	Main.v	/^	wire	[31:0]	ID_down_oprand0_o;	wire	[31:0]	ID_down_oprand0_i;$/;"	n
ID_down_oprand0_o	Main.v	/^	wire	[31:0]	ID_down_oprand0_o;	wire	[31:0]	ID_down_oprand0_i;$/;"	n
ID_down_oprand0_r_i	Main/EXEDOWN.v	/^	reg	[`SINGLE_WORD]			ID_down_oprand0_r_i;$/;"	r
ID_down_oprand1IsReg_i	Main.v	/^	wire	[0:0]	ID_down_oprand1IsReg_o;	wire	[0:0]	ID_down_oprand1IsReg_i;$/;"	n
ID_down_oprand1IsReg_o	Main.v	/^	wire	[0:0]	ID_down_oprand1IsReg_o;	wire	[0:0]	ID_down_oprand1IsReg_i;$/;"	n
ID_down_oprand1IsReg_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_oprand1IsReg_r_i;$/;"	r
ID_down_oprand1_i	Main.v	/^	wire	[31:0]	ID_down_oprand1_o;	wire	[31:0]	ID_down_oprand1_i;$/;"	n
ID_down_oprand1_o	Main.v	/^	wire	[31:0]	ID_down_oprand1_o;	wire	[31:0]	ID_down_oprand1_i;$/;"	n
ID_down_oprand1_r_i	Main/EXEDOWN.v	/^	reg	[`SINGLE_WORD]			ID_down_oprand1_r_i;$/;"	r
ID_down_oprand_up	Main/EXEDOWN.v	/^    wire	    [`SINGLE_WORD]          ID_down_oprand_up     [1:0];            $/;"	n
ID_down_positionCp0_i	Main.v	/^	wire	[7:0]	ID_down_positionCp0_o;	wire	[7:0]	ID_down_positionCp0_i;$/;"	n
ID_down_positionCp0_o	Main.v	/^	wire	[7:0]	ID_down_positionCp0_o;	wire	[7:0]	ID_down_positionCp0_i;$/;"	n
ID_down_positionCp0_r_i	Main/EXEDOWN.v	/^	reg	[`CP0_POSITION]			ID_down_positionCp0_r_i;$/;"	r
ID_down_readCp0_i	Main.v	/^	wire	[0:0]	ID_down_readCp0_o;	wire	[0:0]	ID_down_readCp0_i;$/;"	n
ID_down_readCp0_o	Main.v	/^	wire	[0:0]	ID_down_readCp0_o;	wire	[0:0]	ID_down_readCp0_i;$/;"	n
ID_down_readCp0_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_readCp0_r_i;$/;"	r
ID_down_readData_i	Main.v	/^	wire	[63:0]	ID_down_readData_o;	wire	[63:0]	ID_down_readData_i;$/;"	n
ID_down_readData_o	Main.v	/^	wire	[63:0]	ID_down_readData_o;	wire	[63:0]	ID_down_readData_i;$/;"	n
ID_down_readData_r_i	Main/EXEDOWN.v	/^	reg	[2*`SINGLE_WORD]			ID_down_readData_r_i;$/;"	r
ID_down_readHiLo_i	Main.v	/^	wire	[1:0]	ID_down_readHiLo_o;	wire	[1:0]	ID_down_readHiLo_i;$/;"	n
ID_down_readHiLo_o	Main.v	/^	wire	[1:0]	ID_down_readHiLo_o;	wire	[1:0]	ID_down_readHiLo_i;$/;"	n
ID_down_readHiLo_r_i	Main/EXEDOWN.v	/^	reg	[`HILO]			ID_down_readHiLo_r_i;$/;"	r
ID_down_storeMode_i	Main.v	/^	wire	[4:0]	ID_down_storeMode_o;	wire	[4:0]	ID_down_storeMode_i;$/;"	n
ID_down_storeMode_o	Main.v	/^	wire	[4:0]	ID_down_storeMode_o;	wire	[4:0]	ID_down_storeMode_i;$/;"	n
ID_down_storeMode_r_i	Main/EXEDOWN.v	/^	reg	[`STORE_MODE]			ID_down_storeMode_r_i;$/;"	r
ID_down_trapKind_i	Main.v	/^	wire	[3:0]	ID_down_trapKind_o;	wire	[3:0]	ID_down_trapKind_i;$/;"	n
ID_down_trapKind_o	Main.v	/^	wire	[3:0]	ID_down_trapKind_o;	wire	[3:0]	ID_down_trapKind_i;$/;"	n
ID_down_trapKind_r_i	Main/EXEDOWN.v	/^	reg	[`TRAP_KIND]			ID_down_trapKind_r_i;$/;"	r
ID_down_valid_w_i	Main.v	/^	wire	[0:0]	ID_down_valid_w_o;	wire	[0:0]	ID_down_valid_w_i;$/;"	n
ID_down_valid_w_o	Main.v	/^	wire	[0:0]	ID_down_valid_w_o;	wire	[0:0]	ID_down_valid_w_i;$/;"	n
ID_down_writeCp0_i	Main.v	/^	wire	[0:0]	ID_down_writeCp0_o;	wire	[0:0]	ID_down_writeCp0_i;$/;"	n
ID_down_writeCp0_o	Main.v	/^	wire	[0:0]	ID_down_writeCp0_o;	wire	[0:0]	ID_down_writeCp0_i;$/;"	n
ID_down_writeCp0_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_down_writeCp0_r_i;$/;"	r
ID_down_writeHiLo_i	Main.v	/^	wire	[1:0]	ID_down_writeHiLo_o;	wire	[1:0]	ID_down_writeHiLo_i;$/;"	n
ID_down_writeHiLo_o	Main.v	/^	wire	[1:0]	ID_down_writeHiLo_o;	wire	[1:0]	ID_down_writeHiLo_i;$/;"	n
ID_down_writeHiLo_r_i	Main/EXEDOWN.v	/^	reg	[`HILO]			ID_down_writeHiLo_r_i;$/;"	r
ID_down_writeNum_i	Main.v	/^	wire	[4:0]	ID_down_writeNum_o;	wire	[4:0]	ID_down_writeNum_i;$/;"	n
ID_down_writeNum_o	Main.v	/^	wire	[4:0]	ID_down_writeNum_o;	wire	[4:0]	ID_down_writeNum_i;$/;"	n
ID_down_writeNum_r_i	Main/EXEDOWN.v	/^	reg	[`GPR_NUM]			ID_down_writeNum_r_i;$/;"	r
ID_exceptionRisk_p	Main/ID.v	/^    wire [1:0]                         ID_exceptionRisk_p       ;$/;"	n
ID_stopFetch_i	Main.v	/^	wire	[0:0]	ID_stopFetch_o;	wire	[0:0]	ID_stopFetch_i;$/;"	n
ID_stopFetch_o	Main.v	/^	wire	[0:0]	ID_stopFetch_o;	wire	[0:0]	ID_stopFetch_i;$/;"	n
ID_upDateMode_i	Main.v	/^	wire	[1:0]	ID_upDateMode_o;	wire	[1:0]	ID_upDateMode_i;$/;"	n
ID_upDateMode_o	Main.v	/^	wire	[1:0]	ID_upDateMode_o;	wire	[1:0]	ID_upDateMode_i;$/;"	n
ID_up_VAddr_i	Main.v	/^	wire	[31:0]	ID_up_VAddr_o;	wire	[31:0]	ID_up_VAddr_i;$/;"	n
ID_up_VAddr_o	Main.v	/^	wire	[31:0]	ID_up_VAddr_o;	wire	[31:0]	ID_up_VAddr_i;$/;"	n
ID_up_VAddr_r_i	Main/EXEUP.v	/^	reg	[`SINGLE_WORD]			ID_up_VAddr_r_i;$/;"	r
ID_up_aluOprator_i	Main.v	/^	wire	[13:0]	ID_up_aluOprator_o;	wire	[13:0]	ID_up_aluOprator_i;$/;"	n
ID_up_aluOprator_o	Main.v	/^	wire	[13:0]	ID_up_aluOprator_o;	wire	[13:0]	ID_up_aluOprator_i;$/;"	n
ID_up_aluOprator_r_i	Main/EXEUP.v	/^	reg	[`ALUOP]			ID_up_aluOprator_r_i;$/;"	r
ID_up_branchKind_i	Main.v	/^	wire	[5:0]	ID_up_branchKind_o;	wire	[5:0]	ID_up_branchKind_i;$/;"	n
ID_up_branchKind_o	Main.v	/^	wire	[5:0]	ID_up_branchKind_o;	wire	[5:0]	ID_up_branchKind_i;$/;"	n
ID_up_branchKind_r_i	Main/EXEUP.v	/^	reg	[`BRANCH_KIND]			ID_up_branchKind_r_i;$/;"	r
ID_up_branchRisk_i	Main.v	/^	wire	[0:0]	ID_up_branchRisk_o;	wire	[0:0]	ID_up_branchRisk_i;$/;"	n
ID_up_branchRisk_o	Main.v	/^	wire	[0:0]	ID_up_branchRisk_o;	wire	[0:0]	ID_up_branchRisk_i;$/;"	n
ID_up_branchRisk_r_i	Main/EXEDOWN.v	/^	reg	[0:0]			ID_up_branchRisk_r_i;$/;"	r
ID_up_branchRisk_r_i	Main/EXEUP.v	/^	reg	[0:0]			ID_up_branchRisk_r_i;$/;"	r
ID_up_checkPoint_i	Main.v	/^	wire	[60:0]	ID_up_checkPoint_o;	wire	[60:0]	ID_up_checkPoint_i;$/;"	n
ID_up_checkPoint_o	Main.v	/^	wire	[60:0]	ID_up_checkPoint_o;	wire	[60:0]	ID_up_checkPoint_i;$/;"	n
ID_up_checkPoint_r_i	Main/EXEUP.v	/^	reg	[`ALL_CHECKPOINT]			ID_up_checkPoint_r_i;$/;"	r
ID_up_data0Ready_i	Main.v	/^	wire	[0:0]	ID_up_data0Ready_o;	wire	[0:0]	ID_up_data0Ready_i;$/;"	n
ID_up_data0Ready_o	Main.v	/^	wire	[0:0]	ID_up_data0Ready_o;	wire	[0:0]	ID_up_data0Ready_i;$/;"	n
ID_up_data0Ready_r_i	Main/EXEUP.v	/^	reg	[0:0]			ID_up_data0Ready_r_i;$/;"	r
ID_up_data1Ready_i	Main.v	/^	wire	[0:0]	ID_up_data1Ready_o;	wire	[0:0]	ID_up_data1Ready_i;$/;"	n
ID_up_data1Ready_o	Main.v	/^	wire	[0:0]	ID_up_data1Ready_o;	wire	[0:0]	ID_up_data1Ready_i;$/;"	n
ID_up_data1Ready_r_i	Main/EXEUP.v	/^	reg	[0:0]			ID_up_data1Ready_r_i;$/;"	r
ID_up_forwardSel0_i	Main.v	/^	wire	[6:0]	ID_up_forwardSel0_o;	wire	[6:0]	ID_up_forwardSel0_i;$/;"	n
ID_up_forwardSel0_o	Main.v	/^	wire	[6:0]	ID_up_forwardSel0_o;	wire	[6:0]	ID_up_forwardSel0_i;$/;"	n
ID_up_forwardSel0_r_i	Main/EXEUP.v	/^	reg	[`FORWARD_MODE]			ID_up_forwardSel0_r_i;$/;"	r
ID_up_forwardSel1_i	Main.v	/^	wire	[6:0]	ID_up_forwardSel1_o;	wire	[6:0]	ID_up_forwardSel1_i;$/;"	n
ID_up_forwardSel1_o	Main.v	/^	wire	[6:0]	ID_up_forwardSel1_o;	wire	[6:0]	ID_up_forwardSel1_i;$/;"	n
ID_up_forwardSel1_r_i	Main/EXEUP.v	/^	reg	[`FORWARD_MODE]			ID_up_forwardSel1_r_i;$/;"	r
ID_up_forwardSel_up	Main/EXEUP.v	/^    wire	    [`FORWARD_MODE]         ID_up_forwardSel_up [1:0];        \/\/ 用于选择前递信号$/;"	n
ID_up_oprand0IsReg_i	Main.v	/^	wire	[0:0]	ID_up_oprand0IsReg_o;	wire	[0:0]	ID_up_oprand0IsReg_i;$/;"	n
ID_up_oprand0IsReg_o	Main.v	/^	wire	[0:0]	ID_up_oprand0IsReg_o;	wire	[0:0]	ID_up_oprand0IsReg_i;$/;"	n
ID_up_oprand0IsReg_r_i	Main/EXEUP.v	/^	reg	[0:0]			ID_up_oprand0IsReg_r_i;$/;"	r
ID_up_oprand0_i	Main.v	/^	wire	[31:0]	ID_up_oprand0_o;	wire	[31:0]	ID_up_oprand0_i;$/;"	n
ID_up_oprand0_o	Main.v	/^	wire	[31:0]	ID_up_oprand0_o;	wire	[31:0]	ID_up_oprand0_i;$/;"	n
ID_up_oprand0_r_i	Main/EXEUP.v	/^	reg	[`SINGLE_WORD]			ID_up_oprand0_r_i;$/;"	r
ID_up_oprand1IsReg_i	Main.v	/^	wire	[0:0]	ID_up_oprand1IsReg_o;	wire	[0:0]	ID_up_oprand1IsReg_i;$/;"	n
ID_up_oprand1IsReg_o	Main.v	/^	wire	[0:0]	ID_up_oprand1IsReg_o;	wire	[0:0]	ID_up_oprand1IsReg_i;$/;"	n
ID_up_oprand1IsReg_r_i	Main/EXEUP.v	/^	reg	[0:0]			ID_up_oprand1IsReg_r_i;$/;"	r
ID_up_oprand1_i	Main.v	/^	wire	[31:0]	ID_up_oprand1_o;	wire	[31:0]	ID_up_oprand1_i;$/;"	n
ID_up_oprand1_o	Main.v	/^	wire	[31:0]	ID_up_oprand1_o;	wire	[31:0]	ID_up_oprand1_i;$/;"	n
ID_up_oprand1_r_i	Main/EXEUP.v	/^	reg	[`SINGLE_WORD]			ID_up_oprand1_r_i;$/;"	r
ID_up_oprand_up	Main/EXEUP.v	/^    wire	    [`SINGLE_WORD]          ID_up_oprand_up     [1:0];            $/;"	n
ID_up_predDest_i	Main.v	/^	wire	[31:0]	ID_up_predDest_o;	wire	[31:0]	ID_up_predDest_i;$/;"	n
ID_up_predDest_o	Main.v	/^	wire	[31:0]	ID_up_predDest_o;	wire	[31:0]	ID_up_predDest_i;$/;"	n
ID_up_predDest_r_i	Main/EXEUP.v	/^	reg	[`SINGLE_WORD]			ID_up_predDest_r_i;$/;"	r
ID_up_predTake_i	Main.v	/^	wire	[0:0]	ID_up_predTake_o;	wire	[0:0]	ID_up_predTake_i;$/;"	n
ID_up_predTake_o	Main.v	/^	wire	[0:0]	ID_up_predTake_o;	wire	[0:0]	ID_up_predTake_i;$/;"	n
ID_up_predTake_r_i	Main/EXEUP.v	/^	reg	[0:0]			ID_up_predTake_r_i;$/;"	r
ID_up_readData_i	Main.v	/^	wire	[63:0]	ID_up_readData_o;	wire	[63:0]	ID_up_readData_i;$/;"	n
ID_up_readData_o	Main.v	/^	wire	[63:0]	ID_up_readData_o;	wire	[63:0]	ID_up_readData_i;$/;"	n
ID_up_readData_r_i	Main/EXEUP.v	/^	reg	[2*`SINGLE_WORD]			ID_up_readData_r_i;$/;"	r
ID_up_repairAction_i	Main.v	/^	wire	[7:0]	ID_up_repairAction_o;	wire	[7:0]	ID_up_repairAction_i;$/;"	n
ID_up_repairAction_o	Main.v	/^	wire	[7:0]	ID_up_repairAction_o;	wire	[7:0]	ID_up_repairAction_i;$/;"	n
ID_up_repairAction_r_i	Main/EXEUP.v	/^	reg	[`REPAIR_ACTION]			ID_up_repairAction_r_i;$/;"	r
ID_up_valid_w_i	Main.v	/^	wire	[0:0]	ID_up_valid_w_o;	wire	[0:0]	ID_up_valid_w_i;$/;"	n
ID_up_valid_w_o	Main.v	/^	wire	[0:0]	ID_up_valid_w_o;	wire	[0:0]	ID_up_valid_w_i;$/;"	n
ID_up_writeNum_i	Main.v	/^	wire	[4:0]	ID_up_writeNum_o;	wire	[4:0]	ID_up_writeNum_i;$/;"	n
ID_up_writeNum_o	Main.v	/^	wire	[4:0]	ID_up_writeNum_o;	wire	[4:0]	ID_up_writeNum_i;$/;"	n
ID_up_writeNum_r_i	Main/EXEUP.v	/^	reg	[`GPR_NUM]			ID_up_writeNum_r_i;$/;"	r
IE	MyDefines.v	/^    `define IE  0\/*}}}*\/$/;"	c
IF	Main/IF.v	/^module IF ($/;"	m
IF_ExcCode_i	Main.v	/^	wire	[4:0]	IF_ExcCode_o;	wire	[4:0]	IF_ExcCode_i;$/;"	n
IF_ExcCode_o	Main.v	/^	wire	[4:0]	IF_ExcCode_o;	wire	[4:0]	IF_ExcCode_i;$/;"	n
IF_hasException_i	Main.v	/^	wire	[0:0]	IF_hasException_o;	wire	[0:0]	IF_hasException_i;$/;"	n
IF_hasException_o	Main.v	/^	wire	[0:0]	IF_hasException_o;	wire	[0:0]	IF_hasException_i;$/;"	n
IF_instBasePC_i	Main.v	/^	wire	[31:0]	IF_instBasePC_o;	wire	[31:0]	IF_instBasePC_i;$/;"	n
IF_instBasePC_o	Main.v	/^	wire	[31:0]	IF_instBasePC_o;	wire	[31:0]	IF_instBasePC_i;$/;"	n
IF_instBasePC_up	Main/components/ID/InstQueue.v	/^    wire	[`SINGLE_WORD]          IF_instBasePC_up    [3:0];$/;"	n
IF_instEnable_i	Main.v	/^	wire	[3:0]	IF_instEnable_o;	wire	[3:0]	IF_instEnable_i;$/;"	n
IF_instEnable_o	Main.v	/^	wire	[3:0]	IF_instEnable_o;	wire	[3:0]	IF_instEnable_i;$/;"	n
IF_instNum_i	Main.v	/^	wire	[2:0]	IF_instNum_o;	wire	[2:0]	IF_instNum_i;$/;"	n
IF_instNum_o	Main.v	/^	wire	[2:0]	IF_instNum_o;	wire	[2:0]	IF_instNum_i;$/;"	n
IF_inst_p_i	Main.v	/^	wire	[127:0]	IF_inst_p_o;	wire	[127:0]	IF_inst_p_i;$/;"	n
IF_inst_p_o	Main.v	/^	wire	[127:0]	IF_inst_p_o;	wire	[127:0]	IF_inst_p_i;$/;"	n
IF_inst_up	Main/components/ID/InstQueue.v	/^    wire    [`SINGLE_WORD]          IF_inst_up          [3:0];$/;"	n
IF_isRefill_i	Main.v	/^	wire	[0:0]	IF_isRefill_o;	wire	[0:0]	IF_isRefill_i;$/;"	n
IF_isRefill_o	Main.v	/^	wire	[0:0]	IF_isRefill_o;	wire	[0:0]	IF_isRefill_i;$/;"	n
IF_predDest_p_i	Main.v	/^	wire	[127:0]	IF_predDest_p_o;	wire	[127:0]	IF_predDest_p_i;$/;"	n
IF_predDest_p_o	Main.v	/^	wire	[127:0]	IF_predDest_p_o;	wire	[127:0]	IF_predDest_p_i;$/;"	n
IF_predDest_up	Main/components/ID/InstQueue.v	/^    wire    [`SINGLE_WORD]          IF_predDest_up      [3:0];$/;"	n
IF_predInfo_p_i	Main.v	/^	wire	[243:0]	IF_predInfo_p_o;	wire	[243:0]	IF_predInfo_p_i;$/;"	n
IF_predInfo_p_o	Main.v	/^	wire	[243:0]	IF_predInfo_p_o;	wire	[243:0]	IF_predInfo_p_i;$/;"	n
IF_predInfo_up	Main/components/ID/InstQueue.v	/^    wire    [`ALL_CHECKPOINT]       IF_predInfo_up      [3:0];$/;"	n
IF_predTake_p_i	Main.v	/^	wire	[3:0]	IF_predTake_p_o;	wire	[3:0]	IF_predTake_p_i;$/;"	n
IF_predTake_p_o	Main.v	/^	wire	[3:0]	IF_predTake_p_o;	wire	[3:0]	IF_predTake_p_i;$/;"	n
IF_predTake_up	Main/components/ID/InstQueue.v	/^    wire    [0:0]                   IF_predTake_up      [3:0];$/;"	n
IF_supplyNum	Main/components/ID/InstQueue.v	/^    wire    [2:0] IF_supplyNum = {3{IF_valid_i}} & (  IF_instEnable_i[3] ? 3'd4 :$/;"	n
IF_valid_i	Main.v	/^	wire	[0:0]	IF_valid_o;	wire	[0:0]	IF_valid_i;$/;"	n
IF_valid_o	Main.v	/^	wire	[0:0]	IF_valid_o;	wire	[0:0]	IF_valid_i;$/;"	n
IJTC_ACTION	MyDefines.v	/^`define IJTC_ACTION         2:1$/;"	c
IJTC_CHECKPOINT	MyDefines.v	/^`define IJTC_CHECKPOINT `IJTC_CHECKPOINT_LEN-1:0         \/\/ 记录全局分支历史$/;"	c
IJTC_CHECKPOINT_LEN	MyDefines.v	/^`define IJTC_CHECKPOINT_LEN 8                           \/\/ 记录全局分支历史$/;"	c
IJTC_DEST	MyDefines.v	/^`define IJTC_DEST   3$/;"	c
IJTC_DIRECT	MyDefines.v	/^`define IJTC_DIRECT         2'b01$/;"	c
IJTC_NOACTION	MyDefines.v	/^`define IJTC_NOACTION       2'b00$/;"	c
IJTC_REPAIRE	MyDefines.v	/^`define IJTC_REPAIRE        2'b10$/;"	c
IJTC_checkPoint_p_i	Main/IF.v	/^	wire	[31:0]	IJTC_checkPoint_p_o;	wire	[31:0]	IJTC_checkPoint_p_i;$/;"	n
IJTC_checkPoint_p_o	Main/IF.v	/^	wire	[31:0]	IJTC_checkPoint_p_o;	wire	[31:0]	IJTC_checkPoint_p_i;$/;"	n
IJTC_checkPoint_up	Main/IF/BranchSelectCheck.v	/^    wire    [`IJTC_CHECKPOINT]  IJTC_checkPoint_up  [3:0];$/;"	n
IJTC_predDest	Main/IF/BranchSelectCheck.v	/^    wire [`SINGLE_WORD] IJTC_predDest [3:0];$/;"	n
IJTC_predDest_p_i	Main/IF.v	/^	wire	[127:0]	IJTC_predDest_p_o;	wire	[127:0]	IJTC_predDest_p_i;$/;"	n
IJTC_predDest_p_o	Main/IF.v	/^	wire	[127:0]	IJTC_predDest_p_o;	wire	[127:0]	IJTC_predDest_p_i;$/;"	n
IL	MyDefines.v	/^    `define IL  3'd4$/;"	c
IM0	MyDefines.v	/^    `define IM0 8$/;"	c
IM1	MyDefines.v	/^    `define IM1 9$/;"	c
IM2	MyDefines.v	/^    `define IM2 10$/;"	c
IM3	MyDefines.v	/^    `define IM3 11$/;"	c
IM4	MyDefines.v	/^    `define IM4 12$/;"	c
IM5	MyDefines.v	/^    `define IM5 13$/;"	c
IM6	MyDefines.v	/^    `define IM6 14$/;"	c
IM7	MyDefines.v	/^    `define IM7 15$/;"	c
INDEX	MyDefines.v	/^    `define     INDEX           `TLB_WIDTH$/;"	c
INST_DETAIL	MyDefines.v	/^`define INST_DETAIL     5:0$/;"	c
INST_NUM	MyDefines.v	/^`define INST_NUM    `INST_NUM_LEN-1:0$/;"	c
INST_NUM_LEN	MyDefines.v	/^`define INST_NUM_LEN 4$/;"	c
INST_TYPE	MyDefines.v	/^`define INST_TYPE       5:0 $/;"	c
INT	MyDefines.v	/^`define INT     5'h0$/;"	c
IP0	MyDefines.v	/^    `define IP0 8$/;"	c
IP1	MyDefines.v	/^    `define IP1 9$/;"	c
IP2	MyDefines.v	/^    `define IP2 10$/;"	c
IP3	MyDefines.v	/^    `define IP3 11$/;"	c
IP4	MyDefines.v	/^    `define IP4 12$/;"	c
IP5	MyDefines.v	/^    `define IP5 13$/;"	c
IP6	MyDefines.v	/^    `define IP6 14$/;"	c
IP7	MyDefines.v	/^    `define IP7 15\/*}}}*\/$/;"	c
IQ_CAPABILITY	MyDefines.v	/^`define IQ_CAPABILITY   16$/;"	c
IQ_CAP_WIDTH	MyDefines.v	/^`define IQ_CAP_WIDTH    $clog2(`IQ_CAPABILITY)$/;"	c
IQ_ENTRY_LEN	MyDefines.v	/^`define IQ_ENTRY_LEN    156$/;"	c
IQ_ExcCode_p	Main/ID.v	/^    wire [2*`EXCCODE]                  IQ_ExcCode_p             ;$/;"	n
IQ_ExcCode_up	Main/components/ID/Arbitrator.v	/^    wire    [`EXCCODE]                  IQ_ExcCode_up         [1:0];  $/;"	n
IQ_ExcCode_up	Main/components/ID/InstQueue.v	/^    wire    [`EXCCODE]                  IQ_ExcCode_up           [1:0];  $/;"	n
IQ_GAP	MyDefines.v	/^`define IQ_GAP          5'd8$/;"	c
IQ_LENTH	MyDefines.v	/^`define IQ_LENTH        `IQ_ENTRY_LEN-1:0$/;"	c
IQ_NUMBER	MyDefines.v	/^`define IQ_NUMBER       `IQ_CAP_WIDTH-1:0$/;"	c
IQ_NUMBER_BIT	MyDefines.v	/^`define IQ_NUMBER_BIT   4'd$/;"	c
IQ_NUMBER_WID	MyDefines.v	/^`define IQ_NUMBER_WID   3:0$/;"	c
IQ_POINT	MyDefines.v	/^`define IQ_POINT        `IQ_CAP_WIDTH:0$/;"	c
IQ_POINT_BIT	MyDefines.v	/^`define IQ_POINT_BIT   5'd$/;"	c
IQ_POINT_SIGN	MyDefines.v	/^`define IQ_POINT_SIGN   `IQ_CAP_WIDTH$/;"	c
IQ_VALID	MyDefines.v	/^`define IQ_VALID        1:0$/;"	c
IQ_VALID_DUAL	MyDefines.v	/^`define IQ_VALID_DUAL   2'b11$/;"	c
IQ_VALID_NON	MyDefines.v	/^`define IQ_VALID_NON    2'b00$/;"	c
IQ_VALID_SINGLE	MyDefines.v	/^`define IQ_VALID_SINGLE 2'b01$/;"	c
IQ_VAddr_p	Main/ID.v	/^    wire [2*`SINGLE_WORD]              IQ_VAddr_p               ;$/;"	n
IQ_VAddr_up	Main/components/ID/Arbitrator.v	/^    wire    [`SINGLE_WORD]              IQ_VAddr_up           [1:0];  $/;"	n
IQ_VAddr_up	Main/components/ID/InstQueue.v	/^    wire    [`SINGLE_WORD]              IQ_VAddr_up             [1:0];  $/;"	n
IQ_checkPoint_p	Main/ID.v	/^    wire [2*`ALL_CHECKPOINT]           IQ_checkPoint_p          ;$/;"	n
IQ_checkPoint_up	Main/components/ID/Arbitrator.v	/^    wire    [`ALL_CHECKPOINT]           IQ_checkPoint_up      [1:0];  $/;"	n
IQ_checkPoint_up	Main/components/ID/InstQueue.v	/^    wire    [`ALL_CHECKPOINT]           IQ_checkPoint_up        [1:0];  $/;"	n
IQ_empty	Main/ID.v	/^    wire                               IQ_empty                 ;$/;"	n
IQ_full	Main/ID.v	/^    wire                               IQ_full                  ;$/;"	n
IQ_hasException_p	Main/ID.v	/^    wire [1:0]                         IQ_hasException_p        ;$/;"	n
IQ_hasException_up	Main/components/ID/Arbitrator.v	/^    wire    [0:0]                       IQ_hasException_up    [1:0];  $/;"	n
IQ_hasException_up	Main/components/ID/InstQueue.v	/^    wire	[0:0]                       IQ_hasException_up      [1:0];  $/;"	n
IQ_inst_p	Main/ID.v	/^    wire [2*`SINGLE_WORD]              IQ_inst_p                ;$/;"	n
IQ_inst_up	Main/components/ID/Arbitrator.v	/^    wire    [`SINGLE_WORD]              IQ_inst_up            [1:0];  $/;"	n
IQ_inst_up	Main/components/ID/InstQueue.v	/^    wire    [`SINGLE_WORD]              IQ_inst_up              [1:0];  $/;"	n
IQ_isRefill_p	Main/ID.v	/^    wire [1:0]                         IQ_isRefill_p            ;$/;"	n
IQ_isRefill_up	Main/components/ID/Arbitrator.v	/^    wire    [0:0]                       IQ_isRefill_up        [1:0];  $/;"	n
IQ_isRefill_up	Main/components/ID/InstQueue.v	/^    wire    [0:0]                       IQ_isRefill_up          [1:0];$/;"	n
IQ_needRead_up	Main/components/ID/Arbitrator.v	/^    wire    [1:0]           IQ_needRead_up      [1:0];$/;"	n
IQ_number_w	Main/ID.v	/^    wire [$clog2(`IQ_CAPABILITY):0]    IQ_number_w              ;$/;"	n
IQ_predDest_p	Main/ID.v	/^    wire [2*`SINGLE_WORD]              IQ_predDest_p            ;$/;"	n
IQ_predDest_up	Main/components/ID/Arbitrator.v	/^    wire    [`SINGLE_WORD]              IQ_predDest_up        [1:0];  $/;"	n
IQ_predDest_up	Main/components/ID/InstQueue.v	/^    wire    [`SINGLE_WORD]              IQ_predDest_up          [1:0];  $/;"	n
IQ_predTake_p	Main/ID.v	/^    wire [1:0]                         IQ_predTake_p            ;$/;"	n
IQ_predTake_up	Main/components/ID/Arbitrator.v	/^    wire    [0:0]                       IQ_predTake_up        [1:0];  $/;"	n
IQ_predTake_up	Main/components/ID/InstQueue.v	/^    wire    [0:0]                       IQ_predTake_up          [1:0];  $/;"	n
IQ_regReadNum_up	Main/components/ID/Arbitrator.v	/^    wire    [2*`GPR_NUM]    IQ_regReadNum_up    [1:0];$/;"	n
IQ_regWriteNum_up	Main/components/ID/Arbitrator.v	/^    wire    [`GPR_NUM]      IQ_regWriteNum_up   [1:0];$/;"	n
IQ_supplyValid	Main/ID.v	/^    wire [`IQ_VALID]                   IQ_supplyValid           ;$/;"	n
IS	MyDefines.v	/^    `define IS  3'd0$/;"	c
ISSUE_MODE	MyDefines.v	/^`define ISSUE_MODE              1:0$/;"	c
ImmExtender	Main/components/ID/ImmExtender.v	/^module ImmExtender($/;"	m
Index	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]	        Index;$/;"	n
Index_index	Main/PrimaryExceptionProcessor.v	/^    reg     [`INDEX]    Index_index;$/;"	r
Index_p	Main/PrimaryExceptionProcessor.v	/^    reg     Index_p;$/;"	r
IndirectJumpTargetCache	Main/IF/IndirectJumpTargetCache.v	/^module IndirectJumpTargetCache ($/;"	m
InstQueue	Main/components/ID/InstQueue.v	/^module InstQueue ($/;"	m
K0	MyDefines.v	/^    `define K0 2:0$/;"	c
LLbit	Main/PREMEM.v	/^    reg LLbit ;$/;"	r
LOAD_L0_BIT	MyDefines.v	/^`define LOAD_L0_BIT     8$/;"	c
LOAD_L1_BIT	MyDefines.v	/^`define LOAD_L1_BIT     9$/;"	c
LOAD_L2_BIT	MyDefines.v	/^`define LOAD_L2_BIT     10$/;"	c
LOAD_LBU_BIT	MyDefines.v	/^`define LOAD_LBU_BIT    1$/;"	c
LOAD_LB_BIT	MyDefines.v	/^`define LOAD_LB_BIT     0$/;"	c
LOAD_LHU_BIT	MyDefines.v	/^`define LOAD_LHU_BIT    3$/;"	c
LOAD_LH_BIT	MyDefines.v	/^`define LOAD_LH_BIT     2$/;"	c
LOAD_LW_BIT	MyDefines.v	/^`define LOAD_LW_BIT     4$/;"	c
LOAD_MODE	MyDefines.v	/^`define LOAD_MODE       6:0$/;"	c
LOAD_MODE_LB	MyDefines.v	/^`define LOAD_MODE_LB    0$/;"	c
LOAD_MODE_LBU	MyDefines.v	/^`define LOAD_MODE_LBU   1$/;"	c
LOAD_MODE_LH	MyDefines.v	/^`define LOAD_MODE_LH    2$/;"	c
LOAD_MODE_LHU	MyDefines.v	/^`define LOAD_MODE_LHU   3$/;"	c
LOAD_MODE_LW	MyDefines.v	/^`define LOAD_MODE_LW    4$/;"	c
LOAD_MODE_LWL	MyDefines.v	/^`define LOAD_MODE_LWL   5$/;"	c
LOAD_MODE_LWR	MyDefines.v	/^`define LOAD_MODE_LWR   6$/;"	c
LOAD_R1_BIT	MyDefines.v	/^`define LOAD_R1_BIT     5$/;"	c
LOAD_R2_BIT	MyDefines.v	/^`define LOAD_R2_BIT     6$/;"	c
LOAD_R3_BIT	MyDefines.v	/^`define LOAD_R3_BIT     7$/;"	c
LOAD_SEL	MyDefines.v	/^`define LOAD_SEL        10:0$/;"	c
LOAD_SEL_L0	MyDefines.v	/^`define LOAD_SEL_L0     11'b00100000000$/;"	c
LOAD_SEL_L1	MyDefines.v	/^`define LOAD_SEL_L1     11'b01000000000$/;"	c
LOAD_SEL_L2	MyDefines.v	/^`define LOAD_SEL_L2     11'b10000000000$/;"	c
LOAD_SEL_LB	MyDefines.v	/^`define LOAD_SEL_LB     11'b00000000001$/;"	c
LOAD_SEL_LBU	MyDefines.v	/^`define LOAD_SEL_LBU    11'b00000000010$/;"	c
LOAD_SEL_LH	MyDefines.v	/^`define LOAD_SEL_LH     11'b00000000100$/;"	c
LOAD_SEL_LHU	MyDefines.v	/^`define LOAD_SEL_LHU    11'b00000001000$/;"	c
LOAD_SEL_LW	MyDefines.v	/^`define LOAD_SEL_LW     11'b00000010000$/;"	c
LOAD_SEL_R1	MyDefines.v	/^`define LOAD_SEL_R1     11'b00000100000$/;"	c
LOAD_SEL_R2	MyDefines.v	/^`define LOAD_SEL_R2     11'b00001000000$/;"	c
LOAD_SEL_R3	MyDefines.v	/^`define LOAD_SEL_R3     11'b00010000000$/;"	c
LO_C	MyDefines.v	/^    `define     LO_C            5:3$/;"	c
LO_D	MyDefines.v	/^    `define     LO_D            2$/;"	c
LO_FPN	MyDefines.v	/^    `define     LO_FPN          25:6$/;"	c
LO_G	MyDefines.v	/^    `define     LO_G            0$/;"	c
LO_READ	MyDefines.v	/^`define LO_READ     1$/;"	c
LO_V	MyDefines.v	/^    `define     LO_V            1$/;"	c
LO_WRITE	MyDefines.v	/^`define LO_WRITE    1$/;"	c
MASK	MyDefines.v	/^`define MASK 62:51$/;"	c
MATH_ALU	MyDefines.v	/^`define MATH_ALU     3$/;"	c
MATH_CL	MyDefines.v	/^`define MATH_CL      1$/;"	c
MATH_MDU	MyDefines.v	/^`define MATH_MDU     2$/;"	c
MATH_MULR	MyDefines.v	/^`define MATH_MULR    0$/;"	c
MATH_SEL	MyDefines.v	/^`define MATH_SEL    `MATH_SEL_LEN-1:0$/;"	c
MATH_SEL_LEN	MyDefines.v	/^`define MATH_SEL_LEN 4$/;"	c
MDUOP	MyDefines.v	/^`define MDUOP `MDUOP_LEN-1:0 $/;"	c
MDUOP_LEN	MyDefines.v	/^`define MDUOP_LEN 9$/;"	c
MDU_ADD	MyDefines.v	/^`define MDU_ADD         4$/;"	c
MDU_CLO	MyDefines.v	/^`define MDU_CLO         7$/;"	c
MDU_CLZ	MyDefines.v	/^`define MDU_CLZ         8$/;"	c
MDU_DIV	MyDefines.v	/^`define MDU_DIV         2$/;"	c
MDU_DIVU	MyDefines.v	/^`define MDU_DIVU        3$/;"	c
MDU_HiLoData	Main/EXEDOWN.v	/^    wire [2*`SINGLE_WORD]       MDU_HiLoData                    ;\/\/ unresolved$/;"	n
MDU_MULR	MyDefines.v	/^`define MDU_MULR        6 \/\/ 直连乘法$/;"	c
MDU_MULT	MyDefines.v	/^`define MDU_MULT        0   \/\/包括累计和寄存器也需要$/;"	c
MDU_MULU	MyDefines.v	/^`define MDU_MULU        1$/;"	c
MDU_Oprand_ok	Main/EXEDOWN.v	/^    wire                MDU_Oprand_ok;  \/\/操作数ok$/;"	n
MDU_REQ	MyDefines.v	/^`define MDU_REQ `MDU_REQ_LEN-1:0$/;"	c
MDU_REQ_LEN	MyDefines.v	/^`define MDU_REQ_LEN 8$/;"	c
MDU_SUB	MyDefines.v	/^`define MDU_SUB         5$/;"	c
MDU_data_ok	Main/EXEDOWN.v	/^    wire                MDU_data_ok;    \/\/计算结果ok$/;"	n
MDU_operator	Main/EXEDOWN.v	/^    wire [`MDU_REQ]             MDU_operator                    ;\/\/ unresolved$/;"	n
MDU_oprand	Main/EXEDOWN.v	/^    wire [2*`SINGLE_WORD]       MDU_oprand                      ;\/\/ unresolved$/;"	n
MDU_writeData	Main/EXEDOWN.v	/^    wire [`SINGLE_WORD] MDU_writeData   [1:0];$/;"	n
MDU_writeData_p	Main/EXEDOWN.v	/^    wire [2*`SINGLE_WORD]       MDU_writeData_p                 ;$/;"	n
MDU_writeEnable	Main/EXEDOWN.v	/^    wire [1:0] MDU_writeEnable;$/;"	n
MEM	Main/MEM.v	/^module MEM($/;"	m
MEM_ExcCode_w_i	Main.v	/^	wire	[4:0]	MEM_ExcCode_w_o;	wire	[4:0]	MEM_ExcCode_w_i;$/;"	n
MEM_ExcCode_w_o	Main.v	/^	wire	[4:0]	MEM_ExcCode_w_o;	wire	[4:0]	MEM_ExcCode_w_i;$/;"	n
MEM_VAddr_i	Main.v	/^	wire	[31:0]	MEM_VAddr_o;	wire	[31:0]	MEM_VAddr_i;$/;"	n
MEM_VAddr_o	Main.v	/^	wire	[31:0]	MEM_VAddr_o;	wire	[31:0]	MEM_VAddr_i;$/;"	n
MEM_VAddr_r_i	Main/WriteBack.v	/^	reg	[`SINGLE_WORD]			MEM_VAddr_r_i;$/;"	r
MEM_alignCheck_i	Main.v	/^	wire	[1:0]	MEM_alignCheck_o;	wire	[1:0]	MEM_alignCheck_i;$/;"	n
MEM_alignCheck_o	Main.v	/^	wire	[1:0]	MEM_alignCheck_o;	wire	[1:0]	MEM_alignCheck_i;$/;"	n
MEM_alignCheck_r_i	Main/WriteBack.v	/^	reg	[1:0]			MEM_alignCheck_r_i;$/;"	r
MEM_allowin_w_i	Main.v	/^	wire	[0:0]	MEM_allowin_w_o;	wire	[0:0]	MEM_allowin_w_i;$/;"	n
MEM_allowin_w_o	Main.v	/^	wire	[0:0]	MEM_allowin_w_o;	wire	[0:0]	MEM_allowin_w_i;$/;"	n
MEM_eret_w_i	Main.v	/^	wire	[0:0]	MEM_eret_w_o;	wire	[0:0]	MEM_eret_w_i;$/;"	n
MEM_eret_w_o	Main.v	/^	wire	[0:0]	MEM_eret_w_o;	wire	[0:0]	MEM_eret_w_i;$/;"	n
MEM_exceptBadVAddr_w_i	Main.v	/^	wire	[31:0]	MEM_exceptBadVAddr_w_o;	wire	[31:0]	MEM_exceptBadVAddr_w_i;$/;"	n
MEM_exceptBadVAddr_w_o	Main.v	/^	wire	[31:0]	MEM_exceptBadVAddr_w_o;	wire	[31:0]	MEM_exceptBadVAddr_w_i;$/;"	n
MEM_exceptPC_w_i	Main.v	/^	wire	[31:0]	MEM_exceptPC_w_o;	wire	[31:0]	MEM_exceptPC_w_i;$/;"	n
MEM_exceptPC_w_o	Main.v	/^	wire	[31:0]	MEM_exceptPC_w_o;	wire	[31:0]	MEM_exceptPC_w_i;$/;"	n
MEM_exceptionRisk_i	Main.v	/^	wire	[0:0]	MEM_exceptionRisk_o;	wire	[0:0]	MEM_exceptionRisk_i;$/;"	n
MEM_exceptionRisk_o	Main.v	/^	wire	[0:0]	MEM_exceptionRisk_o;	wire	[0:0]	MEM_exceptionRisk_i;$/;"	n
MEM_exceptionRisk_r_i	Main/WriteBack.v	/^	reg	[0:0]			MEM_exceptionRisk_r_i;$/;"	r
MEM_finalRes_i	Main.v	/^	wire	[31:0]	MEM_finalRes_o;	wire	[31:0]	MEM_finalRes_i;$/;"	n
MEM_finalRes_o	Main.v	/^	wire	[31:0]	MEM_finalRes_o;	wire	[31:0]	MEM_finalRes_i;$/;"	n
MEM_finalRes_r_i	Main/EXEDOWN.v	/^	reg	[`SINGLE_WORD]			MEM_finalRes_r_i;$/;"	r
MEM_finalRes_r_i	Main/EXEUP.v	/^	reg	[`SINGLE_WORD]			MEM_finalRes_r_i;$/;"	r
MEM_finalRes_r_i	Main/WriteBack.v	/^	reg	[`SINGLE_WORD]			MEM_finalRes_r_i;$/;"	r
MEM_forwardMode_w_i	Main.v	/^	wire	[0:0]	MEM_forwardMode_w_o;	wire	[0:0]	MEM_forwardMode_w_i;$/;"	n
MEM_forwardMode_w_o	Main.v	/^	wire	[0:0]	MEM_forwardMode_w_o;	wire	[0:0]	MEM_forwardMode_w_i;$/;"	n
MEM_hasDangerous_w_i	Main.v	/^	wire	[0:0]	MEM_hasDangerous_w_o;	wire	[0:0]	MEM_hasDangerous_w_i;$/;"	n
MEM_hasDangerous_w_o	Main.v	/^	wire	[0:0]	MEM_hasDangerous_w_o;	wire	[0:0]	MEM_hasDangerous_w_i;$/;"	n
MEM_hasException_w_i	Main.v	/^	wire	[0:0]	MEM_hasException_w_o;	wire	[0:0]	MEM_hasException_w_i;$/;"	n
MEM_hasException_w_o	Main.v	/^	wire	[0:0]	MEM_hasException_w_o;	wire	[0:0]	MEM_hasException_w_i;$/;"	n
MEM_hasRisk_w_i	Main.v	/^	wire	[0:0]	MEM_hasRisk_w_o;	wire	[0:0]	MEM_hasRisk_w_i;$/;"	n
MEM_hasRisk_w_o	Main.v	/^	wire	[0:0]	MEM_hasRisk_w_o;	wire	[0:0]	MEM_hasRisk_w_i;$/;"	n
MEM_isDangerous_i	Main.v	/^	wire	[0:0]	MEM_isDangerous_o;	wire	[0:0]	MEM_isDangerous_i;$/;"	n
MEM_isDangerous_o	Main.v	/^	wire	[0:0]	MEM_isDangerous_o;	wire	[0:0]	MEM_isDangerous_i;$/;"	n
MEM_isDangerous_r_i	Main/WriteBack.v	/^	reg	[0:0]			MEM_isDangerous_r_i;$/;"	r
MEM_isDelaySlot_w_i	Main.v	/^	wire	[0:0]	MEM_isDelaySlot_w_o;	wire	[0:0]	MEM_isDelaySlot_w_i;$/;"	n
MEM_isDelaySlot_w_o	Main.v	/^	wire	[0:0]	MEM_isDelaySlot_w_o;	wire	[0:0]	MEM_isDelaySlot_w_i;$/;"	n
MEM_isInterrupt_w_i	Main.v	/^	wire	[0:0]	MEM_isInterrupt_w_o;	wire	[0:0]	MEM_isInterrupt_w_i;$/;"	n
MEM_isInterrupt_w_o	Main.v	/^	wire	[0:0]	MEM_isInterrupt_w_o;	wire	[0:0]	MEM_isInterrupt_w_i;$/;"	n
MEM_isRefill_w_i	Main.v	/^	wire	[0:0]	MEM_isRefill_w_o;	wire	[0:0]	MEM_isRefill_w_i;$/;"	n
MEM_isRefill_w_o	Main.v	/^	wire	[0:0]	MEM_isRefill_w_o;	wire	[0:0]	MEM_isRefill_w_i;$/;"	n
MEM_loadSel_i	Main.v	/^	wire	[10:0]	MEM_loadSel_o;	wire	[10:0]	MEM_loadSel_i;$/;"	n
MEM_loadSel_o	Main.v	/^	wire	[10:0]	MEM_loadSel_o;	wire	[10:0]	MEM_loadSel_i;$/;"	n
MEM_loadSel_r_i	Main/WriteBack.v	/^	reg	[`LOAD_SEL]			MEM_loadSel_r_i;$/;"	r
MEM_memReq_i	Main.v	/^	wire	[0:0]	MEM_memReq_o;	wire	[0:0]	MEM_memReq_i;$/;"	n
MEM_memReq_o	Main.v	/^	wire	[0:0]	MEM_memReq_o;	wire	[0:0]	MEM_memReq_i;$/;"	n
MEM_memReq_r_i	Main/WriteBack.v	/^	reg	[0:0]			MEM_memReq_r_i;$/;"	r
MEM_nonBlockMark_w_i	Main.v	/^	wire	[0:0]	MEM_nonBlockMark_w_o;	wire	[0:0]	MEM_nonBlockMark_w_i;$/;"	n
MEM_nonBlockMark_w_o	Main.v	/^	wire	[0:0]	MEM_nonBlockMark_w_o;	wire	[0:0]	MEM_nonBlockMark_w_i;$/;"	n
MEM_packedInfo	Main/PrimaryExceptionProcessor.v	/^    wire [`ALL_INFO] MEM_packedInfo = {$/;"	n
MEM_positionCp0_w_i	Main.v	/^	wire	[7:0]	MEM_positionCp0_w_o;	wire	[7:0]	MEM_positionCp0_w_i;$/;"	n
MEM_positionCp0_w_o	Main.v	/^	wire	[7:0]	MEM_positionCp0_w_o;	wire	[7:0]	MEM_positionCp0_w_i;$/;"	n
MEM_rtData_i	Main.v	/^	wire	[31:0]	MEM_rtData_o;	wire	[31:0]	MEM_rtData_i;$/;"	n
MEM_rtData_o	Main.v	/^	wire	[31:0]	MEM_rtData_o;	wire	[31:0]	MEM_rtData_i;$/;"	n
MEM_rtData_r_i	Main/WriteBack.v	/^	reg	[`SINGLE_WORD]			MEM_rtData_r_i;$/;"	r
MEM_rtData_r_i	Main/WriteBack.v	/^    wire    [`SINGLE_WORD]  lwl_data =  MEM_loadSel_r_i[`LOAD_L0_BIT] ? {data_rdata  [ 7: 0],MEM_rtData_r_i[23:0 ]} :$/;"	n
MEM_valid_w_i	Main.v	/^	wire	[0:0]	MEM_valid_w_o;	wire	[0:0]	MEM_valid_w_i;$/;"	n
MEM_valid_w_o	Main.v	/^	wire	[0:0]	MEM_valid_w_o;	wire	[0:0]	MEM_valid_w_i;$/;"	n
MEM_writeCp0_w_i	Main.v	/^	wire	[0:0]	MEM_writeCp0_w_o;	wire	[0:0]	MEM_writeCp0_w_i;$/;"	n
MEM_writeCp0_w_o	Main.v	/^	wire	[0:0]	MEM_writeCp0_w_o;	wire	[0:0]	MEM_writeCp0_w_i;$/;"	n
MEM_writeData_w_i	Main.v	/^	wire	[31:0]	MEM_writeData_w_o;	wire	[31:0]	MEM_writeData_w_i;$/;"	n
MEM_writeData_w_o	Main.v	/^	wire	[31:0]	MEM_writeData_w_o;	wire	[31:0]	MEM_writeData_w_i;$/;"	n
MEM_writeNum_i	Main.v	/^	wire	[4:0]	MEM_writeNum_o;	wire	[4:0]	MEM_writeNum_i;$/;"	n
MEM_writeNum_o	Main.v	/^	wire	[4:0]	MEM_writeNum_o;	wire	[4:0]	MEM_writeNum_i;$/;"	n
MEM_writeNum_r_i	Main/WriteBack.v	/^	reg	[`GPR_NUM]			MEM_writeNum_r_i;$/;"	r
MEM_writeNum_w_i	Main.v	/^	wire	[4:0]	MEM_writeNum_w_o;	wire	[4:0]	MEM_writeNum_w_i;$/;"	n
MEM_writeNum_w_o	Main.v	/^	wire	[4:0]	MEM_writeNum_w_o;	wire	[4:0]	MEM_writeNum_w_i;$/;"	n
MMU_ExcCode_i	Main/IF.v	/^	wire	[4:0]	MMU_ExcCode_o;	wire	[4:0]	MMU_ExcCode_i;$/;"	n
MMU_ExcCode_o	Main/IF.v	/^	wire	[4:0]	MMU_ExcCode_o;	wire	[4:0]	MMU_ExcCode_i;$/;"	n
MMU_SIZE	MyDefines.v	/^    `define MMU_SIZE 6'd32$/;"	c
MMU_hasException_i	Main/IF.v	/^	wire	[0:0]	MMU_hasException_o;	wire	[0:0]	MMU_hasException_i;$/;"	n
MMU_hasException_o	Main/IF.v	/^	wire	[0:0]	MMU_hasException_o;	wire	[0:0]	MMU_hasException_i;$/;"	n
MMU_isRefill_i	Main/IF.v	/^	wire	[0:0]	MMU_isRefill_o;	wire	[0:0]	MMU_isRefill_i;$/;"	n
MMU_isRefill_o	Main/IF.v	/^	wire	[0:0]	MMU_isRefill_o;	wire	[0:0]	MMU_isRefill_i;$/;"	n
MOD	MyDefines.v	/^`define MOD     5'h1$/;"	c
MT_DEST	MyDefines.v	/^`define MT_DEST     5   \/\/ 1'b1 表示高位hi,否则为lo$/;"	c
MT_REQ	MyDefines.v	/^`define MT_REQ      4   \/\/ 是否是数据移动模式$/;"	c
MUL_REQ	MyDefines.v	/^`define MUL_REQ     0   \/\/ mult,multu和累计指令都会有$/;"	c
MUL_SIGN	MyDefines.v	/^`define MUL_SIGN    1$/;"	c
MUST_TAKE	MyDefines.v	/^`define MUST_TAKE   1$/;"	c
MY_NUMBER	Main/components/MyRAM.v	/^    parameter MY_NUMBER     = 512,$/;"	c
Main	Main.v	/^module Main($/;"	m
MduReq	Main/EXEDOWN.v	/^    wire                        MduReq                          ; \/\/ WIRE_NEW\/\/ unresolved$/;"	n
MemoryManagementUnit	Main/IF/MemoryManagementUnit.v	/^module MemoryManagementUnit ($/;"	m
MultiDivideUnit	Main/components/EXE/MultiDivideUnit.v	/^module MultiDivideUnit($/;"	m
MyMultiplier	Main/components/EXE/MyMultiplier.v	/^module MyMultiplier($/;"	m
MyRAM	Main/components/MyRAM.v	/^module MyRAM #($/;"	m
NEED_REPAIR	MyDefines.v	/^`define NEED_REPAIR         7$/;"	c
NOEXCCODE	MyDefines.v	/^`define NOEXCCODE 5'h0$/;"	c
NO_CHECKPOINT	MyDefines.v	/^`define NO_CHECKPOINT   `ALL_CHECKPOINT_LEN'b0$/;"	c
NO_DEMAND	MyDefines.v	/^`define NO_DEMAND       2'b00$/;"	c
NO_ISSUE	MyDefines.v	/^`define NO_ISSUE                2'b00$/;"	c
NO_REPAIRE_ACTION	MyDefines.v	/^`define NO_REPAIRE_ACTION   `REPAIR_ACTION_LEN'b0$/;"	c
NoBranch	Main/IF/components/BranchFourToOne.v	/^    wire NoBranch = !(|isFirstBranch);$/;"	n
ONE_DEMAND	MyDefines.v	/^`define ONE_DEMAND      2'b01$/;"	c
OPEN_CACHE	MyDefines.v	/^`define OPEN_CACHE$/;"	c
OPRAND_SEL	MyDefines.v	/^`define OPRAND_SEL `OPRAND_SEL_LEN-1:0$/;"	c
OPRAND_SEL_LEN	MyDefines.v	/^`define OPRAND_SEL_LEN  3$/;"	c
OV	MyDefines.v	/^`define OV      5'hc $/;"	c
P	MyDefines.v	/^    `define     P               31$/;"	c
PACK_ARRAY	MyDefines.v	/^`define PACK_ARRAY(PK_WIDTH,PK_LEN,PK_SRC,PK_DEST) \\$/;"	c
PBA_forwardData_w_i	Main.v	/^	wire	[31:0]	PBA_forwardData_w_o;	wire	[31:0]	PBA_forwardData_w_i;$/;"	n
PBA_forwardData_w_o	Main.v	/^	wire	[31:0]	PBA_forwardData_w_o;	wire	[31:0]	PBA_forwardData_w_i;$/;"	n
PBA_okToChange_w_i	Main.v	/^	wire	[0:0]	PBA_okToChange_w_o;	wire	[0:0]	PBA_okToChange_w_i;$/;"	n
PBA_okToChange_w_o	Main.v	/^	wire	[0:0]	PBA_okToChange_w_o;	wire	[0:0]	PBA_okToChange_w_i;$/;"	n
PBA_valid_w_o	Main/PrimaryBranchAmend.v	/^    wire PBA_valid_w_o = hasData && ready;$/;"	n
PBA_writeEnable_w_i	Main.v	/^	wire	[0:0]	PBA_writeEnable_w_o;	wire	[0:0]	PBA_writeEnable_w_i;$/;"	n
PBA_writeEnable_w_o	Main.v	/^	wire	[0:0]	PBA_writeEnable_w_o;	wire	[0:0]	PBA_writeEnable_w_i;$/;"	n
PBA_writeNum_w_i	Main.v	/^	wire	[4:0]	PBA_writeNum_w_o;	wire	[4:0]	PBA_writeNum_w_i;$/;"	n
PBA_writeNum_w_o	Main.v	/^	wire	[4:0]	PBA_writeNum_w_o;	wire	[4:0]	PBA_writeNum_w_i;$/;"	n
PCG_VAddr_p_i	Main/IF.v	/^	wire	[127:0]	PCG_VAddr_p_o;	wire	[127:0]	PCG_VAddr_p_i;$/;"	n
PCG_VAddr_p_o	Main/IF.v	/^	wire	[127:0]	PCG_VAddr_p_o;	wire	[127:0]	PCG_VAddr_p_i;$/;"	n
PCG_VAddr_up	Main/IF/BranchTargetBuffer.v	/^    wire    [`SINGLE_WORD]  PCG_VAddr_up    [3:0];$/;"	n
PCG_needDelaySlot_i	Main/IF.v	/^	wire	[0:0]	PCG_needDelaySlot_o;	wire	[0:0]	PCG_needDelaySlot_i;$/;"	n
PCG_needDelaySlot_o	Main/IF.v	/^	wire	[0:0]	PCG_needDelaySlot_o;	wire	[0:0]	PCG_needDelaySlot_i;$/;"	n
PCGenerator	Main/IF/PCGenerator.v	/^module PCGenerator($/;"	m
PCR_ExcCode_i	Main/IF.v	/^	wire	[4:0]	PCR_ExcCode_o;	wire	[4:0]	PCR_ExcCode_i;$/;"	n
PCR_ExcCode_o	Main/IF.v	/^	wire	[4:0]	PCR_ExcCode_o;	wire	[4:0]	PCR_ExcCode_i;$/;"	n
PCR_VAddr_i	Main/IF.v	/^	wire	[31:0]	PCR_VAddr_o;	wire	[31:0]	PCR_VAddr_i;$/;"	n
PCR_VAddr_o	Main/IF.v	/^	wire	[31:0]	PCR_VAddr_o;	wire	[31:0]	PCR_VAddr_i;$/;"	n
PCR_hasException_i	Main/IF.v	/^	wire	[0:0]	PCR_hasException_o;	wire	[0:0]	PCR_hasException_i;$/;"	n
PCR_hasException_o	Main/IF.v	/^	wire	[0:0]	PCR_hasException_o;	wire	[0:0]	PCR_hasException_i;$/;"	n
PCR_instEnable_i	Main/IF.v	/^	wire	[3:0]	PCR_instEnable_o;	wire	[3:0]	PCR_instEnable_i;$/;"	n
PCR_instEnable_o	Main/IF.v	/^	wire	[3:0]	PCR_instEnable_o;	wire	[3:0]	PCR_instEnable_i;$/;"	n
PCR_lastVAddr_i	Main/IF.v	/^	wire	[31:0]	PCR_lastVAddr_o;	wire	[31:0]	PCR_lastVAddr_i;$/;"	n
PCR_lastVAddr_o	Main/IF.v	/^	wire	[31:0]	PCR_lastVAddr_o;	wire	[31:0]	PCR_lastVAddr_i;$/;"	n
PCR_needDelaySlot_i	Main/IF.v	/^	wire	[0:0]	PCR_needDelaySlot_o;	wire	[0:0]	PCR_needDelaySlot_i;$/;"	n
PCR_needDelaySlot_o	Main/IF.v	/^	wire	[0:0]	PCR_needDelaySlot_o;	wire	[0:0]	PCR_needDelaySlot_i;$/;"	n
PCRegister	Main/IF/PCRegister.v	/^module PCRegister ($/;"	m
PC_INDEX	Main/IF/BranchTargetBuffer.v	/^    `define PC_INDEX        $clog2(`BTB_ENRTY_NUM)-2+4:4$/;"	c
PCinput	Main/DataMemoryManagementUnit.v	/^    wire    [`CACHE_TAG]        PCinput                         ;$/;"	n
PCinput	Main/IF/MemoryManagementUnit.v	/^    wire    [`CACHE_TAG]        PCinput                         ;$/;"	n
PFN0	MyDefines.v	/^`define PFN0 49:30$/;"	c
PFN1	MyDefines.v	/^`define PFN1 24:5$/;"	c
PHT_ACTION	MyDefines.v	/^`define PHT_ACTION          6:5$/;"	c
PHT_CHECKPOINT	MyDefines.v	/^`define PHT_CHECKPOINT  `PHT_CHECKPOINT_LEN-1:0         \/\/ 记录局部分支历史,两位饱和计数器$/;"	c
PHT_CHECKPOINT_LEN	MyDefines.v	/^`define PHT_CHECKPOINT_LEN 10$/;"	c
PHT_DIRECT	MyDefines.v	/^`define PHT_DIRECT          2'b01$/;"	c
PHT_NOACTION	MyDefines.v	/^`define PHT_NOACTION        2'b00$/;"	c
PHT_REPAIRE	MyDefines.v	/^`define PHT_REPAIRE         2'b10$/;"	c
PHT_TAKE	MyDefines.v	/^`define PHT_TAKE    0$/;"	c
PHT_checkPoint_p_i	Main/IF.v	/^	wire	[39:0]	PHT_checkPoint_p_o;	wire	[39:0]	PHT_checkPoint_p_i;$/;"	n
PHT_checkPoint_p_o	Main/IF.v	/^	wire	[39:0]	PHT_checkPoint_p_o;	wire	[39:0]	PHT_checkPoint_p_i;$/;"	n
PHT_checkPoint_up	Main/IF/BranchSelectCheck.v	/^    wire    [`PHT_CHECKPOINT]   PHT_checkPoint_up   [3:0];$/;"	n
PHT_predTake	Main/IF/BranchSelectCheck.v	/^    wire [0:0] PHT_predTake [3:0];$/;"	n
PHT_predTake_p_i	Main/IF.v	/^	wire	[3:0]	PHT_predTake_p_o;	wire	[3:0]	PHT_predTake_p_i;$/;"	n
PHT_predTake_p_o	Main/IF.v	/^	wire	[3:0]	PHT_predTake_p_o;	wire	[3:0]	PHT_predTake_p_i;$/;"	n
PREMEM	Main/PREMEM.v	/^module PREMEM ($/;"	m
PREMEM_CacheAddress_i	Main.v	/^	wire	[31:0]	PREMEM_CacheAddress_o;	wire	[31:0]	PREMEM_CacheAddress_i;$/;"	n
PREMEM_CacheAddress_o	Main.v	/^	wire	[31:0]	PREMEM_CacheAddress_o;	wire	[31:0]	PREMEM_CacheAddress_i;$/;"	n
PREMEM_CacheAddress_r_i	Main/MEM.v	/^	reg	[`SINGLE_WORD]			PREMEM_CacheAddress_r_i;$/;"	r
PREMEM_CacheOperator_i	Main.v	/^	wire	[4:0]	PREMEM_CacheOperator_o;	wire	[4:0]	PREMEM_CacheOperator_i;$/;"	n
PREMEM_CacheOperator_o	Main.v	/^	wire	[4:0]	PREMEM_CacheOperator_o;	wire	[4:0]	PREMEM_CacheOperator_i;$/;"	n
PREMEM_CacheOperator_r_i	Main/MEM.v	/^	reg	[`CACHE_OP]			PREMEM_CacheOperator_r_i;$/;"	r
PREMEM_ExcCode_i	Main.v	/^	wire	[4:0]	PREMEM_ExcCode_o;	wire	[4:0]	PREMEM_ExcCode_i;$/;"	n
PREMEM_ExcCode_o	Main.v	/^	wire	[4:0]	PREMEM_ExcCode_o;	wire	[4:0]	PREMEM_ExcCode_i;$/;"	n
PREMEM_ExcCode_r_i	Main/MEM.v	/^	reg	[`EXCCODE]			PREMEM_ExcCode_r_i;$/;"	r
PREMEM_ExcCode_w_i	Main.v	/^	wire	[4:0]	PREMEM_ExcCode_w_o;	wire	[4:0]	PREMEM_ExcCode_w_i;$/;"	n
PREMEM_ExcCode_w_o	Main.v	/^	wire	[4:0]	PREMEM_ExcCode_w_o;	wire	[4:0]	PREMEM_ExcCode_w_i;$/;"	n
PREMEM_VAddr_i	Main.v	/^	wire	[31:0]	PREMEM_VAddr_o;	wire	[31:0]	PREMEM_VAddr_i;$/;"	n
PREMEM_VAddr_o	Main.v	/^	wire	[31:0]	PREMEM_VAddr_o;	wire	[31:0]	PREMEM_VAddr_i;$/;"	n
PREMEM_VAddr_r_i	Main/MEM.v	/^	reg	[`SINGLE_WORD]			PREMEM_VAddr_r_i;$/;"	r
PREMEM_VAddr_w_i	Main.v	/^	wire	[31:0]	PREMEM_VAddr_w_o;	wire	[31:0]	PREMEM_VAddr_w_i;$/;"	n
PREMEM_VAddr_w_o	Main.v	/^	wire	[31:0]	PREMEM_VAddr_w_o;	wire	[31:0]	PREMEM_VAddr_w_i;$/;"	n
PREMEM_alignCheck_i	Main.v	/^	wire	[1:0]	PREMEM_alignCheck_o;	wire	[1:0]	PREMEM_alignCheck_i;$/;"	n
PREMEM_alignCheck_o	Main.v	/^	wire	[1:0]	PREMEM_alignCheck_o;	wire	[1:0]	PREMEM_alignCheck_i;$/;"	n
PREMEM_alignCheck_r_i	Main/MEM.v	/^	reg	[1:0]			PREMEM_alignCheck_r_i;$/;"	r
PREMEM_allowin_w_i	Main.v	/^	wire	[0:0]	PREMEM_allowin_w_o;	wire	[0:0]	PREMEM_allowin_w_i;$/;"	n
PREMEM_allowin_w_o	Main.v	/^	wire	[0:0]	PREMEM_allowin_w_o;	wire	[0:0]	PREMEM_allowin_w_i;$/;"	n
PREMEM_eret_i	Main.v	/^	wire	[0:0]	PREMEM_eret_o;	wire	[0:0]	PREMEM_eret_i;$/;"	n
PREMEM_eret_o	Main.v	/^	wire	[0:0]	PREMEM_eret_o;	wire	[0:0]	PREMEM_eret_i;$/;"	n
PREMEM_eret_r_i	Main/MEM.v	/^	reg	[0:0]			PREMEM_eret_r_i;$/;"	r
PREMEM_eret_w_i	Main.v	/^	wire	[0:0]	PREMEM_eret_w_o;	wire	[0:0]	PREMEM_eret_w_i;$/;"	n
PREMEM_eret_w_o	Main.v	/^	wire	[0:0]	PREMEM_eret_w_o;	wire	[0:0]	PREMEM_eret_w_i;$/;"	n
PREMEM_exceptBadVAddr_i	Main.v	/^	wire	[31:0]	PREMEM_exceptBadVAddr_o;	wire	[31:0]	PREMEM_exceptBadVAddr_i;$/;"	n
PREMEM_exceptBadVAddr_o	Main.v	/^	wire	[31:0]	PREMEM_exceptBadVAddr_o;	wire	[31:0]	PREMEM_exceptBadVAddr_i;$/;"	n
PREMEM_exceptBadVAddr_r_i	Main/MEM.v	/^	reg	[`SINGLE_WORD]			PREMEM_exceptBadVAddr_r_i;$/;"	r
PREMEM_exceptBadVAddr_w_i	Main.v	/^	wire	[31:0]	PREMEM_exceptBadVAddr_w_o;	wire	[31:0]	PREMEM_exceptBadVAddr_w_i;$/;"	n
PREMEM_exceptBadVAddr_w_o	Main.v	/^	wire	[31:0]	PREMEM_exceptBadVAddr_w_o;	wire	[31:0]	PREMEM_exceptBadVAddr_w_i;$/;"	n
PREMEM_exceptPC_w_i	Main.v	/^	wire	[31:0]	PREMEM_exceptPC_w_o;	wire	[31:0]	PREMEM_exceptPC_w_i;$/;"	n
PREMEM_exceptPC_w_o	Main.v	/^	wire	[31:0]	PREMEM_exceptPC_w_o;	wire	[31:0]	PREMEM_exceptPC_w_i;$/;"	n
PREMEM_exceptionRisk_i	Main.v	/^	wire	[0:0]	PREMEM_exceptionRisk_o;	wire	[0:0]	PREMEM_exceptionRisk_i;$/;"	n
PREMEM_exceptionRisk_o	Main.v	/^	wire	[0:0]	PREMEM_exceptionRisk_o;	wire	[0:0]	PREMEM_exceptionRisk_i;$/;"	n
PREMEM_exceptionRisk_r_i	Main/MEM.v	/^	reg	[0:0]			PREMEM_exceptionRisk_r_i;$/;"	r
PREMEM_forwardMode_w_i	Main.v	/^	wire	[0:0]	PREMEM_forwardMode_w_o;	wire	[0:0]	PREMEM_forwardMode_w_i;$/;"	n
PREMEM_forwardMode_w_o	Main.v	/^	wire	[0:0]	PREMEM_forwardMode_w_o;	wire	[0:0]	PREMEM_forwardMode_w_i;$/;"	n
PREMEM_hasDangerous_w_i	Main.v	/^	wire	[0:0]	PREMEM_hasDangerous_w_o;	wire	[0:0]	PREMEM_hasDangerous_w_i;$/;"	n
PREMEM_hasDangerous_w_o	Main.v	/^	wire	[0:0]	PREMEM_hasDangerous_w_o;	wire	[0:0]	PREMEM_hasDangerous_w_i;$/;"	n
PREMEM_hasException_i	Main.v	/^	wire	[0:0]	PREMEM_hasException_o;	wire	[0:0]	PREMEM_hasException_i;$/;"	n
PREMEM_hasException_o	Main.v	/^	wire	[0:0]	PREMEM_hasException_o;	wire	[0:0]	PREMEM_hasException_i;$/;"	n
PREMEM_hasException_r_i	Main/MEM.v	/^	reg	[0:0]			PREMEM_hasException_r_i;$/;"	r
PREMEM_hasException_w_i	Main.v	/^	wire	[0:0]	PREMEM_hasException_w_o;	wire	[0:0]	PREMEM_hasException_w_i;$/;"	n
PREMEM_hasException_w_o	Main.v	/^	wire	[0:0]	PREMEM_hasException_w_o;	wire	[0:0]	PREMEM_hasException_w_i;$/;"	n
PREMEM_hasRisk_w_i	Main.v	/^	wire	[0:0]	PREMEM_hasRisk_w_o;	wire	[0:0]	PREMEM_hasRisk_w_i;$/;"	n
PREMEM_hasRisk_w_o	Main.v	/^	wire	[0:0]	PREMEM_hasRisk_w_o;	wire	[0:0]	PREMEM_hasRisk_w_i;$/;"	n
PREMEM_isCacheInst_i	Main.v	/^	wire	[0:0]	PREMEM_isCacheInst_o;	wire	[0:0]	PREMEM_isCacheInst_i;$/;"	n
PREMEM_isCacheInst_o	Main.v	/^	wire	[0:0]	PREMEM_isCacheInst_o;	wire	[0:0]	PREMEM_isCacheInst_i;$/;"	n
PREMEM_isCacheInst_r_i	Main/MEM.v	/^	reg	[0:0]			PREMEM_isCacheInst_r_i;$/;"	r
PREMEM_isDangerous_i	Main.v	/^	wire	[0:0]	PREMEM_isDangerous_o;	wire	[0:0]	PREMEM_isDangerous_i;$/;"	n
PREMEM_isDangerous_o	Main.v	/^	wire	[0:0]	PREMEM_isDangerous_o;	wire	[0:0]	PREMEM_isDangerous_i;$/;"	n
PREMEM_isDangerous_r_i	Main/MEM.v	/^	reg	[0:0]			PREMEM_isDangerous_r_i;$/;"	r
PREMEM_isDelaySlot_i	Main.v	/^	wire	[0:0]	PREMEM_isDelaySlot_o;	wire	[0:0]	PREMEM_isDelaySlot_i;$/;"	n
PREMEM_isDelaySlot_o	Main.v	/^	wire	[0:0]	PREMEM_isDelaySlot_o;	wire	[0:0]	PREMEM_isDelaySlot_i;$/;"	n
PREMEM_isDelaySlot_r_i	Main/MEM.v	/^	reg	[0:0]			PREMEM_isDelaySlot_r_i;$/;"	r
PREMEM_isDelaySlot_w_i	Main.v	/^	wire	[0:0]	PREMEM_isDelaySlot_w_o;	wire	[0:0]	PREMEM_isDelaySlot_w_i;$/;"	n
PREMEM_isDelaySlot_w_o	Main.v	/^	wire	[0:0]	PREMEM_isDelaySlot_w_o;	wire	[0:0]	PREMEM_isDelaySlot_w_i;$/;"	n
PREMEM_isInterrupt_w_i	Main.v	/^	wire	[0:0]	PREMEM_isInterrupt_w_o;	wire	[0:0]	PREMEM_isInterrupt_w_i;$/;"	n
PREMEM_isInterrupt_w_o	Main.v	/^	wire	[0:0]	PREMEM_isInterrupt_w_o;	wire	[0:0]	PREMEM_isInterrupt_w_i;$/;"	n
PREMEM_isRefill_i	Main.v	/^	wire	[0:0]	PREMEM_isRefill_o;	wire	[0:0]	PREMEM_isRefill_i;$/;"	n
PREMEM_isRefill_o	Main.v	/^	wire	[0:0]	PREMEM_isRefill_o;	wire	[0:0]	PREMEM_isRefill_i;$/;"	n
PREMEM_isRefill_r_i	Main/MEM.v	/^	reg	[0:0]			PREMEM_isRefill_r_i;$/;"	r
PREMEM_isRefill_w_i	Main.v	/^	wire	[0:0]	PREMEM_isRefill_w_o;	wire	[0:0]	PREMEM_isRefill_w_i;$/;"	n
PREMEM_isRefill_w_o	Main.v	/^	wire	[0:0]	PREMEM_isRefill_w_o;	wire	[0:0]	PREMEM_isRefill_w_i;$/;"	n
PREMEM_loadSel_i	Main.v	/^	wire	[10:0]	PREMEM_loadSel_o;	wire	[10:0]	PREMEM_loadSel_i;$/;"	n
PREMEM_loadSel_o	Main.v	/^	wire	[10:0]	PREMEM_loadSel_o;	wire	[10:0]	PREMEM_loadSel_i;$/;"	n
PREMEM_loadSel_r_i	Main/MEM.v	/^	reg	[`LOAD_SEL]			PREMEM_loadSel_r_i;$/;"	r
PREMEM_map_w_i	Main.v	/^	wire	[0:0]	PREMEM_map_w_o;	wire	[0:0]	PREMEM_map_w_i;$/;"	n
PREMEM_map_w_o	Main.v	/^	wire	[0:0]	PREMEM_map_w_o;	wire	[0:0]	PREMEM_map_w_i;$/;"	n
PREMEM_memReq_i	Main.v	/^	wire	[0:0]	PREMEM_memReq_o;	wire	[0:0]	PREMEM_memReq_i;$/;"	n
PREMEM_memReq_o	Main.v	/^	wire	[0:0]	PREMEM_memReq_o;	wire	[0:0]	PREMEM_memReq_i;$/;"	n
PREMEM_memReq_r_i	Main/MEM.v	/^	reg	[0:0]			PREMEM_memReq_r_i;$/;"	r
PREMEM_nonBlockMark_i	Main.v	/^	wire	[0:0]	PREMEM_nonBlockMark_o;	wire	[0:0]	PREMEM_nonBlockMark_i;$/;"	n
PREMEM_nonBlockMark_o	Main.v	/^	wire	[0:0]	PREMEM_nonBlockMark_o;	wire	[0:0]	PREMEM_nonBlockMark_i;$/;"	n
PREMEM_nonBlockMark_r_i	Main/MEM.v	/^	reg	[0:0]			PREMEM_nonBlockMark_r_i;$/;"	r
PREMEM_nonBlockMark_w_i	Main.v	/^	wire	[0:0]	PREMEM_nonBlockMark_w_o;	wire	[0:0]	PREMEM_nonBlockMark_w_i;$/;"	n
PREMEM_nonBlockMark_w_o	Main.v	/^	wire	[0:0]	PREMEM_nonBlockMark_w_o;	wire	[0:0]	PREMEM_nonBlockMark_w_i;$/;"	n
PREMEM_packedInfo	Main/PrimaryExceptionProcessor.v	/^    wire [`ALL_INFO] PREMEM_packedInfo = {$/;"	n
PREMEM_positionCp0_i	Main.v	/^	wire	[7:0]	PREMEM_positionCp0_o;	wire	[7:0]	PREMEM_positionCp0_i;$/;"	n
PREMEM_positionCp0_o	Main.v	/^	wire	[7:0]	PREMEM_positionCp0_o;	wire	[7:0]	PREMEM_positionCp0_i;$/;"	n
PREMEM_positionCp0_r_i	Main/MEM.v	/^	reg	[`CP0_POSITION]			PREMEM_positionCp0_r_i;$/;"	r
PREMEM_preliminaryRes_i	Main.v	/^	wire	[31:0]	PREMEM_preliminaryRes_o;	wire	[31:0]	PREMEM_preliminaryRes_i;$/;"	n
PREMEM_preliminaryRes_o	Main.v	/^	wire	[31:0]	PREMEM_preliminaryRes_o;	wire	[31:0]	PREMEM_preliminaryRes_i;$/;"	n
PREMEM_preliminaryRes_r_i	Main/EXEDOWN.v	/^	reg	[`SINGLE_WORD]			PREMEM_preliminaryRes_r_i;$/;"	r
PREMEM_preliminaryRes_r_i	Main/EXEUP.v	/^	reg	[`SINGLE_WORD]			PREMEM_preliminaryRes_r_i;$/;"	r
PREMEM_preliminaryRes_r_i	Main/MEM.v	/^	reg	[`SINGLE_WORD]			PREMEM_preliminaryRes_r_i;$/;"	r
PREMEM_readCp0_i	Main.v	/^	wire	[0:0]	PREMEM_readCp0_o;	wire	[0:0]	PREMEM_readCp0_i;$/;"	n
PREMEM_readCp0_o	Main.v	/^	wire	[0:0]	PREMEM_readCp0_o;	wire	[0:0]	PREMEM_readCp0_i;$/;"	n
PREMEM_readCp0_r_i	Main/MEM.v	/^	reg	[0:0]			PREMEM_readCp0_r_i;$/;"	r
PREMEM_read_w_i	Main.v	/^	wire	[0:0]	PREMEM_read_w_o;	wire	[0:0]	PREMEM_read_w_i;$/;"	n
PREMEM_read_w_o	Main.v	/^	wire	[0:0]	PREMEM_read_w_o;	wire	[0:0]	PREMEM_read_w_i;$/;"	n
PREMEM_rtData_i	Main.v	/^	wire	[31:0]	PREMEM_rtData_o;	wire	[31:0]	PREMEM_rtData_i;$/;"	n
PREMEM_rtData_o	Main.v	/^	wire	[31:0]	PREMEM_rtData_o;	wire	[31:0]	PREMEM_rtData_i;$/;"	n
PREMEM_rtData_r_i	Main/MEM.v	/^	reg	[`SINGLE_WORD]			PREMEM_rtData_r_i;$/;"	r
PREMEM_search_w_i	Main.v	/^	wire	[0:0]	PREMEM_search_w_o;	wire	[0:0]	PREMEM_search_w_i;$/;"	n
PREMEM_search_w_o	Main.v	/^	wire	[0:0]	PREMEM_search_w_o;	wire	[0:0]	PREMEM_search_w_i;$/;"	n
PREMEM_valid_w_i	Main.v	/^	wire	[0:0]	PREMEM_valid_w_o;	wire	[0:0]	PREMEM_valid_w_i;$/;"	n
PREMEM_valid_w_o	Main.v	/^	wire	[0:0]	PREMEM_valid_w_o;	wire	[0:0]	PREMEM_valid_w_i;$/;"	n
PREMEM_writeCp0_i	Main.v	/^	wire	[0:0]	PREMEM_writeCp0_o;	wire	[0:0]	PREMEM_writeCp0_i;$/;"	n
PREMEM_writeCp0_o	Main.v	/^	wire	[0:0]	PREMEM_writeCp0_o;	wire	[0:0]	PREMEM_writeCp0_i;$/;"	n
PREMEM_writeCp0_r_i	Main/MEM.v	/^	reg	[0:0]			PREMEM_writeCp0_r_i;$/;"	r
PREMEM_writeI_w_i	Main.v	/^	wire	[0:0]	PREMEM_writeI_w_o;	wire	[0:0]	PREMEM_writeI_w_i;$/;"	n
PREMEM_writeI_w_o	Main.v	/^	wire	[0:0]	PREMEM_writeI_w_o;	wire	[0:0]	PREMEM_writeI_w_i;$/;"	n
PREMEM_writeNum_i	Main.v	/^	wire	[4:0]	PREMEM_writeNum_o;	wire	[4:0]	PREMEM_writeNum_i;$/;"	n
PREMEM_writeNum_o	Main.v	/^	wire	[4:0]	PREMEM_writeNum_o;	wire	[4:0]	PREMEM_writeNum_i;$/;"	n
PREMEM_writeNum_r_i	Main/MEM.v	/^	reg	[`GPR_NUM]			PREMEM_writeNum_r_i;$/;"	r
PREMEM_writeNum_w_i	Main.v	/^	wire	[4:0]	PREMEM_writeNum_w_o;	wire	[4:0]	PREMEM_writeNum_w_i;$/;"	n
PREMEM_writeNum_w_o	Main.v	/^	wire	[4:0]	PREMEM_writeNum_w_o;	wire	[4:0]	PREMEM_writeNum_w_i;$/;"	n
PREMEM_writeR_w_i	Main.v	/^	wire	[0:0]	PREMEM_writeR_w_o;	wire	[0:0]	PREMEM_writeR_w_i;$/;"	n
PREMEM_writeR_w_o	Main.v	/^	wire	[0:0]	PREMEM_writeR_w_o;	wire	[0:0]	PREMEM_writeR_w_i;$/;"	n
PatternHistoryTable	Main/IF/PatternHistoryTable.v	/^module  PatternHistoryTable ($/;"	m
PrimaryBranchAmend	Main/PrimaryBranchAmend.v	/^module PrimaryBranchAmend($/;"	m
PrimaryExceptionProcessor	Main/PrimaryExceptionProcessor.v	/^module PrimaryExceptionProcessor ($/;"	m
RAS_ACTION	MyDefines.v	/^`define RAS_ACTION          4:3$/;"	c
RAS_CHECKPOINT	MyDefines.v	/^`define RAS_CHECKPOINT      `RAS_CHECKPOINT_LEN-1:0         \/\/ 栈指针，栈元素$/;"	c
RAS_CHECKPOINT_LEN	MyDefines.v	/^`define RAS_CHECKPOINT_LEN  (`RAS_WIDTH_LEN+`RAS_ENRTY_NUM_LEN)$/;"	c
RAS_CHECK_PC	MyDefines.v	/^`define RAS_CHECK_PC        `RAS_PC_LEN+`RAS_ENRTY_NUM_LEN-1:`RAS_ENRTY_NUM_LEN$/;"	c
RAS_CHECK_TIMES	MyDefines.v	/^`define RAS_CHECK_TIMES     `RAS_CHECKPOINT_LEN-1:`RAS_PC_LEN+`RAS_ENRTY_NUM_LEN$/;"	c
RAS_CHECK_TOP	MyDefines.v	/^`define RAS_CHECK_TOP       `RAS_ENRTY_NUM_LEN-1:0$/;"	c
RAS_DEST	MyDefines.v	/^`define RAS_DEST    4$/;"	c
RAS_ENRTY_NUM	MyDefines.v	/^`define RAS_ENRTY_NUM       `RAS_ENRTY_NUM_LEN-1:0$/;"	c
RAS_ENRTY_NUM_LEN	MyDefines.v	/^`define RAS_ENRTY_NUM_LEN   $clog2(`RAS_SIZE)  $/;"	c
RAS_ENRTY_WIDTH	MyDefines.v	/^`define RAS_ENRTY_WIDTH     `RAS_WIDTH_LEN-1:0$/;"	c
RAS_NOACTION	MyDefines.v	/^`define RAS_NOACTION        2'b00$/;"	c
RAS_PC	MyDefines.v	/^`define RAS_PC              `RAS_PC_LEN-1:0$/;"	c
RAS_PC_LEN	MyDefines.v	/^`define RAS_PC_LEN          30$/;"	c
RAS_POP	MyDefines.v	/^`define RAS_POP             2'b10$/;"	c
RAS_PUSH	MyDefines.v	/^`define RAS_PUSH            2'b01$/;"	c
RAS_REPAIRE	MyDefines.v	/^`define RAS_REPAIRE         2'b11$/;"	c
RAS_SIZE	MyDefines.v	/^`define RAS_SIZE            512$/;"	c
RAS_TIMES	MyDefines.v	/^`define RAS_TIMES           `RAS_PC_LEN+`RAS_TIMES_LEN-1:`RAS_PC_LEN$/;"	c
RAS_TIMES_LEN	MyDefines.v	/^`define RAS_TIMES_LEN       4$/;"	c
RAS_WIDTH_LEN	MyDefines.v	/^`define RAS_WIDTH_LEN       `RAS_PC_LEN+`RAS_TIMES_LEN$/;"	c
RAS_checkPoint_p_i	Main/IF.v	/^	wire	[171:0]	RAS_checkPoint_p_o;	wire	[171:0]	RAS_checkPoint_p_i;$/;"	n
RAS_checkPoint_p_o	Main/IF.v	/^	wire	[171:0]	RAS_checkPoint_p_o;	wire	[171:0]	RAS_checkPoint_p_i;$/;"	n
RAS_checkPoint_up	Main/IF/BranchSelectCheck.v	/^    wire    [`RAS_CHECKPOINT]   RAS_checkPoint_up   [3:0];$/;"	n
RAS_predDest	Main/IF/BranchSelectCheck.v	/^    wire [`SINGLE_WORD] RAS_predDest [3:0];$/;"	n
RAS_predDest_p_i	Main/IF.v	/^	wire	[127:0]	RAS_predDest_p_o;	wire	[127:0]	RAS_predDest_p_i;$/;"	n
RAS_predDest_p_o	Main/IF.v	/^	wire	[127:0]	RAS_predDest_p_o;	wire	[127:0]	RAS_predDest_p_i;$/;"	n
REEXE	Main/REEXE.v	/^module REEXE($/;"	m
REEXE_VAddr_i	Main.v	/^	wire	[31:0]	REEXE_VAddr_o;	wire	[31:0]	REEXE_VAddr_i;$/;"	n
REEXE_VAddr_o	Main.v	/^	wire	[31:0]	REEXE_VAddr_o;	wire	[31:0]	REEXE_VAddr_i;$/;"	n
REEXE_VAddr_r_i	Main/PrimaryBranchAmend.v	/^	reg	[`SINGLE_WORD]			REEXE_VAddr_r_i;$/;"	r
REEXE_forwardMode_w_i	Main.v	/^	wire	[0:0]	REEXE_forwardMode_w_o;	wire	[0:0]	REEXE_forwardMode_w_i;$/;"	n
REEXE_forwardMode_w_o	Main.v	/^	wire	[0:0]	REEXE_forwardMode_w_o;	wire	[0:0]	REEXE_forwardMode_w_i;$/;"	n
REEXE_okToChange_w_i	Main.v	/^	wire	[0:0]	REEXE_okToChange_w_o;	wire	[0:0]	REEXE_okToChange_w_i;$/;"	n
REEXE_okToChange_w_o	Main.v	/^	wire	[0:0]	REEXE_okToChange_w_o;	wire	[0:0]	REEXE_okToChange_w_i;$/;"	n
REEXE_regData_i	Main.v	/^	wire	[31:0]	REEXE_regData_o;	wire	[31:0]	REEXE_regData_i;$/;"	n
REEXE_regData_o	Main.v	/^	wire	[31:0]	REEXE_regData_o;	wire	[31:0]	REEXE_regData_i;$/;"	n
REEXE_regData_r_i	Main/EXEDOWN.v	/^	reg	[`SINGLE_WORD]			REEXE_regData_r_i;$/;"	r
REEXE_regData_r_i	Main/EXEUP.v	/^	reg	[`SINGLE_WORD]			REEXE_regData_r_i;$/;"	r
REEXE_regData_r_i	Main/PrimaryBranchAmend.v	/^	reg	[`SINGLE_WORD]			REEXE_regData_r_i;$/;"	r
REEXE_valid_w_i	Main.v	/^	wire	[0:0]	REEXE_valid_w_o;	wire	[0:0]	REEXE_valid_w_i;$/;"	n
REEXE_valid_w_o	Main.v	/^	wire	[0:0]	REEXE_valid_w_o;	wire	[0:0]	REEXE_valid_w_i;$/;"	n
REEXE_writeNum_i	Main.v	/^	wire	[4:0]	REEXE_writeNum_o;	wire	[4:0]	REEXE_writeNum_i;$/;"	n
REEXE_writeNum_o	Main.v	/^	wire	[4:0]	REEXE_writeNum_o;	wire	[4:0]	REEXE_writeNum_i;$/;"	n
REEXE_writeNum_r_i	Main/PrimaryBranchAmend.v	/^	reg	[`GPR_NUM]			REEXE_writeNum_r_i;$/;"	r
REEXE_writeNum_w_i	Main.v	/^	wire	[4:0]	REEXE_writeNum_w_o;	wire	[4:0]	REEXE_writeNum_w_i;$/;"	n
REEXE_writeNum_w_o	Main.v	/^	wire	[4:0]	REEXE_writeNum_w_o;	wire	[4:0]	REEXE_writeNum_w_i;$/;"	n
REG_FILE	MyDefines.v	/^`define REG_FILE                "..\/..\/..\/..\/..\/..\/mycpu\/trace\/regfile.txt"$/;"	c
REPAIR_ACTION	MyDefines.v	/^`define REPAIR_ACTION `REPAIR_ACTION_LEN-1:0$/;"	c
REPAIR_ACTION_LEN	MyDefines.v	/^`define REPAIR_ACTION_LEN   8$/;"	c
REQ_LOAD	MyDefines.v	/^`define REQ_LOAD        1'b0$/;"	c
REQ_STORE	MyDefines.v	/^`define REQ_STORE       1'b1$/;"	c
RI	MyDefines.v	/^`define RI      5'ha$/;"	c
ReadRs	Main/components/ID/Arbitrator.v	/^    wire    [`GPR_NUM]      ReadRs      [1:0];  \/\/ 指令的部分截取$/;"	n
ReadRt	Main/components/ID/Arbitrator.v	/^    wire    [`GPR_NUM]      ReadRt      [1:0];  \/\/ 指令的部分截取$/;"	n
RegFile	Main/components/ID/RegFile.v	/^module RegFile($/;"	m
RepairDecorder	Main/IF/components/RepairDecorder.v	/^module RepairDecorder ($/;"	m
ReturnAddressStack	Main/IF/ReturnAddressStack.v	/^module ReturnAddressStack ($/;"	m
SATGE_DATAOK	MyDefines.v	/^`define SATGE_DATAOK    4'b0000 $/;"	c
SATGE_LEN	MyDefines.v	/^`define SATGE_LEN 4     $/;"	c
SBA_VAddr_i	Main.v	/^	wire	[31:0]	SBA_VAddr_o;	wire	[31:0]	SBA_VAddr_i;$/;"	n
SBA_VAddr_o	Main.v	/^	wire	[31:0]	SBA_VAddr_o;	wire	[31:0]	SBA_VAddr_i;$/;"	n
SBA_VAddr_r_i	Main/REEXE.v	/^	reg	[`SINGLE_WORD]			SBA_VAddr_r_i;$/;"	r
SBA_aluRes_i	Main.v	/^	wire	[31:0]	SBA_aluRes_o;	wire	[31:0]	SBA_aluRes_i;$/;"	n
SBA_aluRes_o	Main.v	/^	wire	[31:0]	SBA_aluRes_o;	wire	[31:0]	SBA_aluRes_i;$/;"	n
SBA_aluRes_r_i	Main/EXEDOWN.v	/^	reg	[`SINGLE_WORD]			SBA_aluRes_r_i;$/;"	r
SBA_aluRes_r_i	Main/EXEUP.v	/^	reg	[`SINGLE_WORD]			SBA_aluRes_r_i;$/;"	r
SBA_aluRes_r_i	Main/REEXE.v	/^	reg	[`SINGLE_WORD]			SBA_aluRes_r_i;$/;"	r
SBA_branchRisk_w_i	Main.v	/^	wire	[0:0]	SBA_branchRisk_w_o;	wire	[0:0]	SBA_branchRisk_w_i;$/;"	n
SBA_branchRisk_w_o	Main.v	/^	wire	[0:0]	SBA_branchRisk_w_o;	wire	[0:0]	SBA_branchRisk_w_i;$/;"	n
SBA_checkPoint_w_i	Main.v	/^	wire	[60:0]	SBA_checkPoint_w_o;	wire	[60:0]	SBA_checkPoint_w_i;$/;"	n
SBA_checkPoint_w_o	Main.v	/^	wire	[60:0]	SBA_checkPoint_w_o;	wire	[60:0]	SBA_checkPoint_w_i;$/;"	n
SBA_corrDest_w_i	Main.v	/^	wire	[31:0]	SBA_corrDest_w_o;	wire	[31:0]	SBA_corrDest_w_i;$/;"	n
SBA_corrDest_w_o	Main.v	/^	wire	[31:0]	SBA_corrDest_w_o;	wire	[31:0]	SBA_corrDest_w_i;$/;"	n
SBA_corrTake_w_i	Main.v	/^	wire	[0:0]	SBA_corrTake_w_o;	wire	[0:0]	SBA_corrTake_w_i;$/;"	n
SBA_corrTake_w_o	Main.v	/^	wire	[0:0]	SBA_corrTake_w_o;	wire	[0:0]	SBA_corrTake_w_i;$/;"	n
SBA_erroVAddr_w_i	Main.v	/^	wire	[31:0]	SBA_erroVAddr_w_o;	wire	[31:0]	SBA_erroVAddr_w_i;$/;"	n
SBA_erroVAddr_w_o	Main.v	/^	wire	[31:0]	SBA_erroVAddr_w_o;	wire	[31:0]	SBA_erroVAddr_w_i;$/;"	n
SBA_flush_w_i	Main.v	/^	wire	[0:0]	SBA_flush_w_o;	wire	[0:0]	SBA_flush_w_i;$/;"	n
SBA_flush_w_o	Main.v	/^	wire	[0:0]	SBA_flush_w_o;	wire	[0:0]	SBA_flush_w_i;$/;"	n
SBA_forwardMode_w_i	Main.v	/^	wire	[0:0]	SBA_forwardMode_w_o;	wire	[0:0]	SBA_forwardMode_w_i;$/;"	n
SBA_forwardMode_w_o	Main.v	/^	wire	[0:0]	SBA_forwardMode_w_o;	wire	[0:0]	SBA_forwardMode_w_i;$/;"	n
SBA_nonBlockDS_w_i	Main.v	/^	wire	[0:0]	SBA_nonBlockDS_w_o;	wire	[0:0]	SBA_nonBlockDS_w_i;$/;"	n
SBA_nonBlockDS_w_o	Main.v	/^	wire	[0:0]	SBA_nonBlockDS_w_o;	wire	[0:0]	SBA_nonBlockDS_w_i;$/;"	n
SBA_okToChange_w_i	Main.v	/^	wire	[0:0]	SBA_okToChange_w_o;	wire	[0:0]	SBA_okToChange_w_i;$/;"	n
SBA_okToChange_w_o	Main.v	/^	wire	[0:0]	SBA_okToChange_w_o;	wire	[0:0]	SBA_okToChange_w_i;$/;"	n
SBA_repairAction_w_i	Main.v	/^	wire	[7:0]	SBA_repairAction_w_o;	wire	[7:0]	SBA_repairAction_w_i;$/;"	n
SBA_repairAction_w_o	Main.v	/^	wire	[7:0]	SBA_repairAction_w_o;	wire	[7:0]	SBA_repairAction_w_i;$/;"	n
SBA_valid_w_i	Main.v	/^	wire	[0:0]	SBA_valid_w_o;	wire	[0:0]	SBA_valid_w_i;$/;"	n
SBA_valid_w_o	Main.v	/^	wire	[0:0]	SBA_valid_w_o;	wire	[0:0]	SBA_valid_w_i;$/;"	n
SBA_writeNum_i	Main.v	/^	wire	[4:0]	SBA_writeNum_o;	wire	[4:0]	SBA_writeNum_i;$/;"	n
SBA_writeNum_o	Main.v	/^	wire	[4:0]	SBA_writeNum_o;	wire	[4:0]	SBA_writeNum_i;$/;"	n
SBA_writeNum_r_i	Main/REEXE.v	/^	reg	[`GPR_NUM]			SBA_writeNum_r_i;$/;"	r
SBA_writeNum_w_i	Main.v	/^	wire	[4:0]	SBA_writeNum_w_o;	wire	[4:0]	SBA_writeNum_w_i;$/;"	n
SBA_writeNum_w_o	Main.v	/^	wire	[4:0]	SBA_writeNum_w_o;	wire	[4:0]	SBA_writeNum_w_i;$/;"	n
SCT_BTBInstEnable_i	Main/IF.v	/^	wire	[3:0]	SCT_BTBInstEnable_o;	wire	[3:0]	SCT_BTBInstEnable_i;$/;"	n
SCT_BTBInstEnable_o	Main/IF.v	/^	wire	[3:0]	SCT_BTBInstEnable_o;	wire	[3:0]	SCT_BTBInstEnable_i;$/;"	n
SCT_BTBValidDest_i	Main/IF.v	/^	wire	[31:0]	SCT_BTBValidDest_o;	wire	[31:0]	SCT_BTBValidDest_i;$/;"	n
SCT_BTBValidDest_o	Main/IF.v	/^	wire	[31:0]	SCT_BTBValidDest_o;	wire	[31:0]	SCT_BTBValidDest_i;$/;"	n
SCT_BTBValidTake_i	Main/IF.v	/^	wire	[0:0]	SCT_BTBValidTake_o;	wire	[0:0]	SCT_BTBValidTake_i;$/;"	n
SCT_BTBValidTake_o	Main/IF.v	/^	wire	[0:0]	SCT_BTBValidTake_o;	wire	[0:0]	SCT_BTBValidTake_i;$/;"	n
SCT_BTBfifthVAddr_i	Main/IF.v	/^	wire	[31:0]	SCT_BTBfifthVAddr_o;	wire	[31:0]	SCT_BTBfifthVAddr_i;$/;"	n
SCT_BTBfifthVAddr_o	Main/IF.v	/^	wire	[31:0]	SCT_BTBfifthVAddr_o;	wire	[31:0]	SCT_BTBfifthVAddr_i;$/;"	n
SCT_ExcCode_i	Main/IF.v	/^	wire	[4:0]	SCT_ExcCode_o;	wire	[4:0]	SCT_ExcCode_i;$/;"	n
SCT_ExcCode_o	Main/IF.v	/^	wire	[4:0]	SCT_ExcCode_o;	wire	[4:0]	SCT_ExcCode_i;$/;"	n
SCT_IJTC_checkPoint_p_i	Main/IF.v	/^	wire	[31:0]	SCT_IJTC_checkPoint_p_o;	wire	[31:0]	SCT_IJTC_checkPoint_p_i;$/;"	n
SCT_IJTC_checkPoint_p_o	Main/IF.v	/^	wire	[31:0]	SCT_IJTC_checkPoint_p_o;	wire	[31:0]	SCT_IJTC_checkPoint_p_i;$/;"	n
SCT_IJTC_predDest_p_i	Main/IF.v	/^	wire	[127:0]	SCT_IJTC_predDest_p_o;	wire	[127:0]	SCT_IJTC_predDest_p_i;$/;"	n
SCT_IJTC_predDest_p_o	Main/IF.v	/^	wire	[127:0]	SCT_IJTC_predDest_p_o;	wire	[127:0]	SCT_IJTC_predDest_p_i;$/;"	n
SCT_PHT_checkPoint_p_i	Main/IF.v	/^	wire	[39:0]	SCT_PHT_checkPoint_p_o;	wire	[39:0]	SCT_PHT_checkPoint_p_i;$/;"	n
SCT_PHT_checkPoint_p_o	Main/IF.v	/^	wire	[39:0]	SCT_PHT_checkPoint_p_o;	wire	[39:0]	SCT_PHT_checkPoint_p_i;$/;"	n
SCT_PHT_predTake_p_i	Main/IF.v	/^	wire	[3:0]	SCT_PHT_predTake_p_o;	wire	[3:0]	SCT_PHT_predTake_p_i;$/;"	n
SCT_PHT_predTake_p_o	Main/IF.v	/^	wire	[3:0]	SCT_PHT_predTake_p_o;	wire	[3:0]	SCT_PHT_predTake_p_i;$/;"	n
SCT_RAS_checkPoint_p_i	Main/IF.v	/^	wire	[171:0]	SCT_RAS_checkPoint_p_o;	wire	[171:0]	SCT_RAS_checkPoint_p_i;$/;"	n
SCT_RAS_checkPoint_p_o	Main/IF.v	/^	wire	[171:0]	SCT_RAS_checkPoint_p_o;	wire	[171:0]	SCT_RAS_checkPoint_p_i;$/;"	n
SCT_RAS_predDest_p_i	Main/IF.v	/^	wire	[127:0]	SCT_RAS_predDest_p_o;	wire	[127:0]	SCT_RAS_predDest_p_i;$/;"	n
SCT_RAS_predDest_p_o	Main/IF.v	/^	wire	[127:0]	SCT_RAS_predDest_p_o;	wire	[127:0]	SCT_RAS_predDest_p_i;$/;"	n
SCT_VAddr_i	Main/IF.v	/^	wire	[31:0]	SCT_VAddr_o;	wire	[31:0]	SCT_VAddr_i;$/;"	n
SCT_VAddr_o	Main/IF.v	/^	wire	[31:0]	SCT_VAddr_o;	wire	[31:0]	SCT_VAddr_i;$/;"	n
SCT_allowin_w_i	Main/IF.v	/^	wire	[0:0]	SCT_allowin_w_o;	wire	[0:0]	SCT_allowin_w_i;$/;"	n
SCT_allowin_w_o	Main/IF.v	/^	wire	[0:0]	SCT_allowin_w_o;	wire	[0:0]	SCT_allowin_w_i;$/;"	n
SCT_hasException_i	Main/IF.v	/^	wire	[0:0]	SCT_hasException_o;	wire	[0:0]	SCT_hasException_i;$/;"	n
SCT_hasException_o	Main/IF.v	/^	wire	[0:0]	SCT_hasException_o;	wire	[0:0]	SCT_hasException_i;$/;"	n
SCT_isCanceled_o	Main/IF/SecondCacheTrace.v	/^    reg		                        SCT_isCanceled_o;   \/\/对该周期内出现的异常信号和分支失败信号采样$/;"	r
SCT_isRefill_i	Main/IF.v	/^	wire	[0:0]	SCT_isRefill_o;	wire	[0:0]	SCT_isRefill_i;$/;"	n
SCT_isRefill_o	Main/IF.v	/^	wire	[0:0]	SCT_isRefill_o;	wire	[0:0]	SCT_isRefill_i;$/;"	n
SCT_needDelaySlot_i	Main/IF.v	/^	wire	[0:0]	SCT_needDelaySlot_o;	wire	[0:0]	SCT_needDelaySlot_i;$/;"	n
SCT_needDelaySlot_o	Main/IF.v	/^	wire	[0:0]	SCT_needDelaySlot_o;	wire	[0:0]	SCT_needDelaySlot_i;$/;"	n
SCT_originEnable_i	Main/IF.v	/^	wire	[3:0]	SCT_originEnable_o;	wire	[3:0]	SCT_originEnable_i;$/;"	n
SCT_originEnable_o	Main/IF.v	/^	wire	[3:0]	SCT_originEnable_o;	wire	[3:0]	SCT_originEnable_i;$/;"	n
SCT_predDest_p_i	Main/IF.v	/^	wire	[127:0]	SCT_predDest_p_o;	wire	[127:0]	SCT_predDest_p_i;$/;"	n
SCT_predDest_p_o	Main/IF.v	/^	wire	[127:0]	SCT_predDest_p_o;	wire	[127:0]	SCT_predDest_p_i;$/;"	n
SCT_predTake_p_i	Main/IF.v	/^	wire	[3:0]	SCT_predTake_p_o;	wire	[3:0]	SCT_predTake_p_i;$/;"	n
SCT_predTake_p_o	Main/IF.v	/^	wire	[3:0]	SCT_predTake_p_o;	wire	[3:0]	SCT_predTake_p_i;$/;"	n
SCT_valid_i	Main/IF.v	/^	wire	[0:0]	SCT_valid_o;	wire	[0:0]	SCT_valid_i;$/;"	n
SCT_valid_o	Main/IF.v	/^	wire	[0:0]	SCT_valid_o;	wire	[0:0]	SCT_valid_i;$/;"	n
SEL_31GPR	MyDefines.v	/^`define SEL_31GPR   2$/;"	c
SEL_DELAYSLOT_PC	MyDefines.v	/^`define SEL_DELAYSLOT_PC    2$/;"	c
SEL_EXTENDED_IMM	MyDefines.v	/^`define SEL_EXTENDED_IMM    1$/;"	c
SEL_INST_OFFSET	MyDefines.v	/^`define SEL_INST_OFFSET     2$/;"	c
SEL_RD_NUM	MyDefines.v	/^`define SEL_RD_NUM  0$/;"	c
SEL_RS_DATA	MyDefines.v	/^`define SEL_RS_DATA         0$/;"	c
SEL_RT_DATA	MyDefines.v	/^`define SEL_RT_DATA         0$/;"	c
SEL_RT_NUM	MyDefines.v	/^`define SEL_RT_NUM  1$/;"	c
SEL_SA_FIELD	MyDefines.v	/^`define SEL_SA_FIELD        1$/;"	c
SIGN_EXTEND_IMMED	MyDefines.v	/^`define SIGN_EXTEND_IMMED   1$/;"	c
SINGLE_ISSUE	MyDefines.v	/^`define SINGLE_ISSUE            2'b01$/;"	c
SINGLE_WORD	MyDefines.v	/^`define SINGLE_WORD `SINGLE_WORD_LEN-1:0$/;"	c
SINGLE_WORD_LEN	MyDefines.v	/^`define SINGLE_WORD_LEN 32$/;"	c
SRAM_READ	MyDefines.v	/^`define SRAM_READ 1'b0 $/;"	c
SRAM_WRITE	MyDefines.v	/^`define SRAM_WRITE 1'b1$/;"	c
STAGE	MyDefines.v	/^`define STAGE `SATGE_LEN-1:0$/;"	c
STAGE_EXE_DOWN	MyDefines.v	/^`define STAGE_EXE_DOWN  4'b0011$/;"	c
STAGE_EXE_UP	MyDefines.v	/^`define STAGE_EXE_UP    4'b0001$/;"	c
STAGE_MEM	MyDefines.v	/^`define STAGE_MEM       4'b1101$/;"	c
STAGE_PBA	MyDefines.v	/^`define STAGE_PBA       4'b0111$/;"	c
STAGE_PERMEM	MyDefines.v	/^`define STAGE_PERMEM    4'b1001$/;"	c
STAGE_REEXE	MyDefines.v	/^`define STAGE_REEXE     4'b1111$/;"	c
STAGE_SBA	MyDefines.v	/^`define STAGE_SBA       4'b0101$/;"	c
STAGE_WB	MyDefines.v	/^`define STAGE_WB        4'b1011$/;"	c
STARTLINE	MyDefines.v	/^    `define STARTLINE   1$/;"	c
STARTLINE	MyDefines.v	/^`define STARTLINE	      85706$/;"	c
STARTPOINT	MyDefines.v	/^    `define STARTPOINT  32'hbfc00000$/;"	c
STARTPOINT	MyDefines.v	/^`define STARTPOINT		32'hbfc00bb4$/;"	c
STORE_MODE	MyDefines.v	/^`define STORE_MODE      4:0$/;"	c
STORE_MODE_SB	MyDefines.v	/^`define STORE_MODE_SB   0$/;"	c
STORE_MODE_SH	MyDefines.v	/^`define STORE_MODE_SH   1$/;"	c
STORE_MODE_SW	MyDefines.v	/^`define STORE_MODE_SW   2$/;"	c
STORE_MODE_SWL	MyDefines.v	/^`define STORE_MODE_SWL  3$/;"	c
STORE_MODE_SWR	MyDefines.v	/^`define STORE_MODE_SWR  4$/;"	c
SYS	MyDefines.v	/^`define SYS     5'h8$/;"	c
SecondBranchAmend	Main/SecondBranchAmend.v	/^module SecondBranchAmend ($/;"	m
SecondCacheTrace	Main/IF/SecondCacheTrace.v	/^module SecondCacheTrace ($/;"	m
Status	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]	        Status;$/;"	n
Status_exl	Main/PrimaryExceptionProcessor.v	/^    reg  Status_exl;$/;"	r
Status_ie	Main/PrimaryExceptionProcessor.v	/^    reg     Status_ie;$/;"	r
Status_im	Main/PrimaryExceptionProcessor.v	/^    reg     [`IM7:`IM0]     Status_im;$/;"	r
TI	MyDefines.v	/^    `define TI  30$/;"	c
TLB	Main/TLB.v	/^module TLB ($/;"	m
TLBL	MyDefines.v	/^`define TLBL    5'h2$/;"	c
TLBPwrite	Main/PrimaryExceptionProcessor.v	/^    wire	                TLBPwrite = DMMU_TLBPwrite_i;       \/\/ 查询指令，写Index$/;"	n
TLBRwrite	Main/PrimaryExceptionProcessor.v	/^    wire	                TLBRwrite = DMMU_TLBRwrite_i;       \/\/ 读指令,写大部分TLB寄存器$/;"	n
TLBS	MyDefines.v	/^`define TLBS    5'h3$/;"	c
TLB_ASID	MyDefines.v	/^`define TLB_ASID 7:0$/;"	c
TLB_ENTRY_NUM	MyDefines.v	/^`define TLB_ENTRY_NUM $clog2(`TLB_SIZE)$/;"	c
TLB_EVEN_PAGE	MyDefines.v	/^`define TLB_EVEN_PAGE 1'b0$/;"	c
TLB_INST	MyDefines.v	/^`define TLB_INST        `TLB_INST_LEN-1:0$/;"	c
TLB_INST_LEN	MyDefines.v	/^`define TLB_INST_LEN    4$/;"	c
TLB_INST_TBLP	MyDefines.v	/^`define TLB_INST_TBLP   0$/;"	c
TLB_INST_TBLRI	MyDefines.v	/^`define TLB_INST_TBLRI  1$/;"	c
TLB_INST_TBLWI	MyDefines.v	/^`define TLB_INST_TBLWI  2$/;"	c
TLB_INST_TBLWR	MyDefines.v	/^`define TLB_INST_TBLWR  3$/;"	c
TLB_ODD_PAGE	MyDefines.v	/^`define TLB_ODD_PAGE 1'b1$/;"	c
TLB_PFN	MyDefines.v	/^`define TLB_PFN 19:0$/;"	c
TLB_SIZE	MyDefines.v	/^`define TLB_SIZE  32$/;"	c
TLB_VPN	MyDefines.v	/^`define TLB_VPN 18:0$/;"	c
TLB_WIDTH	MyDefines.v	/^`define TLB_WIDTH `TLB_ENTRY_NUM-1:0$/;"	c
TR	MyDefines.v	/^`define TR      5'hd$/;"	c
TRAP_EQUAL	MyDefines.v	/^`define TRAP_EQUAL      3$/;"	c
TRAP_GE_GEU	MyDefines.v	/^`define TRAP_GE_GEU     0$/;"	c
TRAP_KIND	MyDefines.v	/^`define TRAP_KIND `TRAP_KIND_LEN-1:0$/;"	c
TRAP_KIND_LEN	MyDefines.v	/^`define TRAP_KIND_LEN   4$/;"	c
TRAP_LT_LTU	MyDefines.v	/^`define TRAP_LT_LTU     1$/;"	c
TRAP_NEQUAL	MyDefines.v	/^`define TRAP_NEQUAL     2$/;"	c
TRUE	MyDefines.v	/^`define TRUE 1'b1$/;"	c
TWO_DEMAND	MyDefines.v	/^`define TWO_DEMAND      2'b11$/;"	c
TakeDestDecorder	Main/IF/components/TakeDestDecorder.v	/^module TakeDestDecorder($/;"	m
UNCACHED	MyDefines.v	/^`define UNCACHED 3'd2$/;"	c
UNPACK_ARRAY	MyDefines.v	/^`define UNPACK_ARRAY(PK_WIDTH,PK_LEN,PK_DEST,PK_SRC) \\$/;"	c
VAddr_i	Main/IF/BranchTargetBuffer.v	/^    wire [31:0]                 VAddr_i                         ;$/;"	n
VPN2	MyDefines.v	/^`define VPN2 89:71$/;"	c
WAR_conflict	Main/ID.v	/^    wire WAR_conflict = (WAR_conflict_up[0][0]) || (WAR_conflict_up[1][0]) || (WAR_conflict_up[0][1]) || (WAR_conflict_up[1][1]);$/;"	n
WAR_conflict_up	Main/ID.v	/^    wire [0:0]              WAR_conflict_up [1:0][1:0];     \/\/ 同上$/;"	n
WAW_coflict	Main/components/ID/RegFile.v	/^    wire                        WAW_coflict                     ;$/;"	n
WB_allowin_w_i	Main.v	/^	wire	[0:0]	WB_allowin_w_o;	wire	[0:0]	WB_allowin_w_i;$/;"	n
WB_allowin_w_o	Main.v	/^	wire	[0:0]	WB_allowin_w_o;	wire	[0:0]	WB_allowin_w_i;$/;"	n
WB_finalRes_w_i	Main.v	/^	wire	[31:0]	WB_finalRes_w_o;	wire	[31:0]	WB_finalRes_w_i;$/;"	n
WB_finalRes_w_o	Main.v	/^	wire	[31:0]	WB_finalRes_w_o;	wire	[31:0]	WB_finalRes_w_i;$/;"	n
WB_forwardData_w_i	Main.v	/^	wire	[31:0]	WB_forwardData_w_o;	wire	[31:0]	WB_forwardData_w_i;$/;"	n
WB_forwardData_w_o	Main.v	/^	wire	[31:0]	WB_forwardData_w_o;	wire	[31:0]	WB_forwardData_w_i;$/;"	n
WB_hasDangerous_w_i	Main.v	/^	wire	[0:0]	WB_hasDangerous_w_o;	wire	[0:0]	WB_hasDangerous_w_i;$/;"	n
WB_hasDangerous_w_o	Main.v	/^	wire	[0:0]	WB_hasDangerous_w_o;	wire	[0:0]	WB_hasDangerous_w_i;$/;"	n
WB_hasRisk_w_i	Main.v	/^	wire	[0:0]	WB_hasRisk_w_o;	wire	[0:0]	WB_hasRisk_w_i;$/;"	n
WB_hasRisk_w_o	Main.v	/^	wire	[0:0]	WB_hasRisk_w_o;	wire	[0:0]	WB_hasRisk_w_i;$/;"	n
WB_valid_w_o	Main/WriteBack.v	/^    wire WB_valid_w_o = hasData && ready;$/;"	n
WB_writeEnable_w_i	Main.v	/^	wire	[0:0]	WB_writeEnable_w_o;	wire	[0:0]	WB_writeEnable_w_i;$/;"	n
WB_writeEnable_w_o	Main.v	/^	wire	[0:0]	WB_writeEnable_w_o;	wire	[0:0]	WB_writeEnable_w_i;$/;"	n
WB_writeNum_w_i	Main.v	/^	wire	[4:0]	WB_writeNum_w_o;	wire	[4:0]	WB_writeNum_w_i;$/;"	n
WB_writeNum_w_o	Main.v	/^	wire	[4:0]	WB_writeNum_w_o;	wire	[4:0]	WB_writeNum_w_i;$/;"	n
WRITENUM_SEL	MyDefines.v	/^`define WRITENUM_SEL `WRITENUM_SEL_LEN-1 : 0$/;"	c
WRITENUM_SEL_LEN	MyDefines.v	/^`define WRITENUM_SEL_LEN 3$/;"	c
WordLeftEnable	Main/EXEDOWN.v	/^    wire [3:0]  WordLeftEnable =    alignCheck==2'b00 ? 4'b0001 :$/;"	n
WordRightEnable	Main/EXEDOWN.v	/^    wire [3:0]  WordRightEnable =   alignCheck==2'b00 ? 4'b1111 :$/;"	n
WriteBack	Main/WriteBack.v	/^module WriteBack ($/;"	m
ZEROWORD	MyDefines.v	/^`define ZEROWORD 32'h00000000$/;"	c
ZERO_EXTEND_IMMED	MyDefines.v	/^`define ZERO_EXTEND_IMMED   0$/;"	c
ZERO_EXTEND_INDEX	MyDefines.v	/^`define ZERO_EXTEND_INDEX   2$/;"	c
accuRes	Main/components/EXE/MyMultiplier.v	/^    wire    [2*`SINGLE_WORD]   accuRes = {add_res,adderRes};$/;"	n
actualEnable	Main/IF/BranchSelectCheck.v	/^    wire [`INST_NUM]            actualEnable                    ;$/;"	n
add_a	Main/components/EXE/MyMultiplier.v	/^    wire [`SINGLE_WORD]             add_a       ;$/;"	n
add_b	Main/components/EXE/MyMultiplier.v	/^    wire [`SINGLE_WORD]             add_b       ;$/;"	n
add_op	Main/components/EXE/ALU.v	/^    wire add_op = aluop[`ALU_ADD];$/;"	n
add_op	Main/components/EXE/adder.v	/^    wire sub_op,slt_op,sltu_op,add_op;$/;"	n
add_res	Main/components/EXE/MyMultiplier.v	/^    wire [`SINGLE_WORD]             add_res     ;$/;"	n
add_sub_op	Main/components/EXE/MultiDivideUnit.v	/^    wire                        add_sub_op                      ;\/\/ unresolved$/;"	n
add_sub_res	Main/components/EXE/ALU.v	/^    wire [31:0] add_sub_res;$/;"	n
add_sub_res	Main/components/EXE/adder.v	/^    wire [BUS-1:0] add_sub_res,data_a,data_b;$/;"	n
adder	Main/components/EXE/adder.v	/^module adder$/;"	m
adderRes	Main/components/EXE/MyMultiplier.v	/^    reg [`SINGLE_WORD]  adderRes;$/;"	r
adder_op	Main/components/EXE/MyMultiplier.v	/^    wire [3:0]                      adder_op    ;$/;"	n
addr	Main/IF/BranchTargetBuffer.v	/^            wire    [`BTB_INDEX]  addr = {FU_erroVAddr_w_i[29],FU_erroVAddr_w_i[`PC_INDEX]};$/;"	n
alignCheck	Main/EXEDOWN.v	/^    wire [1:0]  alignCheck = updataRegFile_up[0][1:0] + ID_down_oprand1_r_i[1:0];$/;"	n
allCheckPoint_up	Main/IF/BranchSelectCheck.v	/^    wire    [`ALL_CHECKPOINT]   allCheckPoint_up    [3:0]; \/\/ 重新排列后所有的检查点$/;"	n
allInfo_i	Main/components/ID/Arbitrator.v	/^                -1:0]    allInfo_i[1:0] , allInfo_o [1:0];$/;"	n
allInfo_o	Main/components/ID/Arbitrator.v	/^                -1:0]    allInfo_i[1:0] , allInfo_o [1:0];$/;"	n
allInfo_up	Main/IF/BranchSelectCheck.v	/^            allInfo_up [3:0];$/;"	n
aluOprator_up	Main/components/ID/Decorder.v	/^    wire    [`ALUOP]            aluOprator_up       [1:0];$/;"	n
aluop	Main/EXEDOWN.v	/^    wire [`ALUOP]               aluop                           ;\/\/ unresolved$/;"	n
aluop	Main/EXEUP.v	/^    wire [`ALUOP]               aluop                           ;$/;"	n
aluso	Main/EXEDOWN.v	/^    wire [`SINGLE_WORD]         aluso                           ;$/;"	n
aluso	Main/EXEUP.v	/^    wire [`SINGLE_WORD]         aluso                           ;$/;"	n
and_op	Main/components/EXE/ALU.v	/^    wire and_op = aluop[`ALU_AND];$/;"	n
and_res	Main/components/EXE/ALU.v	/^    wire [31:0] and_res,or_res,nor_res,xor_res,sll_res,srl_res,sra_res,lui_res;$/;"	n
badVaddr	Main/PrimaryExceptionProcessor.v	/^    reg     [`SINGLE_WORD]      badVaddr;$/;"	r
badVaddrCode	Main/PrimaryExceptionProcessor.v	/^    wire    badVaddrCode = (ExcCode==`ADEL)||(ExcCode==`ADES)||$/;"	n
baseAddr	Main/IF/BranchSelectCheck.v	/^    wire [31:4]                 baseAddr                        ;$/;"	n
beq_take	Main/EXEUP.v	/^    wire beq_take = updataRegFile_up[0]==updataRegFile_up[1];$/;"	n
bge_take	Main/EXEUP.v	/^    wire bge_take = !blt_take;$/;"	n
bgt_take	Main/EXEUP.v	/^    wire bgt_take = (!updataRegFile_up[0][31]) && |(updataRegFile_up[0][30:0]);$/;"	n
ble_take	Main/EXEUP.v	/^    wire ble_take = !bgt_take;$/;"	n
blt_take	Main/EXEUP.v	/^    wire blt_take = updataRegFile_up[0][31];$/;"	n
bne_take	Main/EXEUP.v	/^    wire bne_take = !beq_take;$/;"	n
branchEnable	Main/IF/components/BranchFourToOne.v	/^    wire   [`INST_NUM]      branchEnable;$/;"	n
btbReg	Main/IF/BranchTargetBuffer.v	/^            reg [31:2]  btbReg  [`BTB_INDEX];$/;"	r
btbValid	Main/IF/BranchTargetBuffer.v	/^            reg [`BTB_INDEX]    btbValid;$/;"	r
cache_noAccept	Main/PREMEM.v	/^    wire   cache_noAccept  = !data_index_ok && EXE_down_memReq_r_i;$/;"	n
cancel	Main/EXEDOWN.v	/^    wire                        cancel                          ;\/\/ 表示是否应当被取消$/;"	n
cannotForward	Main/MEM.v	/^    wire    cannotForward = PREMEM_memReq_r_i && (!PREMEM_loadSel_r_i[`LOAD_LW_BIT]);$/;"	n
checkPoint	Main/IF/IndirectJumpTargetCache.v	/^    reg [`IJTC_CHECKPOINT] checkPoint [3:0];$/;"	r
checkPoint	Main/IF/PatternHistoryTable.v	/^    reg [`PHT_CHECKPOINT] checkPoint [3:0];$/;"	r
checkPoint	Main/IF/ReturnAddressStack.v	/^    reg [`RAS_CHECKPOINT] checkPoint [3:0];$/;"	r
cin	Main/components/EXE/adder.v	/^    wire cin,cout,top_a,top_b;$/;"	n
cin_i	Main/components/EXE/MyMultiplier.v	/^    wire                    cin_i               ;$/;"	n
clReq	Main/EXEDOWN.v	/^    wire clReq      = ID_down_mduOperator_r_i[`MDU_CLZ] || ID_down_mduOperator_r_i[`MDU_CLO];$/;"	n
clRes	Main/EXEDOWN.v	/^    reg     [4:0]   clRes;$/;"	r
cl_conflict	Main/EXEDOWN.v	/^    wire            cl_conflict = clReq && !cl_data_ok;$/;"	n
cl_data_ok	Main/EXEDOWN.v	/^    reg             cl_data_ok;$/;"	r
clk	Main/components/MyRAM.v	/^    input                           clk,$/;"	p
collison	Main/components/MyRAM.v	/^    wire collison = (rAddr == wAddr) && wen;$/;"	n
collison_output	Main/components/MyRAM.v	/^    wire [MY_DATA_WIDTH-1:0]    collison_output;$/;"	n
collison_reg	Main/components/MyRAM.v	/^    reg                         collison_reg;$/;"	r
combination	Main/EXEDOWN.v	/^    wire [`SINGLE_WORD] combination [2:0];$/;"	n
compare	Main/PrimaryExceptionProcessor.v	/^    reg [`SINGLE_WORD]  compare;$/;"	r
compressedAll_up	Main/IF/BranchSelectCheck.v	/^            compressedAll_up [3:0];$/;"	n
compressedDest_up	Main/IF/BranchSelectCheck.v	/^    wire    [`SINGLE_WORD]      compressedDest_up           [3:0];$/;"	n
compressedInst_up	Main/IF/BranchSelectCheck.v	/^    wire    [`SINGLE_WORD]      compressedInst_up           [3:0];$/;"	n
compressedPCSeq	Main/IF/BranchSelectCheck.v	/^    wire    [1:0]   compressedPCSeq;$/;"	n
compressedTake_up	Main/IF/BranchSelectCheck.v	/^    wire    [0:0]               compressedTake_up           [3:0];$/;"	n
compressedcheckPoint_up	Main/IF/BranchSelectCheck.v	/^    wire    [`ALL_CHECKPOINT]   compressedcheckPoint_up     [3:0];$/;"	n
count	Main/PrimaryExceptionProcessor.v	/^    reg     [`SINGLE_WORD]      count;$/;"	r
countOne	Main/EXEDOWN.v	/^    wire countOne   = ID_down_mduOperator_r_i[`MDU_CLO];$/;"	n
cout	Main/components/EXE/adder.v	/^    wire cin,cout,top_a,top_b;$/;"	n
crFlag	Main/components/EXE/ALU.v	/^    wire        crFlag;$/;"	n
crFlag	Main/components/EXE/MyMultiplier.v	/^    wire                    crFlag              ;$/;"	n
current_complier	.vim/compiler/vxlinter.vim	/^let current_complier = "verilog"$/;"	v
dataConflict	Main/components/ID/Arbitrator.v	/^    wire    dataConflict = isNeedRd[0] && ((isNeedRs[1] && (ReadRs[1]==writeRd[0]))||(isNeedRt[1] && (ReadRt[1]==writeRd[0])));$/;"	n
data_a	Main/components/EXE/adder.v	/^    wire [BUS-1:0] add_sub_res,data_a,data_b;$/;"	n
data_asid_i	Main.v	/^	wire	[7:0]	data_asid_o;	wire	[7:0]	data_asid_i;$/;"	n
data_asid_o	Main.v	/^	wire	[7:0]	data_asid_o;	wire	[7:0]	data_asid_i;$/;"	n
data_b	Main/components/EXE/adder.v	/^    wire [BUS-1:0] add_sub_res,data_a,data_b;$/;"	n
data_c_i	Main.v	/^	wire	[2:0]	data_c_o;	wire	[2:0]	data_c_i;$/;"	n
data_c_o	Main.v	/^	wire	[2:0]	data_c_o;	wire	[2:0]	data_c_i;$/;"	n
data_d_i	Main.v	/^	wire	[0:0]	data_d_o;	wire	[0:0]	data_d_i;$/;"	n
data_d_o	Main.v	/^	wire	[0:0]	data_d_o;	wire	[0:0]	data_d_i;$/;"	n
data_hit_i	Main.v	/^	wire	[0:0]	data_hit_o;	wire	[0:0]	data_hit_i;$/;"	n
data_hit_o	Main.v	/^	wire	[0:0]	data_hit_o;	wire	[0:0]	data_hit_i;$/;"	n
data_index_i	Main.v	/^	wire	[4:0]	data_index_o;	wire	[4:0]	data_index_i;$/;"	n
data_index_o	Main.v	/^	wire	[4:0]	data_index_o;	wire	[4:0]	data_index_i;$/;"	n
data_oddPage_i	Main.v	/^	wire	[0:0]	data_oddPage_o;	wire	[0:0]	data_oddPage_i;$/;"	n
data_oddPage_o	Main.v	/^	wire	[0:0]	data_oddPage_o;	wire	[0:0]	data_oddPage_i;$/;"	n
data_pfn_i	Main.v	/^	wire	[19:0]	data_pfn_o;	wire	[19:0]	data_pfn_i;$/;"	n
data_pfn_o	Main.v	/^	wire	[19:0]	data_pfn_o;	wire	[19:0]	data_pfn_i;$/;"	n
data_rdata	Main/WriteBack.v	/^    wire    [`SINGLE_WORD]  lwr_data =  MEM_loadSel_r_i[`LOAD_R3_BIT] ? {MEM_rtData_r_i[31: 8],data_rdata  [31:24]} :$/;"	n
data_tlbReq_i	Main.v	/^	wire	[0:0]	data_tlbReq_o;	wire	[0:0]	data_tlbReq_i;$/;"	n
data_tlbReq_o	Main.v	/^	wire	[0:0]	data_tlbReq_o;	wire	[0:0]	data_tlbReq_i;$/;"	n
data_v_i	Main.v	/^	wire	[0:0]	data_v_o;	wire	[0:0]	data_v_i;$/;"	n
data_v_o	Main.v	/^	wire	[0:0]	data_v_o;	wire	[0:0]	data_v_i;$/;"	n
data_vpn2_i	Main.v	/^	wire	[18:0]	data_vpn2_o;	wire	[18:0]	data_vpn2_i;$/;"	n
data_vpn2_o	Main.v	/^	wire	[18:0]	data_vpn2_o;	wire	[18:0]	data_vpn2_i;$/;"	n
decorderExcCode_p	Main/ID.v	/^    wire [2*`EXCCODE]                  decorderExcCode_p        ;$/;"	n
decorderExcCode_up	Main/ID.v	/^    wire    [`EXCCODE]  decorderExcCode_up      [1:0];$/;"	n
decorderExcCode_up	Main/components/ID/Decorder.v	/^    wire    [`EXCCODE]          decorderExcCode_up  [1:0];$/;"	n
decorderException_p	Main/ID.v	/^    wire [1:0]                         decorderException_p      ;$/;"	n
decorderException_up	Main/ID.v	/^    wire    [0:0]       decorderException_up    [1:0];$/;"	n
decorderException_up	Main/components/ID/Decorder.v	/^    wire    [0:0]               decorderException_up[1:0];$/;"	n
destination	Main/IF/IndirectJumpTargetCache.v	/^    reg [`SINGLE_WORD] destination[3:0];$/;"	r
destination	Main/IF/ReturnAddressStack.v	/^    reg [`SINGLE_WORD] destination [3:0];$/;"	r
diff	Main/components/EXE/try_div_ans.v	/^wire [32:0] diff;$/;"	n
div	Main/components/EXE/div.v	/^module div ($/;"	m
divReq	Main/components/EXE/MultiDivideUnit.v	/^    wire                        divReq                          ;\/\/ unresolved$/;"	n
div_data_ok	Main/components/EXE/MultiDivideUnit.v	/^    wire                        div_data_ok                     ; \/\/ WIRE_NEW$/;"	n
div_oprand_ok	Main/components/EXE/MultiDivideUnit.v	/^    wire                        div_oprand_ok                       ;\/\/ unresolved$/;"	n
divident_i	Main/components/EXE/MultiDivideUnit.v	/^    wire [`SINGLE_WORD]         divident_i                      ;\/\/ unresolved$/;"	n
divisor	Main/components/EXE/Divider.v	/^    reg     [`SINGLE_WORD]      divisor;$/;"	r
divisor	Main/components/EXE/div.v	/^reg [31:0] divisor,quotient_iter;$/;"	r
divisor_i	Main/components/EXE/MultiDivideUnit.v	/^    wire [`SINGLE_WORD]         divisor_i                       ;\/\/ unresolved$/;"	n
double_write	Main/components/ID/RegFile.v	/^    wire double_write = &writeEnable && !WAW_coflict;$/;"	n
doutb	Main/components/MyRAM.v	/^    wire [MY_DATA_WIDTH-1:0]    doutb;$/;"	n
down_oprand0_sel	Main/ID.v	/^    wire    [`OPRAND_SEL]   down_oprand0_sel;$/;"	n
down_oprand1_sel	Main/ID.v	/^    wire    [`OPRAND_SEL]   down_oprand1_sel;$/;"	n
dual_kindConflict	Main/components/ID/Arbitrator.v	/^    wire    dual_kindConflict   = kindConflict0 || kindConflict1;$/;"	n
enough	Main/components/ID/InstQueue.v	/^    wire                        enough                          ;\/\/ unresolved$/;"	n
entryHi	Main/PrimaryExceptionProcessor.v	/^    reg     [`SINGLE_WORD]  entryHi;$/;"	r
entryLo0	Main/PrimaryExceptionProcessor.v	/^    reg     [`SINGLE_WORD]  entryLo0;$/;"	r
entryLo1	Main/PrimaryExceptionProcessor.v	/^    reg     [`SINGLE_WORD]  entryLo1;$/;"	r
epc	Main/PrimaryExceptionProcessor.v	/^    reg     [`SINGLE_WORD]      epc;$/;"	r
equals	Main/EXEDOWN.v	/^    wire equals = !(|aluso);$/;"	n
eret	Main/PrimaryExceptionProcessor.v	/^    wire                    eret;           \/\/ 退出指令$/;"	n
errorPredict	Main/EXEUP.v	/^    wire   errorPredict = ((EXE_up_corrTake_o != ID_up_predTake_r_i) ||((EXE_up_corrDest_o!=ID_up_predDest_r_i) && EXE_up_corrTake_o && ID_up_predTake_r_i));$/;"	n
exceptBadVAddr	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]  exceptBadVAddr; \/\/ 错误的虚地址,访存不对齐和tlb错误 TODO$/;"	n
exceptPC	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]  exceptPC;       \/\/ 异常指令的PC TODO$/;"	n
exceptionClean	Main/EXEUP.v	/^    wire exceptionClean = CP0_exceptSeg_w_i[`EXCEP_PREMEM] && CP0_excOccur_w_i;$/;"	n
exceptionRisk_up	Main/components/ID/Decorder.v	/^    wire    [0:0]               exceptionRisk_up    [1:0];$/;"	n
exceptionSel_up	Main/components/ID/Decorder.v	/^    wire    [`EXCEPRION_SEL]    exceptionSel_up     [1:0];$/;"	n
extendAction_p	Main/ID.v	/^    wire [2*`EXTEND_ACTION]            extendAction_p           ;$/;"	n
extendAction_up	Main/ID.v	/^    wire [`EXTEND_ACTION]              extendAction_up [1:0]    ;$/;"	n
extendAction_up	Main/components/ID/Decorder.v	/^    wire    [`EXTEND_ACTION]    extendAction_up     [1:0];$/;"	n
extendedRes_up	Main/ID.v	/^    wire [`SINGLE_WORD]                extendedRes_up  [1:0]    ;$/;"	n
falsep	Main/EXEUP.v	/^    reg [63:0] truep,falsep;$/;"	r
first	Main/components/EXE/div.v	/^wire first;$/;"	n
firstBranchInst	Main/IF/BranchSelectCheck.v	/^    wire [`SINGLE_WORD] firstBranchInst;$/;"	n
firstPC	Main/IF/PCGenerator.v	/^    wire [`SINGLE_WORD]                       firstPC                         ;$/;"	n
firstValidBit	Main/IF/BranchSelectCheck.v	/^    wire [`INST_NUM]            firstValidBit                   ;$/;"	n
firstValidBit	Main/IF/BranchTargetBuffer.v	/^    wire [`INST_NUM]            firstValidBit                   ;$/;"	n
forwardReady	Main/ID.v	/^    wire [`FORWARD_MODE]    forwardReady    [1:0][1:0];     $/;"	n
forwardSel	Main/ID.v	/^    wire [`FORWARD_MODE]    forwardSel      [1:0][1:0];     $/;"	n
forwardWhich	Main/ID.v	/^    wire [`FORWARD_MODE]    forwardWhich    [1:0][1:0];     $/;"	n
fourthPC	Main/IF/PCGenerator.v	/^    wire [`SINGLE_WORD]                       fourthPC                        ;$/;"	n
had_branch_flush	Main/SecondBranchAmend.v	/^    reg had_branch_flush;$/;"	r
hasDangerous	Main/ID.v	/^    wire hasDangerous = EXE_down_hasDangerous_w_i || MEM_hasDangerous_w_i || PREMEM_hasDangerous_w_i || WB_hasDangerous_w_i;$/;"	n
hasData	Main/EXEDOWN.v	/^    reg hasData;$/;"	r
hasData	Main/EXEUP.v	/^    reg hasData;$/;"	r
hasData	Main/IF/FirstCacheTrace.v	/^    reg hasData;$/;"	r
hasData	Main/IF/SecondCacheTrace.v	/^    reg hasData;$/;"	r
hasData	Main/MEM.v	/^    reg hasData;$/;"	r
hasData	Main/PREMEM.v	/^    reg hasData;$/;"	r
hasData	Main/PrimaryBranchAmend.v	/^    reg hasData;$/;"	r
hasData	Main/REEXE.v	/^    reg hasData;$/;"	r
hasData	Main/SecondBranchAmend.v	/^    reg hasData;$/;"	r
hasData	Main/WriteBack.v	/^    reg hasData;$/;"	r
hasException	Main/PrimaryExceptionProcessor.v	/^    wire                    hasException;$/;"	n
hasForward	Main/components/ID/RegFile.v	/^    wire    [1:0]           hasForward      [3:0];$/;"	n
hasTrap	Main/EXEDOWN.v	/^    wire hasTrap =  ID_down_trapKind_r_i[`TRAP_EQUAL]      ? equals    :$/;"	n
has_int	Main/MEM.v	/^    wire has_int =  ((CP0_Cause_w_i[`IP7:`IP0] & CP0_Status_w_i[`IM7:`IM0])!=8'h00) && $/;"	n
have_data	Main/components/EXE/Divider.v	/^    reg                         have_data;$/;"	r
have_data	Main/components/EXE/div.v	/^reg  have_data;$/;"	r
head	Main/components/ID/InstQueue.v	/^    reg [`IQ_POINT]  head;$/;"	r
input	Main/components/MyRAM.v	/^    input                           wen,$/;"	p
input	Main/components/MyRAM.v	/^    input  [$clog2(MY_NUMBER)-1:0]  wAddr,$/;"	p
inst	Main/IF/components/TakeDestDecorder.v	/^    wire [`SINGLE_WORD] inst [3:0];$/;"	n
inst	Main/components/ID/Arbitrator.v	/^    wire    [`SINGLE_WORD]  inst    [1:0];$/;"	n
inst	Main/components/ID/Decorder.v	/^    wire [`SINGLE_WORD] inst [1:0];$/;"	n
instMode	Main/components/ID/Arbitrator.v	/^    wire    [1:0]           instMode    [1:0];$/;"	n
instOffset	Main/ID.v	/^    wire [`SINGLE_WORD]                instOffset               ;$/;"	n
instSelect	Main/IF/components/Compressor.v	/^    wire    [`INST_NUM] instSelect  [`INST_NUM];$/;"	n
instSelect_p	Main/IF/BranchSelectCheck.v	/^    wire    [4*`INST_NUM]   instSelect_p;$/;"	n
instSelect_up	Main/IF/BranchSelectCheck.v	/^    wire    [`INST_NUM]     instSelect_up   [`INST_NUM];$/;"	n
inst_asid_i	Main.v	/^	wire	[7:0]	inst_asid_o;	wire	[7:0]	inst_asid_i;$/;"	n
inst_asid_o	Main.v	/^	wire	[7:0]	inst_asid_o;	wire	[7:0]	inst_asid_i;$/;"	n
inst_c_i	Main.v	/^	wire	[2:0]	inst_c_o;	wire	[2:0]	inst_c_i;$/;"	n
inst_c_o	Main.v	/^	wire	[2:0]	inst_c_o;	wire	[2:0]	inst_c_i;$/;"	n
inst_d_i	Main.v	/^	wire	[0:0]	inst_d_o;	wire	[0:0]	inst_d_i;$/;"	n
inst_d_o	Main.v	/^	wire	[0:0]	inst_d_o;	wire	[0:0]	inst_d_i;$/;"	n
inst_hit_i	Main.v	/^	wire	[0:0]	inst_hit_o;	wire	[0:0]	inst_hit_i;$/;"	n
inst_hit_o	Main.v	/^	wire	[0:0]	inst_hit_o;	wire	[0:0]	inst_hit_i;$/;"	n
inst_index_i	Main.v	/^	wire	[4:0]	inst_index_o;	wire	[4:0]	inst_index_i;$/;"	n
inst_index_o	Main.v	/^	wire	[4:0]	inst_index_o;	wire	[4:0]	inst_index_i;$/;"	n
inst_oddPage_i	Main.v	/^	wire	[0:0]	inst_oddPage_o;	wire	[0:0]	inst_oddPage_i;$/;"	n
inst_oddPage_o	Main.v	/^	wire	[0:0]	inst_oddPage_o;	wire	[0:0]	inst_oddPage_i;$/;"	n
inst_p	Main/IF/BranchSelectCheck.v	/^    wire    [4*`SINGLE_WORD]   inst_p    ;$/;"	n
inst_pfn_i	Main.v	/^	wire	[19:0]	inst_pfn_o;	wire	[19:0]	inst_pfn_i;$/;"	n
inst_pfn_o	Main.v	/^	wire	[19:0]	inst_pfn_o;	wire	[19:0]	inst_pfn_i;$/;"	n
inst_tlbReq_i	Main.v	/^	wire	[0:0]	inst_tlbReq_o;	wire	[0:0]	inst_tlbReq_i;$/;"	n
inst_tlbReq_o	Main.v	/^	wire	[0:0]	inst_tlbReq_o;	wire	[0:0]	inst_tlbReq_i;$/;"	n
inst_up	Main/IF/BranchSelectCheck.v	/^    wire    [`SINGLE_WORD]     inst_up   [3:0];$/;"	n
inst_v_i	Main.v	/^	wire	[0:0]	inst_v_o;	wire	[0:0]	inst_v_i;$/;"	n
inst_v_o	Main.v	/^	wire	[0:0]	inst_v_o;	wire	[0:0]	inst_v_i;$/;"	n
inst_vpn2_i	Main.v	/^	wire	[18:0]	inst_vpn2_o;	wire	[18:0]	inst_vpn2_i;$/;"	n
inst_vpn2_o	Main.v	/^	wire	[18:0]	inst_vpn2_o;	wire	[18:0]	inst_vpn2_i;$/;"	n
isAccepted	Main/EXEDOWN.v	/^    reg                 isAccepted;     \/\/ 该指令是否被MDU接受$/;"	r
isAccumlate	Main/components/EXE/MultiDivideUnit.v	/^    wire                        isAccumlate                     ;\/\/ unresolved$/;"	n
isAluInst	Main/EXEDOWN.v	/^    wire    isAluInst = !ID_down_memReq_r_i &&$/;"	n
isByte	Main/EXEDOWN.v	/^    wire isByte   = ID_down_loadMode_r_i[`LOAD_MODE_LB]  || $/;"	n
isDelaySlot	Main/PrimaryExceptionProcessor.v	/^    wire                    isDelaySlot;$/;"	n
isEnableSame	Main/IF/BranchSelectCheck.v	/^    wire                        isEnableSame                    ;$/;"	n
isExceptionInNormal	Main/PrimaryExceptionProcessor.v	/^    wire    isExceptionInNormal = (hasException && !Status[`EXL]) ? `TRUE : `FALSE;$/;"	n
isFirstBranch	Main/IF/components/BranchFourToOne.v	/^    wire    [3:0]   isFirstBranch   ;$/;"	n
isHalf	Main/EXEDOWN.v	/^    wire isHalf   = ID_down_loadMode_r_i[`LOAD_MODE_LH]  || $/;"	n
isJRInst	Main/IF/components/TakeDestDecorder.v	/^    wire [0:0]          isJRInst    [3:0];$/;"	n
isKseg0	Main/DataMemoryManagementUnit.v	/^    reg                         isKseg0                         ;$/;"	r
isKseg0	Main/IF/MemoryManagementUnit.v	/^    reg                         isKseg0                         ;$/;"	r
isKseg1	Main/DataMemoryManagementUnit.v	/^    reg                         isKseg1                         ;$/;"	r
isKseg1	Main/IF/MemoryManagementUnit.v	/^    reg                         isKseg1                         ;$/;"	r
isLLinst	Main/PREMEM.v	/^    wire isLLinst = EXE_down_memReq_r_i && !EXE_down_memWR_r_i && EXE_down_memAtom_r_i; $/;"	n
isLeft	Main/EXEDOWN.v	/^    wire isLeft   = ID_down_loadMode_r_i[`LOAD_MODE_LWL] ||$/;"	n
isLink	Main/EXEUP.v	/^    wire isLink = ID_up_repairAction_r_i[`NEED_REPAIR] && |(ID_up_writeNum_r_i);$/;"	n
isMduWrite	Main/EXEDOWN.v	/^    wire isMduWrite = |ID_down_mduOperator_r_i[6:0] || (|ID_down_writeHiLo_r_i);$/;"	n
isNeedRd	Main/components/ID/Arbitrator.v	/^    wire                    isNeedRd    [1:0];  \/\/ 指令是否存在写寄存器的需求$/;"	n
isNeedRs	Main/components/ID/Arbitrator.v	/^    wire                    isNeedRs    [1:0];  \/\/ 指令是否存在读寄存器的需求$/;"	n
isNeedRt	Main/components/ID/Arbitrator.v	/^    wire                    isNeedRt    [1:0];  \/\/ 指令是否存在读寄存器的需求$/;"	n
isOther	Main/DataMemoryManagementUnit.v	/^    reg                         isOther                         ;$/;"	r
isOther	Main/IF/MemoryManagementUnit.v	/^    reg                         isOther                         ;$/;"	r
isPredictSame	Main/IF/BranchSelectCheck.v	/^    wire                        isPredictSame                   ;$/;"	n
isRight	Main/EXEDOWN.v	/^    wire isRight  = ID_down_loadMode_r_i[`LOAD_MODE_LWR] ||$/;"	n
isRsFull	Main/IF/components/RepairDecorder.v	/^    wire                        isRsFull                        ;$/;"	n
isRsFull	Main/IF/components/TakeDestDecorder.v	/^    wire [0:0]          isRsFull    [3:0];$/;"	n
isSCinst	Main/PREMEM.v	/^    wire isSCinst = EXE_down_memReq_r_i && EXE_down_memWR_r_i && EXE_down_memAtom_r_i; $/;"	n
isSignedDiv	Main/components/EXE/MultiDivideUnit.v	/^    wire                        isSignedDiv                     ;\/\/ unresolved$/;"	n
isSignedMul	Main/components/EXE/MultiDivideUnit.v	/^    wire                        isSignedMul                     ;\/\/ unresolved$/;"	n
kindConflict0	Main/components/ID/Arbitrator.v	/^    wire    kindConflict0   = !(|(instMode[0] & `AT_SLOT_ZERO)) || IQ_hasException_up[0];$/;"	n
kindConflict1	Main/components/ID/Arbitrator.v	/^    wire    kindConflict1   = !(|(instMode[1] & `AT_SLOT_ONE));$/;"	n
kseg0UnCache	Main/DataMemoryManagementUnit.v	/^    reg                         kseg0UnCache                    ;$/;"	r
kseg0UnCache	Main/IF/MemoryManagementUnit.v	/^    reg                         kseg0UnCache                    ;$/;"	r
kseg1UnCache	Main/DataMemoryManagementUnit.v	/^    wire                        kseg1UnCache                    ;$/;"	n
kseg1UnCache	Main/IF/MemoryManagementUnit.v	/^    wire                        kseg1UnCache                    ;$/;"	n
lastBase	Main/IF/PCRegister.v	/^    wire [`SINGLE_WORD]         lastBase                        ;\/*}}}*\/$/;"	n
lb_data	Main/WriteBack.v	/^    wire [`SINGLE_WORD] lb_data =   {{24{lb_sign}},{MEM_alignCheck_r_i==2'b00 ? {data_rdata[7:0]} :$/;"	n
lb_sel	Main/WriteBack.v	/^    wire lb_sel = MEM_loadSel_r_i[`LOAD_LB_BIT] || MEM_loadSel_r_i[`LOAD_LBU_BIT];$/;"	n
lb_sign	Main/WriteBack.v	/^    wire lb_sign = (MEM_alignCheck_r_i==2'b00 ? data_rdata[7] :$/;"	n
lh_data	Main/WriteBack.v	/^    wire [`SINGLE_WORD] lh_data =   {{16{lh_sign}},{MEM_alignCheck_r_i==2'b00 ? {data_rdata[15:0]}  :$/;"	n
lh_sel	Main/WriteBack.v	/^    wire lh_sel = MEM_loadSel_r_i[`LOAD_LH_BIT] || MEM_loadSel_r_i[`LOAD_LHU_BIT];$/;"	n
lh_sign	Main/WriteBack.v	/^    wire lh_sign = (MEM_alignCheck_r_i==2'b00 ? data_rdata[15] : data_rdata[31]) && MEM_loadSel_r_i[`LOAD_LH_BIT];$/;"	n
link	Main/components/ID/Arbitrator.v	/^            wire link;              \/\/ 输出到的目的寄存器是31，优先级较高$/;"	n
loadException	Main/DataMemoryManagementUnit.v	/^    wire    loadException       =   mapWR  && (!data_hit_i || !data_v_i);$/;"	n
loadException	Main/EXEDOWN.v	/^    wire loadException  = (((ID_down_loadMode_r_i[`LOAD_MODE_LH]||ID_down_loadMode_r_i[`LOAD_MODE_LHU]) && alignCheck[0]!=1'b0) || $/;"	n
lui_op	Main/components/EXE/ALU.v	/^    wire lui_op = aluop[`ALU_LUI];$/;"	n
lui_res	Main/components/EXE/ALU.v	/^    wire [31:0] and_res,or_res,nor_res,xor_res,sll_res,srl_res,sra_res,lui_res;$/;"	n
lw_data	Main/WriteBack.v	/^    wire    [`SINGLE_WORD]  lw_data  = data_rdata;$/;"	n
lw_sel	Main/WriteBack.v	/^    wire lw_sel = MEM_loadSel_r_i[`LOAD_LW_BIT];$/;"	n
lwl_data	Main/WriteBack.v	/^    wire    [`SINGLE_WORD]  lwl_data =  MEM_loadSel_r_i[`LOAD_L0_BIT] ? {data_rdata  [ 7: 0],MEM_rtData_r_i[23:0 ]} :$/;"	n
lwl_sel	Main/EXEDOWN.v	/^    wire [`LOAD_SEL] lwl_sel =  alignCheck==2'b00 ? `LOAD_SEL_L0 :$/;"	n
lwl_sel	Main/WriteBack.v	/^    wire    lwl_sel = MEM_loadSel_r_i[`LOAD_L0_BIT] || MEM_loadSel_r_i[`LOAD_L1_BIT] || MEM_loadSel_r_i[`LOAD_L2_BIT];$/;"	n
lwr_data	Main/WriteBack.v	/^    wire    [`SINGLE_WORD]  lwr_data =  MEM_loadSel_r_i[`LOAD_R3_BIT] ? {MEM_rtData_r_i[31: 8],data_rdata  [31:24]} :$/;"	n
lwr_sel	Main/EXEDOWN.v	/^    wire [`LOAD_SEL] lwr_sel =  alignCheck==2'b00 ? `LOAD_SEL_LW :$/;"	n
lwr_sel	Main/WriteBack.v	/^    wire    lwr_sel = MEM_loadSel_r_i[`LOAD_R1_BIT] || MEM_loadSel_r_i[`LOAD_R2_BIT] || MEM_loadSel_r_i[`LOAD_R3_BIT];$/;"	n
mapReq	Main/DataMemoryManagementUnit.v	/^    reg     mapReq;$/;"	r
mapWR	Main/DataMemoryManagementUnit.v	/^    reg     mapWR;$/;"	r
mduConflict	Main/EXEDOWN.v	/^    wire mduConflict = isMduWrite && !(isAccepted||MDU_Oprand_ok);$/;"	n
mfc0_addr	Main/PrimaryExceptionProcessor.v	/^    wire [`CP0_POSITION]    mfc0_addr   = MEM_positionCp0_w_i;$/;"	n
minuend	Main/components/EXE/Divider.v	/^    reg     [2*`SINGLE_WORD]    minuend;$/;"	r
minuend	Main/components/EXE/div.v	/^reg [63:0] minuend;$/;"	r
minuend_back	Main/components/EXE/Divider.v	/^    wire    [2*`SINGLE_WORD]    minuend_back;$/;"	n
minuend_back	Main/components/EXE/div.v	/^wire  [63:0]  minuend_back;$/;"	n
minuend_back_r	Main/components/EXE/div.v	/^reg [31:0] minuend_back_r;$/;"	r
minuend_new	Main/components/EXE/try_div_ans.v	/^wire [63:0] minuend_new;$/;"	n
modifyException	Main/DataMemoryManagementUnit.v	/^    wire    modifyException     =   data_hit_i && data_v_i && !data_d_i && !mapWR;$/;"	n
mtc0_addr	Main/PrimaryExceptionProcessor.v	/^    wire [`CP0_POSITION]    mtc0_addr   = MEM_positionCp0_w_i;$/;"	n
mtc0_wdata	Main/PrimaryExceptionProcessor.v	/^    wire [`SINGLE_WORD]     mtc0_wdata  = MEM_writeData_w_i;$/;"	n
mtc0_wen	Main/PrimaryExceptionProcessor.v	/^    wire                    mtc0_wen    = MEM_writeCp0_w_i;$/;"	n
mulData_ok	Main/components/EXE/MultiDivideUnit.v	/^    wire                        mulData_ok                      ;$/;"	n
mulOprand_ok	Main/components/EXE/MultiDivideUnit.v	/^    wire                        mulOprand_ok                    ;$/;"	n
mulOprand_up	Main/components/EXE/MyMultiplier.v	/^    wire [`SINGLE_WORD]     mulOprand_up    [3:0];$/;"	n
mulReq	Main/components/EXE/MultiDivideUnit.v	/^    wire                        mulReq                          ;$/;"	n
mulRes	Main/components/EXE/MultiDivideUnit.v	/^    wire [2*`SINGLE_WORD]       mulRes                          ;$/;"	n
mulrReq	Main/EXEDOWN.v	/^    wire                        mulrReq                         ;\/\/ unresolved$/;"	n
mulr_conflict	Main/EXEDOWN.v	/^    wire mulr_conflict = mulrReq && !mulr_data_ok;$/;"	n
mulr_data_ok	Main/EXEDOWN.v	/^    wire                        mulr_data_ok                    ;$/;"	n
multOnly_data	Main/components/EXE/MyMultiplier.v	/^    wire [2*`SINGLE_WORD]   multOnly_data = res[63:0];$/;"	n
multiRes	Main/components/EXE/MyMultiplier.v	/^    reg [`SINGLE_WORD]  multiRes;$/;"	r
myAsset	Main/IF/FirstCacheTrace.v	/^    wire myAsset = !(inst_req && inst_index_ok && !SCT_allowin_w_i);$/;"	n
needCancel	Main/IF/FirstCacheTrace.v	/^    wire needCancel = (BSC_needCancel_w_i || CP0_excOccur_w_i || SBA_flush_w_i);$/;"	n
needCancel	Main/IF/SecondCacheTrace.v	/^    wire needCancel = (BSC_needCancel_w_i || CP0_excOccur_w_i || SBA_flush_w_i);$/;"	n
needClear	Main/EXEDOWN.v	/^    wire            needClear;$/;"	n
needClear	Main/EXEUP.v	/^    wire            needClear;$/;"	n
needClear	Main/MEM.v	/^    wire            needClear;$/;"	n
needClear	Main/PREMEM.v	/^    wire            needClear;$/;"	n
needClear	Main/PrimaryBranchAmend.v	/^    wire            needClear;$/;"	n
needClear	Main/REEXE.v	/^    wire            needClear;$/;"	n
needClear	Main/SecondBranchAmend.v	/^    wire            needClear;$/;"	n
needClear	Main/WriteBack.v	/^    wire            needClear;$/;"	n
needClear	Main/components/ID/InstQueue.v	/^    wire    needClear = SBA_flush_w_i || CP0_excOccur_w_i;$/;"	n
needDelaySlot	Main/IF/BranchSelectCheck.v	/^    wire    needDelaySlot;$/;"	n
needDelaySlot	Main/IF/BranchTargetBuffer.v	/^    wire                        needDelaySlot                   ; \/\/ WIRE_NEW$/;"	n
needFlush	Main/EXEDOWN.v	/^    wire needFlush = CP0_excOccur_w_i || SBA_flush_w_i;$/;"	n
needFlush	Main/EXEUP.v	/^    wire needFlush = SBA_flush_w_i || exceptionClean;$/;"	n
needFlush	Main/MEM.v	/^    wire needFlush = CP0_exceptSeg_w_i[`EXCEP_MEM] && CP0_excOccur_w_i ;$/;"	n
needFlush	Main/PREMEM.v	/^    wire needFlush = CP0_exceptSeg_w_i[`EXCEP_PREMEM] && CP0_excOccur_w_i;$/;"	n
needFlush	Main/PrimaryBranchAmend.v	/^    wire needFlush = 1'b0;$/;"	n
needFlush	Main/REEXE.v	/^    wire needFlush = 1'b0;$/;"	n
needFlush	Main/SecondBranchAmend.v	/^    wire needFlush = CP0_exceptSeg_w_i[`EXCEP_MEM] && CP0_excOccur_w_i;$/;"	n
needFlush	Main/WriteBack.v	/^    wire needFlush = 1'b0;$/;"	n
needInvalid	Main/ID.v	/^    wire    needInvalid = SBA_flush_w_i || CP0_excOccur_w_i;$/;"	n
needRead	Main/ID.v	/^    wire    [0:0]           needRead    [1:0][1:0]; \/\/ 第一个下标代表流水线，第二个代表rs,rt$/;"	n
needUpdata	Main/EXEDOWN.v	/^    wire            needUpdata;$/;"	n
needUpdata	Main/EXEUP.v	/^    wire            needUpdata;$/;"	n
needUpdata	Main/MEM.v	/^    wire            needUpdata;$/;"	n
needUpdata	Main/PREMEM.v	/^    wire            needUpdata;$/;"	n
needUpdata	Main/PrimaryBranchAmend.v	/^    wire            needUpdata;$/;"	n
needUpdata	Main/REEXE.v	/^    wire            needUpdata;$/;"	n
needUpdata	Main/SecondBranchAmend.v	/^    wire            needUpdata;$/;"	n
needUpdata	Main/WriteBack.v	/^    wire            needUpdata;$/;"	n
nextAlignedPC	Main/IF/PCRegister.v	/^    wire [`SINGLE_WORD]         nextAlignedPC                   ;$/;"	n
nextNotAlignedPC	Main/IF/PCRegister.v	/^    reg  [`SINGLE_WORD]         nextNotAlignedPC                ;$/;"	r
nextNumber	Main/components/ID/InstQueue.v	/^    wire    [`IQ_POINT] nextNumber = IQ_number_w + IF_supplyNum - ID_upDateMode_i[0] - ID_upDateMode_i[1];$/;"	n
nextVAddr_i	Main/IF/BranchTargetBuffer.v	/^    wire [31:0]                 nextVAddr_i                     ;$/;"	n
nonBlockMark	Main/PrimaryExceptionProcessor.v	/^    wire                    nonBlockMark;$/;"	n
nor_op	Main/components/EXE/ALU.v	/^    wire nor_op = aluop[`ALU_NOR];$/;"	n
nor_res	Main/components/EXE/ALU.v	/^    wire [31:0] and_res,or_res,nor_res,xor_res,sll_res,srl_res,sra_res,lui_res;$/;"	n
notZero	Main/ID.v	/^                wire   notZero = |readNum[i][j];$/;"	n
not_load	Main/WriteBack.v	/^    wire    not_load = !MEM_memReq_r_i;$/;"	n
now_RepairAction	Main/IF/BranchSelectCheck.v	/^    wire [`REPAIR_ACTION]     now_RepairAction                  ;$/;"	n
now_RepairAction_m	Main/IF/components/RepairDecorder.v	/^    wire	[`REPAIR_ACTION]    now_RepairAction_m;$/;"	n
number	Main/IF/BranchTargetBuffer.v	/^    wire    [1:0]           number          [3:0];$/;"	n
number	Main/components/ID/InstQueue.v	/^    wire    [`IQ_NUMBER_WID]            number [1:0];$/;"	n
offset	Main/IF/BranchSelectCheck.v	/^    wire [1:0]                  offset                          ;$/;"	n
ok_toWrite	Main/components/ID/InstQueue.v	/^    wire ok_toWrite = rst && IF_valid_i;$/;"	n
ok_to_change	Main/ID.v	/^    wire ok_to_change = !(|AB_issueMode_w) || (EXE_down_allowin_w_i && !stop);$/;"	n
ok_to_change	Main/IF/PCRegister.v	/^    wire    ok_to_change = (inst_req && inst_index_ok) ||   \/\/ 请求被接受$/;"	n
ok_to_do_tlbInst	Main/PREMEM.v	/^    wire   ok_to_do_tlbInst  = !EXE_down_exceptionRisk_r_i && !MEM_hasRisk_w_i && EXE_down_isTLBInst_r_i;$/;"	n
oprand	Main/components/EXE/MyMultiplier.v	/^    wire [1+`SINGLE_WORD]   oprand          [1:0];$/;"	n
oprand0_sel_up	Main/components/ID/Decorder.v	/^    wire    [`OPRAND_SEL]       oprand0_sel_up      [1:0];$/;"	n
oprand1_sel_up	Main/components/ID/Decorder.v	/^    wire    [`OPRAND_SEL]       oprand1_sel_up      [1:0];$/;"	n
oprand_sel	Main/ID.v	/^    wire    [`OPRAND_SEL]   oprand_sel  [1:0][1:0];$/;"	n
oprand_up	Main/components/EXE/MultiDivideUnit.v	/^    wire [`SINGLE_WORD]         oprand_up   [3:0]               ;$/;"	n
or_op	Main/components/EXE/ALU.v	/^    wire or_op  = aluop[`ALU_OR ];$/;"	n
or_res	Main/components/EXE/ALU.v	/^    wire [31:0] and_res,or_res,nor_res,xor_res,sll_res,srl_res,sra_res,lui_res;$/;"	n
otherUnCache	Main/DataMemoryManagementUnit.v	/^    wire                        otherUnCache                    ;$/;"	n
otherUnCache	Main/IF/MemoryManagementUnit.v	/^    wire                        otherUnCache                    ;$/;"	n
output	Main/components/MyRAM.v	/^    output [MY_DATA_WIDTH-1:0]      rdata$/;"	p
overflow	Main/EXEDOWN.v	/^    wire                        overflow                        ;$/;"	n
overflow	Main/EXEUP.v	/^    wire                        overflow                        ;$/;"	n
overflow	Main/components/EXE/MyMultiplier.v	/^    wire                            overflow    ;$/;"	n
packedInfo	Main/components/ID/InstQueue.v	/^    wire    [`IQ_LENTH] packedInfo  [3:0];$/;"	n
parameter	Main/components/MyRAM.v	/^    parameter MY_DATA_WIDTH = 64$/;"	c
partialDelaySlot	Main/ID.v	/^    wire   [`SINGLE_WORD]   partialDelaySlot = extendAction_up[0][`ZERO_EXTEND_INDEX] ? {AB_VAddr_up[0][31:28],28'b0} : (AB_VAddr_up[0] + 3'd4);$/;"	n
position	Main/EXEDOWN.v	/^    reg     [4:0]   position;$/;"	r
position	Main/IF/BranchSelectCheck.v	/^    wire [1:0]                  position                        ;$/;"	n
position	Main/IF/PCRegister.v	/^    wire [3:2]                  position                        ;$/;"	n
pre_complete	Main/components/EXE/Divider.v	/^    wire                        pre_complete;$/;"	n
pre_complete	Main/components/EXE/div.v	/^wire pre_complete;$/;"	n
pre_complete_r	Main/components/EXE/div.v	/^reg pre_complete_r;$/;"	r
pre_valid	Main/PREMEM.v	/^    wire pre_valid = EXE_down_valid_w_i && !SBA_flush_w_i;$/;"	n
pre_valid	Main/SecondBranchAmend.v	/^    wire pre_valid = EXE_up_valid_w_i && !SBA_flush_w_o;$/;"	n
predDest	Main/IF/components/BranchFourToOne.v	/^    wire    [`SINGLE_WORD]   predDest        [3:0];$/;"	n
predDest_up	Main/IF/BranchTargetBuffer.v	/^    wire    [`SINGLE_WORD]  predDest_up     [3:0];$/;"	n
predTake	Main/IF/components/BranchFourToOne.v	/^    wire    [0:0]   predTake        [3:0];$/;"	n
predictedTake	Main/IF/PatternHistoryTable.v	/^    reg [0:0] predictedTake[3:0];$/;"	r
queue	Main/components/ID/InstQueue.v	/^    reg [`IQ_LENTH] queue [`IQ_CAPABILITY-1:0];$/;"	r
quotient_iter	Main/components/EXE/Divider.v	/^    reg     [`SINGLE_WORD]      quotient_iter;$/;"	r
quotient_iter	Main/components/EXE/div.v	/^reg [31:0] divisor,quotient_iter;$/;"	r
quotient_o	Main/components/EXE/MultiDivideUnit.v	/^    wire [`SINGLE_WORD]         quotient_o                      ;$/;"	n
quotient_sign	Main/components/EXE/Divider.v	/^    wire                        quotient_sign;$/;"	n
quotient_sign	Main/components/EXE/div.v	/^wire reminder_sign,quotient_sign;$/;"	n
quotient_sign_r	Main/components/EXE/Divider.v	/^    reg                         quotient_sign_r;$/;"	r
quotient_sign_r	Main/components/EXE/div.v	/^reg reminder_sign_r,quotient_sign_r;$/;"	r
quotient_temp	Main/components/EXE/Divider.v	/^    wire    [`SINGLE_WORD]      quotient_temp;$/;"	n
quotient_temp	Main/components/EXE/div.v	/^wire  [31:0]  quotient_temp;$/;"	n
quotient_temp_r	Main/components/EXE/div.v	/^reg [31:0] quotient_temp_r;$/;"	r
rAddr	Main/components/MyRAM.v	/^    input  [$clog2(MY_NUMBER)-1:0]  rAddr,$/;"	p
r_asid_i	Main.v	/^	wire	[7:0]	r_asid_o;	wire	[7:0]	r_asid_i;$/;"	n
r_asid_o	Main.v	/^	wire	[7:0]	r_asid_o;	wire	[7:0]	r_asid_i;$/;"	n
r_enbale_i	Main.v	/^	wire	[0:0]	r_enbale_o;	wire	[0:0]	r_enbale_i;$/;"	n
r_enbale_o	Main.v	/^	wire	[0:0]	r_enbale_o;	wire	[0:0]	r_enbale_i;$/;"	n
r_flags0_i	Main.v	/^	wire	[4:0]	r_flags0_o;	wire	[4:0]	r_flags0_i;$/;"	n
r_flags0_o	Main.v	/^	wire	[4:0]	r_flags0_o;	wire	[4:0]	r_flags0_i;$/;"	n
r_flags1_i	Main.v	/^	wire	[4:0]	r_flags1_o;	wire	[4:0]	r_flags1_i;$/;"	n
r_flags1_o	Main.v	/^	wire	[4:0]	r_flags1_o;	wire	[4:0]	r_flags1_i;$/;"	n
r_g_i	Main.v	/^	wire	[0:0]	r_g_o;	wire	[0:0]	r_g_i;$/;"	n
r_g_o	Main.v	/^	wire	[0:0]	r_g_o;	wire	[0:0]	r_g_i;$/;"	n
r_index_i	Main.v	/^	wire	[4:0]	r_index_o;	wire	[4:0]	r_index_i;$/;"	n
r_index_o	Main.v	/^	wire	[4:0]	r_index_o;	wire	[4:0]	r_index_i;$/;"	n
r_mask_i	Main.v	/^	wire	[11:0]	r_mask_o;	wire	[11:0]	r_mask_i;$/;"	n
r_mask_o	Main.v	/^	wire	[11:0]	r_mask_o;	wire	[11:0]	r_mask_i;$/;"	n
r_pfn0_i	Main.v	/^	wire	[19:0]	r_pfn0_o;	wire	[19:0]	r_pfn0_i;$/;"	n
r_pfn0_o	Main.v	/^	wire	[19:0]	r_pfn0_o;	wire	[19:0]	r_pfn0_i;$/;"	n
r_pfn1_i	Main.v	/^	wire	[19:0]	r_pfn1_o;	wire	[19:0]	r_pfn1_i;$/;"	n
r_pfn1_o	Main.v	/^	wire	[19:0]	r_pfn1_o;	wire	[19:0]	r_pfn1_i;$/;"	n
r_vpn2_i	Main.v	/^	wire	[18:0]	r_vpn2_o;	wire	[18:0]	r_vpn2_i;$/;"	n
r_vpn2_o	Main.v	/^	wire	[18:0]	r_vpn2_o;	wire	[18:0]	r_vpn2_i;$/;"	n
readData	Main/components/ID/RegFile.v	/^    wire	[`SINGLE_WORD]  readData        [3:0];$/;"	n
readData_p_o	Main/ID.v	/^    wire [4*`SINGLE_WORD]              readData_p_o             ;$/;"	n
readData_up	Main/EXEDOWN.v	/^    wire        [`SINGLE_WORD]      readData_up     [1:0];$/;"	n
readData_up	Main/EXEUP.v	/^    wire        [`SINGLE_WORD]      readData_up     [1:0];$/;"	n
readNum	Main/ID.v	/^    wire    [`GPR_NUM]      readNum     [1:0][1:0]; \/\/ 第一个下标代表流水线，第二个代表rs,rt$/;"	n
readNum	Main/components/ID/RegFile.v	/^    wire	[`GPR_NUM]  	readNum         [3:0];$/;"	n
ready	Main/EXEDOWN.v	/^    wire ready;$/;"	n
ready	Main/EXEUP.v	/^    wire ready = 1'b1;$/;"	n
ready	Main/MEM.v	/^    wire ready = !PREMEM_memReq_r_i || data_data_ok;$/;"	n
ready	Main/PREMEM.v	/^    wire ready = !(store_conflict || tlb_conflict || cache_noAccept);$/;"	n
ready	Main/PrimaryBranchAmend.v	/^    wire ready = 1'b1;$/;"	n
ready	Main/REEXE.v	/^    wire ready = 1'b1;$/;"	n
ready	Main/SecondBranchAmend.v	/^    wire ready = !(MEM_hasRisk_w_i&&EXE_up_repairAction_r_i[`NEED_REPAIR]);$/;"	n
ready	Main/WriteBack.v	/^    wire ready = 1'b1;$/;"	n
ready_go	Main/IF/FirstCacheTrace.v	/^    wire ready_go = hasData && SCT_allowin_w_i;$/;"	n
reg	Main/DataMemoryManagementUnit.v	/^    output	reg	                            DMMU_TLBPwrite_o,       \/\/ 查询指令，写Index$/;"	p
reg	Main/DataMemoryManagementUnit.v	/^    output	reg	                            DMMU_TLBRwrite_o,       \/\/ 读指令,写大部分TLB寄存器$/;"	p
reg	Main/IF/FirstCacheTrace.v	/^    output	reg		[`INST_NUM]         FCT_originEnable_o,     \/\/ PCR寄存器的使能$/;"	p
reg	Main/IF/FirstCacheTrace.v	/^    output	reg	                        FCT_BTBValidTake_o,$/;"	p
reg	Main/IF/FirstCacheTrace.v	/^    output	reg	                        FCT_hasException_o,$/;"	p
reg	Main/IF/FirstCacheTrace.v	/^    output	reg	                        FCT_isCanceled_o$/;"	p
reg	Main/IF/FirstCacheTrace.v	/^    output	reg	                        FCT_needDelaySlot_o,$/;"	p
reg	Main/IF/FirstCacheTrace.v	/^    output	reg	    [`EXCCODE]          FCT_ExcCode_o,$/;"	p
reg	Main/IF/FirstCacheTrace.v	/^    output	reg	    [`SINGLE_WORD]      FCT_BTBValidDest_o,$/;"	p
reg	Main/IF/FirstCacheTrace.v	/^    output	reg	    [`SINGLE_WORD]      FCT_BTBfifthVAddr_o,$/;"	p
reg	Main/IF/FirstCacheTrace.v	/^    output	reg 	[3:0]               FCT_predTake_p_o,$/;"	p
reg	Main/IF/FirstCacheTrace.v	/^    output	reg 	[4*`SINGLE_WORD]    FCT_predDest_p_o,$/;"	p
reg	Main/IF/FirstCacheTrace.v	/^    output	reg     [`SINGLE_WORD]      FCT_VAddr_o,$/;"	p
reg	Main/IF/FirstCacheTrace.v	/^    output  reg     [`INST_NUM]         FCT_BTBInstEnable_o,    \/\/ 表示BTB读出的4条目标指令那些是需要$/;"	p
reg	Main/IF/PCRegister.v	/^    output	reg 	                PCR_needDelaySlot_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg		[`INST_NUM]     SCT_originEnable_o,     \/\/ PCR寄存器的使能$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg	                        SCT_BTBValidTake_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg	                        SCT_needDelaySlot_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg	                    SCT_hasException_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg	    [`EXCCODE]      SCT_ExcCode_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg	    [`SINGLE_WORD]      SCT_BTBValidDest_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg	    [`SINGLE_WORD]      SCT_BTBfifthVAddr_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg 	[3:0]               SCT_predTake_p_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg 	[4*`SINGLE_WORD]    SCT_predDest_p_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg                     SCT_isRefill_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg     [3:0]                   SCT_PHT_predTake_p_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg     [4*`IJTC_CHECKPOINT]    SCT_IJTC_checkPoint_p_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg     [4*`PHT_CHECKPOINT]     SCT_PHT_checkPoint_p_o$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg     [4*`RAS_CHECKPOINT]     SCT_RAS_checkPoint_p_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg     [4*`SINGLE_WORD]        SCT_IJTC_predDest_p_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg     [4*`SINGLE_WORD]        SCT_RAS_predDest_p_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output	reg     [`SINGLE_WORD]  SCT_VAddr_o,$/;"	p
reg	Main/IF/SecondCacheTrace.v	/^    output  reg     [`INST_NUM]         SCT_BTBInstEnable_o,    \/\/ 表示BTB读出的4条目标指令那些是需要$/;"	p
reg	Main/PrimaryBranchAmend.v	/^    output	reg	    [3:0]           debug_wb_rf_wen0,$/;"	p
reg	Main/PrimaryBranchAmend.v	/^    output	reg	    [`GPR_NUM]      debug_wb_rf_wnum0,$/;"	p
reg	Main/PrimaryBranchAmend.v	/^    output	reg	    [`SINGLE_WORD]  debug_wb_pc0,$/;"	p
reg	Main/PrimaryBranchAmend.v	/^    output	reg	    [`SINGLE_WORD]  debug_wb_rf_wdata0,$/;"	p
reg	Main/WriteBack.v	/^    output	reg	    [3:0]           debug_wb_rf_wen1,$/;"	p
reg	Main/WriteBack.v	/^    output	reg	    [`GPR_NUM]      debug_wb_rf_wnum1,$/;"	p
reg	Main/WriteBack.v	/^    output	reg	    [`SINGLE_WORD]  debug_wb_pc1,$/;"	p
reg	Main/WriteBack.v	/^    output	reg	    [`SINGLE_WORD]  debug_wb_rf_wdata1,$/;"	p
reg	Main/components/EXE/MultiDivideUnit.v	/^    output	reg	                        HiLo_busy,$/;"	p
reg	Main/components/ID/InstQueue.v	/^    output	reg     [`IQ_VALID]                 IQ_supplyValid  ,   \/\/ 可选宏定义三种$/;"	p
regHiLo	Main/EXEDOWN.v	/^    reg [`SINGLE_WORD]  regHiLo [1:0];$/;"	r
regfile	Main/components/ID/RegFile.v	/^    reg     [`SINGLE_WORD]  regfile         [31:1];$/;"	r
reminder_o	Main/components/EXE/MultiDivideUnit.v	/^    wire [`SINGLE_WORD]         reminder_o                      ;$/;"	n
reminder_sign	Main/components/EXE/Divider.v	/^    wire                        reminder_sign;$/;"	n
reminder_sign	Main/components/EXE/div.v	/^wire reminder_sign,quotient_sign;$/;"	n
reminder_sign_r	Main/components/EXE/Divider.v	/^    reg                         reminder_sign_r;$/;"	r
reminder_sign_r	Main/components/EXE/div.v	/^reg reminder_sign_r,quotient_sign_r;$/;"	r
res	Main/components/EXE/MyMultiplier.v	/^    wire [65:0]             res                 ;$/;"	n
saField_up	Main/ID.v	/^    wire    [`SINGLE_WORD]  saField_up  [1:0];$/;"	n
savedCin	Main/components/EXE/MyMultiplier.v	/^    reg                 savedCin;$/;"	r
sb_data	Main/EXEDOWN.v	/^    wire [`SINGLE_WORD] sb_data = {4{updataRegFile_up[1][7:0]}};$/;"	n
scr	Main/EXEDOWN.v	/^    wire [`SINGLE_WORD]         scr         [1:0]               ;$/;"	n
scr	Main/EXEUP.v	/^    wire [`SINGLE_WORD]         scr [1:0]                       ;$/;"	n
secondPC	Main/IF/PCGenerator.v	/^    wire [`SINGLE_WORD]                       secondPC                        ;$/;"	n
selectedInfo	Main/PrimaryExceptionProcessor.v	/^    wire [`ALL_INFO] selectedInfo = !PREMEM_hasRisk_w_i   ? EXE_packedInfo :$/;"	n
seq_dest	Main/IF/BranchTargetBuffer.v	/^    wire [`SINGLE_WORD] seq_dest[3:0];$/;"	n
sh_data	Main/EXEDOWN.v	/^    wire [`SINGLE_WORD] sh_data = {2{updataRegFile_up[1][15:0]}};$/;"	n
single_kindConflict	Main/components/ID/Arbitrator.v	/^    wire    single_kindConflict = !(|(instMode[0] & `AT_SLOT_ONE));$/;"	n
single_write_first	Main/components/ID/RegFile.v	/^    wire single_write_first  = writeEnable[0] && !writeEnable[1];$/;"	n
single_write_second	Main/components/ID/RegFile.v	/^    wire single_write_second = (writeEnable[1] && !writeEnable[0]) || (&writeEnable && WAW_coflict);$/;"	n
size	Main/PREMEM.v	/^    wire [2:0] size =   {2'b00,data_wstrb[0]} + {2'b00,data_wstrb[1]} + $/;"	n
sll_op	Main/components/EXE/ALU.v	/^    wire sll_op = aluop[`ALU_SLL];$/;"	n
sll_res	Main/components/EXE/ALU.v	/^    wire [31:0] and_res,or_res,nor_res,xor_res,sll_res,srl_res,sra_res,lui_res;$/;"	n
slt_op	Main/components/EXE/ALU.v	/^    wire slt_op = aluop[`ALU_SLT];$/;"	n
slt_op	Main/components/EXE/adder.v	/^    wire sub_op,slt_op,sltu_op,add_op;$/;"	n
slt_res	Main/components/EXE/adder.v	/^    wire [BUS-1:0] sltu_res,slt_res;\/\/根据溢出来判断$/;"	n
sltu_op	Main/components/EXE/ALU.v	/^    wire sltu_op= aluop[`ALU_SLTU];$/;"	n
sltu_op	Main/components/EXE/adder.v	/^    wire sub_op,slt_op,sltu_op,add_op;$/;"	n
sltu_res	Main/components/EXE/adder.v	/^    wire [BUS-1:0] sltu_res,slt_res;\/\/根据溢出来判断$/;"	n
sra_op	Main/components/EXE/ALU.v	/^    wire sra_op = aluop[`ALU_SRA];$/;"	n
sra_res	Main/components/EXE/ALU.v	/^    wire [31:0] and_res,or_res,nor_res,xor_res,sll_res,srl_res,sra_res,lui_res;$/;"	n
srcIsReg	Main/EXEDOWN.v	/^    wire        [0:0]               srcIsReg        [1:0];$/;"	n
srcIsReg	Main/EXEUP.v	/^    wire        [0:0]               srcIsReg        [1:0];$/;"	n
srl_op	Main/components/EXE/ALU.v	/^    wire srl_op = aluop[`ALU_SRL];$/;"	n
srl_res	Main/components/EXE/ALU.v	/^    wire [31:0] and_res,or_res,nor_res,xor_res,sll_res,srl_res,sra_res,lui_res;$/;"	n
start	Main/components/EXE/MyMultiplier.v	/^    reg                     start               ;   \/\/ 表示确认接受$/;"	r
startPoint	Main/IF/MemoryManagementUnit.v	/^    wire [`SINGLE_WORD] startPoint = 32'hbfc00000;$/;"	n
stop	Main/ID.v	/^    wire stop = WAR_conflict || hasDangerous;$/;"	n
storeException	Main/DataMemoryManagementUnit.v	/^    wire    storeException      =   !mapWR && (!data_hit_i || !data_v_i);$/;"	n
storeException	Main/EXEDOWN.v	/^    wire storeException = ((ID_down_storeMode_r_i[`STORE_MODE_SH] && alignCheck[0]!=1'b0) ||$/;"	n
store_conflict	Main/PREMEM.v	/^    wire   store_conflict  = EXE_down_memReq_r_i && MEM_hasRisk_w_i;$/;"	n
sub_op	Main/components/EXE/ALU.v	/^    wire sub_op = aluop[`ALU_SUB];$/;"	n
sub_op	Main/components/EXE/adder.v	/^    wire sub_op,slt_op,sltu_op,add_op;$/;"	n
swl_data	Main/EXEDOWN.v	/^    wire [`SINGLE_WORD] swl_data =  ({32{alignCheck==2'b00}} & combination[0]) |$/;"	n
swr_data	Main/EXEDOWN.v	/^    wire [`SINGLE_WORD] swr_data =  ({32{alignCheck==2'b00}} & updataRegFile_up[1]) |$/;"	n
t	Main/components/ID/RegFile.v	/^    integer t;$/;"	r
tail	Main/components/ID/InstQueue.v	/^    reg [`IQ_POINT]  tail;$/;"	r
takeDestSel	Main/IF/BranchSelectCheck.v	/^    wire [`B_SELECT] takeDestSel [3:0];$/;"	n
takeDestSel	Main/IF/components/TakeDestDecorder.v	/^    wire [`B_SELECT]   takeDestSel      [3:0];$/;"	n
takeDestSel_m	Main/IF/components/TakeDestDecorder.v	/^    wire [`B_SELECT]   takeDestSel_m    [3:0];$/;"	n
takeDestSel_p	Main/IF/BranchSelectCheck.v	/^    wire [4*`B_SELECT]          takeDestSel_p                   ;$/;"	n
temp_0_0	Main/components/ID/Decorder.v	/^wire temp_0_0 = (!inst[i][26]&!inst[i][27]&!inst[i][28]&!inst[i][29]&!inst[i][31]);$/;"	n
temp_0_1	Main/components/ID/Decorder.v	/^wire temp_0_1 = (!inst[i][27]&!inst[i][28]&!inst[i][29]&!inst[i][30]&!inst[i][31]);$/;"	n
temp_0_2	Main/components/ID/Decorder.v	/^wire temp_0_2 = (!inst[i][26]&!inst[i][27]&!inst[i][28]&!inst[i][29]&!inst[i][30]&!inst[i][31]);$/;"	n
temp_0_3	Main/components/ID/Decorder.v	/^wire temp_0_3 = (!inst[i][26]&!inst[i][27]&!inst[i][28]&!inst[i][29]& inst[i][30]&!inst[i][31]);$/;"	n
temp_0_4	Main/components/ID/Decorder.v	/^wire temp_0_4 = ( inst[i][26]&!inst[i][27]&!inst[i][28]&!inst[i][29]&!inst[i][30]&!inst[i][31]);$/;"	n
temp_1_0	Main/components/ID/Decorder.v	/^wire temp_1_0 = (!inst[0][26]&!inst[0][27]&!inst[0][28]&!inst[0][29]&!inst[0][30]&!inst[0][31]);$/;"	n
temp_1_1	Main/components/ID/Decorder.v	/^wire temp_1_1 = (!inst[0][27]&!inst[0][28]&!inst[0][29]&!inst[0][30]&!inst[0][31]);$/;"	n
temp_2_0	Main/components/ID/Decorder.v	/^wire temp_2_0 = ( inst[1][25]);$/;"	n
temp_2_1	Main/components/ID/Decorder.v	/^wire temp_2_1 = (!inst[1][26]&!inst[1][27]&!inst[1][29]& inst[1][30]&!inst[1][31]);$/;"	n
temp_2_2	Main/components/ID/Decorder.v	/^wire temp_2_2 = (!inst[1][26]&!inst[1][27]& inst[1][28]& inst[1][30]&!inst[1][31]);$/;"	n
temp_2_3	Main/components/ID/Decorder.v	/^wire temp_2_3 = (!inst[1][26]&!inst[1][27]&!inst[1][28]&!inst[1][29]&!inst[1][30]&!inst[1][31]);$/;"	n
temp__0	Main/components/ID/Arbitrator.v	/^wire temp__0 = (!inst[i][26]&!inst[i][27]&!inst[i][28]&!inst[i][29]&!inst[i][30]&!inst[i][31]);$/;"	n
temp__1	Main/components/ID/Arbitrator.v	/^wire temp__1 = (!inst[i][26]&!inst[i][27]&!inst[i][28]&!inst[i][29]&!inst[i][31]);$/;"	n
temp__2	Main/components/ID/Arbitrator.v	/^wire temp__2 = (!inst[i][27]&!inst[i][28]&!inst[i][29]&!inst[i][30]&!inst[i][31]);$/;"	n
temp__3	Main/components/ID/Arbitrator.v	/^wire temp__3 = (!inst[i][26]&!inst[i][27]& inst[i][28]& inst[i][29]& inst[i][30]&!inst[i][31]);$/;"	n
temp__4	Main/components/ID/Arbitrator.v	/^wire temp__4 = ( inst[i][26]&!inst[i][27]&!inst[i][28]&!inst[i][29]&!inst[i][30]&!inst[i][31]);$/;"	n
temp_enable	Main/IF/PCRegister.v	/^    reg  [3:0]                  temp_enable                     ;$/;"	r
temp_instEnable	Main/IF/PCRegister.v	/^    wire [3:0]                  temp_instEnable                 ;$/;"	n
thirdPC	Main/IF/PCGenerator.v	/^    wire [`SINGLE_WORD]                       thirdPC                         ;$/;"	n
tick	Main/PrimaryExceptionProcessor.v	/^    reg                         tick;$/;"	r
timer	Main/components/EXE/Divider.v	/^    reg     [5:0]               timer; $/;"	r
timer	Main/components/EXE/MyMultiplier.v	/^    reg  [3:0]              timer               ;   \/\/ 计算时间$/;"	r
timer	Main/components/EXE/div.v	/^reg [5:0] timer; $/;"	r
tlbRisk	Main/EXEDOWN.v	/^    wire tlbRisk = (aluso[31:29]!=3'b101) && (aluso[31:29]!=3'b100) && ID_down_memReq_r_i;$/;"	n
tlb_conflict	Main/PREMEM.v	/^    wire   tlb_conflict    = EXE_down_isTLBInst_r_i && MEM_hasRisk_w_i;$/;"	n
tlbwEntryHi	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]  tlbwEntryHi = DMMU_EntryHi_i;$/;"	n
tlbwEntryLo0	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]  tlbwEntryLo0= DMMU_EntryLo0_i;$/;"	n
tlbwEntryLo1	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]  tlbwEntryLo1= DMMU_EntryLo1_i;$/;"	n
tlbwIndex	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]  tlbwIndex   = DMMU_Index_i;$/;"	n
tlbwPageMask	Main/PrimaryExceptionProcessor.v	/^    wire    [`SINGLE_WORD]  tlbwPageMask= DMMU_PageMask_i;$/;"	n
top_a	Main/components/EXE/adder.v	/^    wire cin,cout,top_a,top_b;$/;"	n
top_b	Main/components/EXE/adder.v	/^    wire cin,cout,top_a,top_b;$/;"	n
trapKind_up	Main/components/ID/Decorder.v	/^    wire    [`TRAP_KIND]        trapKind_up         [1:0];$/;"	n
truep	Main/EXEUP.v	/^    reg [63:0] truep,falsep;$/;"	r
try_div_ans	Main/components/EXE/try_div_ans.v	/^module try_div_ans ($/;"	m
unmapTag	Main/DataMemoryManagementUnit.v	/^    reg     [`CACHE_TAG]        unmapTag                        ;$/;"	r
unmapTag	Main/IF/MemoryManagementUnit.v	/^    reg     [`CACHE_TAG]        unmapTag                        ;$/;"	r
upBound	Main/components/EXE/MyMultiplier.v	/^    wire [3:0] upBound = isAccumlate ? 'd4 : 'd2;$/;"	n
up_oprand0_sel	Main/ID.v	/^    wire    [`OPRAND_SEL]   up_oprand0_sel;$/;"	n
up_oprand1_sel	Main/ID.v	/^    wire    [`OPRAND_SEL]   up_oprand1_sel;$/;"	n
updataRegFile_up	Main/EXEDOWN.v	/^    wire        [`SINGLE_WORD]      updataRegFile_up[1:0];$/;"	n
updataRegFile_up	Main/EXEUP.v	/^    wire        [`SINGLE_WORD]      updataRegFile_up[1:0];$/;"	n
useDSP	Main/IF/PCRegister.v	/^    wire                        useDSP                        ;$/;"	n
useSavedWb	Main/EXEDOWN.v	/^            reg                 useSavedWb;$/;"	r
useSavedWb	Main/EXEUP.v	/^            reg                 useSavedWb;$/;"	r
validDest_o	Main/IF/BranchSelectCheck.v	/^    wire [`SINGLE_WORD]         validDest_o                     ;$/;"	n
validDest_up	Main/IF/components/BranchFourToOne.v	/^    wire    [`SINGLE_WORD]   validDest_up    [3:0];$/;"	n
validTake_o	Main/IF/BranchSelectCheck.v	/^    wire                        validTake_o                     ;$/;"	n
w_asid_i	Main.v	/^	wire	[7:0]	w_asid_o;	wire	[7:0]	w_asid_i;$/;"	n
w_asid_o	Main.v	/^	wire	[7:0]	w_asid_o;	wire	[7:0]	w_asid_i;$/;"	n
w_enbale_i	Main.v	/^	wire	[0:0]	w_enbale_o;	wire	[0:0]	w_enbale_i;$/;"	n
w_enbale_o	Main.v	/^	wire	[0:0]	w_enbale_o;	wire	[0:0]	w_enbale_i;$/;"	n
w_flags0_i	Main.v	/^	wire	[4:0]	w_flags0_o;	wire	[4:0]	w_flags0_i;$/;"	n
w_flags0_o	Main.v	/^	wire	[4:0]	w_flags0_o;	wire	[4:0]	w_flags0_i;$/;"	n
w_flags1_i	Main.v	/^	wire	[4:0]	w_flags1_o;	wire	[4:0]	w_flags1_i;$/;"	n
w_flags1_o	Main.v	/^	wire	[4:0]	w_flags1_o;	wire	[4:0]	w_flags1_i;$/;"	n
w_g_i	Main.v	/^	wire	[0:0]	w_g_o;	wire	[0:0]	w_g_i;$/;"	n
w_g_o	Main.v	/^	wire	[0:0]	w_g_o;	wire	[0:0]	w_g_i;$/;"	n
w_index_i	Main.v	/^	wire	[4:0]	w_index_o;	wire	[4:0]	w_index_i;$/;"	n
w_index_o	Main.v	/^	wire	[4:0]	w_index_o;	wire	[4:0]	w_index_i;$/;"	n
w_mask_i	Main.v	/^	wire	[11:0]	w_mask_o;	wire	[11:0]	w_mask_i;$/;"	n
w_mask_o	Main.v	/^	wire	[11:0]	w_mask_o;	wire	[11:0]	w_mask_i;$/;"	n
w_pfn0_i	Main.v	/^	wire	[19:0]	w_pfn0_o;	wire	[19:0]	w_pfn0_i;$/;"	n
w_pfn0_o	Main.v	/^	wire	[19:0]	w_pfn0_o;	wire	[19:0]	w_pfn0_i;$/;"	n
w_pfn1_i	Main.v	/^	wire	[19:0]	w_pfn1_o;	wire	[19:0]	w_pfn1_i;$/;"	n
w_pfn1_o	Main.v	/^	wire	[19:0]	w_pfn1_o;	wire	[19:0]	w_pfn1_i;$/;"	n
w_vpn2_i	Main.v	/^	wire	[18:0]	w_vpn2_o;	wire	[18:0]	w_vpn2_i;$/;"	n
w_vpn2_o	Main.v	/^	wire	[18:0]	w_vpn2_o;	wire	[18:0]	w_vpn2_i;$/;"	n
wb_data	Main/EXEDOWN.v	/^            wire [`SINGLE_WORD] wb_data = useSavedWb ? wb_savedData : WB_forwardData_w_i;$/;"	n
wb_data	Main/EXEUP.v	/^            wire [`SINGLE_WORD] wb_data = useSavedWb ? wb_savedData : WB_forwardData_w_i;$/;"	n
wb_savedData	Main/EXEDOWN.v	/^            reg [`SINGLE_WORD]  wb_savedData;$/;"	r
wb_savedData	Main/EXEUP.v	/^            reg [`SINGLE_WORD]  wb_savedData;$/;"	r
wdata	Main/components/MyRAM.v	/^    input  [MY_DATA_WIDTH-1:0]      wdata,$/;"	p
wen	Main/IF/BranchTargetBuffer.v	/^            wire    wen =   FU_erroVAddr_w_i[3:2]==number[i]   && $/;"	n
wire	Main.v	/^    input	wire	[5:0]   ext_int,  $/;"	p
wire	Main.v	/^    input	wire	clk,$/;"	p
wire	Main.v	/^    input	wire	rst,$/;"	p
wire	Main.v	/^    input   wire                             inst_data_ok,$/;"	p
wire	Main.v	/^    input   wire                             inst_index_ok,      \/\/ 类似addr_ok,表示cache成功接受到CPU发送的index$/;"	p
wire	Main.v	/^    input   wire    [`FOUR_WORDS]            inst_rdata,$/;"	p
wire	Main.v	/^    input  wire                              data_data_ok,$/;"	p
wire	Main.v	/^    input  wire                              data_index_ok,      \/\/ 同上$/;"	p
wire	Main.v	/^    input  wire     [31:0]                   data_rdata,$/;"	p
wire	Main.v	/^    output	wire	[3:0]           debug_wb_rf_wen0,$/;"	p
wire	Main.v	/^    output	wire	[3:0]           debug_wb_rf_wen1,$/;"	p
wire	Main.v	/^    output	wire	[`GPR_NUM]      debug_wb_rf_wnum0,$/;"	p
wire	Main.v	/^    output	wire	[`GPR_NUM]      debug_wb_rf_wnum1,$/;"	p
wire	Main.v	/^    output	wire	[`SINGLE_WORD]           inst_wdata,$/;"	p
wire	Main.v	/^    output	wire	[`SINGLE_WORD]  debug_wb_pc0,$/;"	p
wire	Main.v	/^    output	wire	[`SINGLE_WORD]  debug_wb_pc1,$/;"	p
wire	Main.v	/^    output	wire	[`SINGLE_WORD]  debug_wb_rf_wdata0,$/;"	p
wire	Main.v	/^    output	wire	[`SINGLE_WORD]  debug_wb_rf_wdata1$/;"	p
wire	Main.v	/^    output  wire                             inst_hasException,$/;"	p
wire	Main.v	/^    output  wire                             inst_req,$/;"	p
wire	Main.v	/^    output  wire                             inst_unCache,$/;"	p
wire	Main.v	/^    output  wire                             inst_wr,$/;"	p
wire	Main.v	/^    output  wire    [1:0]                    inst_size,          \/\/ constant value = 2'b11 表示一次传输4条指令,共16字节;$/;"	p
wire	Main.v	/^    output  wire    [`CACHE_INDEX]           inst_index,         \/\/ 4字对齐,即最后4bit一定为0$/;"	p
wire	Main.v	/^    output  wire    [`CACHE_TAG]             inst_tag,      $/;"	p
wire	Main.v	/^    output wire                              data_hasException,  \/\/ 同上$/;"	p
wire	Main.v	/^    output wire                              data_req,$/;"	p
wire	Main.v	/^    output wire                              data_unCache,       \/\/ 同上$/;"	p
wire	Main.v	/^    output wire                              data_wr,$/;"	p
wire	Main.v	/^    output wire     [11:0]                   data_index,         \/\/ 同A12文档,存在4字不对齐的情况$/;"	p
wire	Main.v	/^    output wire     [1:0]                    data_size,          \/\/ 同A12文档,没有变化$/;"	p
wire	Main.v	/^    output wire     [31:0]                   data_wdata,$/;"	p
wire	Main.v	/^    output wire     [3:0]                    data_wstrb,         \/\/ 同CPU设计实战表8-3$/;"	p
wire	Main.v	/^    output wire     [`CACHE_TAG]             data_tag,           \/\/ 同上$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	                        PREMEM_map_w_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	                        PREMEM_read_w_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	                        PREMEM_search_w_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	                        PREMEM_writeI_w_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	                        PREMEM_writeR_w_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	                        data_index_ok,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	                        data_req,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	                data_d_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	                data_hit_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	                data_v_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	                r_g_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	[`ASID]         r_asid_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	[`CACHE_TAG]    data_pfn_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	[`CACHE_TAG]    r_pfn0_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	[`CACHE_TAG]    r_pfn1_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	[`CBITS]        data_c_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	[`FLAG0]        r_flags0_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	[`FLAG1]        r_flags1_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	[`MASK]         r_mask_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	[`SINGLE_WORD]          PREMEM_VAddr_w_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	[`TLB_WIDTH]    data_index_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	clk,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire	rst,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire                            data_wr,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire    [`SINGLE_WORD]          CP0_Config_w_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire    [`SINGLE_WORD]          CP0_EntryHi_w_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire    [`SINGLE_WORD]          CP0_EntryLo0_w_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire    [`SINGLE_WORD]          CP0_EntryLo1_w_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire    [`SINGLE_WORD]          CP0_Index_w_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire    [`SINGLE_WORD]          CP0_PageMask_w_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire    [`SINGLE_WORD]          CP0_Random_w_i$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    input	wire    [`VPN2]         r_vpn2_i,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	                        DMMU_tlbRefill_o,   \/\/ 是否有重填异常$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	                        data_hasException,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	                        data_unCache,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	                data_oddPage_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	                r_enbale_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	                w_enbale_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	                w_g_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	[`ASID]         data_asid_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	[`ASID]         w_asid_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	[`CACHE_TAG]            data_tag,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	[`CACHE_TAG]    w_pfn0_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	[`CACHE_TAG]    w_pfn1_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	[`EXCCODE]              DMMU_ExcCode_o,     \/\/ 是否产生异常根据总线信号data_hasException$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	[`FLAG0]        w_flags0_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	[`FLAG1]        w_flags1_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	[`MASK]         w_mask_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	[`TLB_WIDTH]    r_index_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	[`TLB_WIDTH]    w_index_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	[`VPN2]         data_vpn2_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire	[`VPN2]         w_vpn2_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire    [`SINGLE_WORD]          DMMU_EntryHi_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire    [`SINGLE_WORD]          DMMU_EntryLo0_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire    [`SINGLE_WORD]          DMMU_EntryLo1_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire    [`SINGLE_WORD]          DMMU_Index_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output	wire    [`SINGLE_WORD]          DMMU_PageMask_o,$/;"	p
wire	Main/DataMemoryManagementUnit.v	/^    output  wire                    data_tlbReq_o,$/;"	p
wire	Main/EXEDOWN.v	/^	output   wire    [0:0]			        EXE_down_hasExceprion_w_o,$/;"	p
wire	Main/EXEDOWN.v	/^	output   wire    [`EXCCODE]			    EXE_down_ExcCode_w_o,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        CP0_excOccur_w_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        CP0_nonBlockMark_w_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        EXE_up_okToChange_w_i,        \/\/ allowin共用一个，代表上下两端都可进$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_data0Ready_i,       \/\/ 表示该operand是否可用$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_data1Ready_i,       \/\/ 表示该operand是否可用$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_eret_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_hasException_i,     \/\/ 存在异常$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_isCacheInst_i,      \/\/ 表示是Cache指令$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_isDangerous_i,      \/\/ 表示该指令在执行期间不得执行其他指令$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_isDelaySlot_i,      \/\/ 表示该指令是否是延迟槽指令$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_isRefill_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_isTLBInst_i,        \/\/ 表示是TLB指令$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_memAtom_i,          \/\/ 表示该访存操作是原子访存操作,需要读写LLbit$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_memReq_i,           \/\/ 表示访存请求$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_memWR_i,            \/\/ 表示访存类型$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_oprand0IsReg_i,     $/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_oprand1IsReg_i,     $/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_readCp0_i,          \/\/ 只有指令需要将cp0写入GPR,该信号才会拉高,mfc0$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_valid_w_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_down_writeCp0_i,         \/\/ 只有指令需要将GPR写入cp0,该信号才会拉高,mtc0$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        ID_up_branchRisk_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        PREMEM_allowin_w_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        PREMEM_hasRisk_w_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        SBA_branchRisk_w_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        SBA_flush_w_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        SBA_nonBlockDS_w_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        clk,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	                        rst,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[2*`SINGLE_WORD]        ID_down_readData_i,         \/\/ 寄存器值rsrt$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`ALUOP]                ID_down_aluOprator_i,       \/\/}}}$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`CACHE_OP]             ID_down_CacheOperator_i,    \/\/ Cache指令op}}}$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`CP0_POSITION]         ID_down_positionCp0_i,      \/\/ {rd,sel}$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`EXCEPRION_SEL]        ID_down_exceptionSel_i,     \/\/ 选择ALU的overflow和trap$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`EXCEP_SEG]            CP0_exceptSeg_w_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`FORWARD_MODE]         ID_down_forwardSel0_i,      \/\/ 用于选择前递信号$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`FORWARD_MODE]         ID_down_forwardSel1_i,      \/\/ 用于选择前递信号$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`GPR_NUM]              ID_down_writeNum_i,         \/\/ 回写寄存器数值,0为不回写$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`HILO]                 ID_down_readHiLo_i,         \/\/ 只有指令需要将HiLo写入GPR,该信号才会拉高,mfhilo $/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`HILO]                 ID_down_writeHiLo_i,        \/\/ 需要根据数值写HiLo的指令,有madd,\/sub,mult,div,mtc0,其中mtc0是类似与add做运算,之后将运算结果写入}}}$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`MDUOP]                ID_down_mduOperator_i,      \/\/ 包括乘除,累加累减,立即数乘法$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`SINGLE_WORD]          EXE_down_aluRes_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`SINGLE_WORD]          EXE_up_aluRes_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`SINGLE_WORD]          ID_down_VAddr_i,            \/\/ 用于debug和异常处理}}}$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`SINGLE_WORD]          ID_down_oprand0_i,          \/\/ 经过多路选择器,选择WB前递数据或立即数或SA的第一个操作数$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`SINGLE_WORD]          ID_down_oprand1_i,       \/\/ 经过多路选择器,选择WB前递数据或立即数或SA的第一个操作数$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`SINGLE_WORD]          MEM_finalRes_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`SINGLE_WORD]          PREMEM_preliminaryRes_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`SINGLE_WORD]          REEXE_regData_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`SINGLE_WORD]          SBA_aluRes_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`SINGLE_WORD]          WB_forwardData_w_i,$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`TLB_INST]             ID_down_TLBInstOperator_i,  \/\/ 执行的种类$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire	[`TRAP_KIND]            ID_down_trapKind_i,         \/\/ 自陷指令的种类}}}$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire                            ID_down_exceptionRisk_i,    \/\/ 存在异常的风险$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire    [`EXCCODE]              ID_down_ExcCode_i,          \/\/ 异常信号	$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire    [`LOAD_MODE]            ID_down_loadMode_i,         \/\/ load模式	$/;"	p
wire	Main/EXEDOWN.v	/^    input	wire    [`STORE_MODE]           ID_down_storeMode_i,        \/\/ store模式	}}}$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_eret_o,$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_eret_w_o,$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_forwardMode_w_o,    $/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_hasDangerous_w_o,  \/\/ mul,clo,clz,madd,msub,cache,tlb等危险指令$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_hasException_o,    \/\/ 存在异常$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_isCacheInst_o,     \/\/ 表示是Cache指令$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_isDangerous_o,     \/\/ 表示该指令是否是延迟槽指令,用于异常处理$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_isDelaySlot_o,     \/\/ 表示该指令是否是延迟槽指令,用于异常处理$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_isDelaySlot_w_o,$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_isInterrupt_w_o,    \/\/ 不同异常地址$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_isRefill_o,$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_isRefill_w_o,       \/\/ 不同异常地址$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_isTLBInst_o,       \/\/ 表示是TLB指令$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_memAtom_o,         \/\/ 表示该访存操作是原子访存操作,需要读写LLbit$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_memReq_o,          \/\/ 表示访存需要              $/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_memWR_o,           \/\/ 表示访存类型$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_nonBlockDS_o,        \/\/ 该条指令执行在MDU运算期间, 包括MDU指令$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_nonBlockMark_o,    \/\/ 该条指令执行在MDU运算期间, 不包括MDU指令}}}$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_nonBlockMark_w_o,$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_readCp0_o,         \/\/ mfc0,才会拉高$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_valid_w_o,     \/\/ 该周期数据是否有效，后段决定是否采样$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	                        EXE_down_writeCp0_o,        \/\/ mtc0,才会拉高$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	[3:0]                   EXE_down_memEnable_o,       \/\/ 表示字节读写使能,0000表示全不写$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	[4:0]                   EXE_down_clRes_o,           \/\/ clo的计算结果$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	[`CACHE_OP]             EXE_down_CacheOperator_o    \/\/ Cache指令op$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	[`CP0_POSITION]         EXE_down_positionCp0_o,     \/\/ {rd,sel}$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	[`GPR_NUM]              EXE_down_writeNum_o,        \/\/ 回写寄存器数值,0为不回写$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	[`GPR_NUM]              EXE_down_writeNum_w_o,    $/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	[`MATH_SEL]             EXE_down_mathResSel_o,      \/\/ 数学运算结果的选择$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	[`SINGLE_WORD]          EXE_down_VAddr_o,           \/\/ 用于debug和异常处理}}}$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	[`SINGLE_WORD]          EXE_down_exceptBadVAddr_o,$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	[`SINGLE_WORD]          EXE_down_exceptBadVAddr_w_o,$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	[`SINGLE_WORD]          EXE_down_exceptPC_w_o,$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	[`SINGLE_WORD]          EXE_down_mduRes_o,          \/\/ mfhilo的运算处理结果$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	[`SINGLE_WORD]          EXE_down_mulRes_o,          \/\/ 专门用于Mul的接口$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	[`SINGLE_WORD]          EXE_down_storeData_o,$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire	[`TLB_INST]             EXE_down_TLBInstOperator_o, \/\/ 执行的种类$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire                            EXE_down_exceptionRisk_o,   \/\/ 存在异常的风险$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire    [`EXCCODE]              EXE_down_ExcCode_o,         \/\/ 异常信号$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire    [`LOAD_SEL]             EXE_down_loadSel_o,         \/\/ load指令模式		}}}$/;"	p
wire	Main/EXEDOWN.v	/^    output	wire    [`SINGLE_WORD]          EXE_down_aluRes_o,$/;"	p
wire	Main/EXEDOWN.v	/^    output  wire                            EXE_down_allowin_w_o,   \/\/ 下周起该段是否可以更新$/;"	p
wire	Main/EXEUP.v	/^    input	wire	                        CP0_excOccur_w_i,            $/;"	p
wire	Main/EXEUP.v	/^    input	wire	                        EXE_down_allowin_w_i,$/;"	p
wire	Main/EXEUP.v	/^    input	wire	                        ID_up_data0Ready_i,         \/\/ 表示该operand是否可用$/;"	p
wire	Main/EXEUP.v	/^    input	wire	                        ID_up_data1Ready_i,         \/\/ 表示该operand是否可用$/;"	p
wire	Main/EXEUP.v	/^    input	wire	                        ID_up_oprand0IsReg_i,       $/;"	p
wire	Main/EXEUP.v	/^    input	wire	                        ID_up_oprand1IsReg_i,       $/;"	p
wire	Main/EXEUP.v	/^    input	wire	                        ID_up_predTake_i,           \/\/ 预测的分支跳转$/;"	p
wire	Main/EXEUP.v	/^    input	wire	                        ID_up_valid_w_i,$/;"	p
wire	Main/EXEUP.v	/^    input	wire	                        SBA_flush_w_i,            $/;"	p
wire	Main/EXEUP.v	/^    input	wire	[2*`SINGLE_WORD]        ID_up_readData_i,           \/\/ 寄存器值rsrt$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`ALL_CHECKPOINT]       ID_up_checkPoint_i,         \/\/ 检查点信息$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`ALUOP]                ID_up_aluOprator_i,$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`EXCEP_SEG]            CP0_exceptSeg_w_i,$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`FORWARD_MODE]         ID_up_forwardSel0_i,        \/\/ 用于选择前递信号$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`FORWARD_MODE]         ID_up_forwardSel1_i,        \/\/ 用于选择前递信号$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`GPR_NUM]              ID_up_writeNum_i,             \/\/ 回写寄存器数值,0为不回写$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`REPAIR_ACTION]        ID_up_repairAction_i,       \/\/ 检查点信息,包括是否是分支指令$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`SINGLE_WORD]          EXE_down_aluRes_i,$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`SINGLE_WORD]          EXE_up_aluRes_i,$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`SINGLE_WORD]          ID_up_VAddr_i,$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`SINGLE_WORD]          ID_up_oprand0_i,            $/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`SINGLE_WORD]          ID_up_oprand1_i,            $/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`SINGLE_WORD]          ID_up_predDest_i,           \/\/ 预测的分支地址$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`SINGLE_WORD]          MEM_finalRes_i,$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`SINGLE_WORD]          PREMEM_preliminaryRes_i,$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`SINGLE_WORD]          REEXE_regData_i,$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`SINGLE_WORD]          SBA_aluRes_i,$/;"	p
wire	Main/EXEUP.v	/^    input	wire	[`SINGLE_WORD]          WB_forwardData_w_i,$/;"	p
wire	Main/EXEUP.v	/^    input	wire	clk,$/;"	p
wire	Main/EXEUP.v	/^    input	wire	rst,$/;"	p
wire	Main/EXEUP.v	/^    input	wire                            ID_up_branchRisk_i,         \/\/ 存在分支确认失败的风险$/;"	p
wire	Main/EXEUP.v	/^    input	wire    [`BRANCH_KIND]          ID_up_branchKind_i,         \/\/ 分支指令的种类$/;"	p
wire	Main/EXEUP.v	/^    output	wire	                        EXE_up_corrTake_o,          \/\/ 预测的分支跳转$/;"	p
wire	Main/EXEUP.v	/^    output	wire	                        EXE_up_forwardMode_w_o,    $/;"	p
wire	Main/EXEUP.v	/^    output	wire	                        EXE_up_okToChange_w_o, \/\/ 只有上才有allowin，代表上下两端都可进$/;"	p
wire	Main/EXEUP.v	/^    output	wire	                        EXE_up_valid_w_o,       \/\/ 用于给下一级流水线决定是否采样$/;"	p
wire	Main/EXEUP.v	/^    output	wire	[`ALL_CHECKPOINT]       EXE_up_checkPoint_o,$/;"	p
wire	Main/EXEUP.v	/^    output	wire	[`GPR_NUM]              EXE_up_writeNum_o,          \/\/ 回写寄存器数值,0为不回写$/;"	p
wire	Main/EXEUP.v	/^    output	wire	[`GPR_NUM]              EXE_up_writeNum_w_o,    $/;"	p
wire	Main/EXEUP.v	/^    output	wire	[`REPAIR_ACTION]        EXE_up_repairAction_o,      \/\/ 修复动作，包含是否需要修复的信号$/;"	p
wire	Main/EXEUP.v	/^    output	wire	[`SINGLE_WORD]          EXE_up_VAddr_o,             \/\/ 用于debug和异常处理$/;"	p
wire	Main/EXEUP.v	/^    output	wire	[`SINGLE_WORD]          EXE_up_corrDest_o,          \/\/ 预测的分支地址$/;"	p
wire	Main/EXEUP.v	/^    output	wire                            EXE_up_branchRisk_o         \/\/ 存在分支确认失败的风险$/;"	p
wire	Main/EXEUP.v	/^    output	wire    [`SINGLE_WORD]          EXE_up_aluRes_o,	        $/;"	p
wire	Main/ID.v	/^    input	wire	                                IF_isRefill_i,$/;"	p
wire	Main/ID.v	/^    input	wire	                        EXE_down_allowin_w_i,        \/\/ 逐级互锁信号$/;"	p
wire	Main/ID.v	/^    input	wire	                        EXE_down_forwardMode_w_i,  $/;"	p
wire	Main/ID.v	/^    input	wire	                        EXE_down_hasDangerous_w_i,  $/;"	p
wire	Main/ID.v	/^    input	wire	                        EXE_up_forwardMode_w_i,    $/;"	p
wire	Main/ID.v	/^    input	wire	                        MEM_forwardMode_w_i,       $/;"	p
wire	Main/ID.v	/^    input	wire	                        MEM_hasDangerous_w_i,       $/;"	p
wire	Main/ID.v	/^    input	wire	                        PBA_writeEnable_w_i,$/;"	p
wire	Main/ID.v	/^    input	wire	                        PREMEM_forwardMode_w_i,    $/;"	p
wire	Main/ID.v	/^    input	wire	                        PREMEM_hasDangerous_w_i,     $/;"	p
wire	Main/ID.v	/^    input	wire	                        REEXE_forwardMode_w_i,     $/;"	p
wire	Main/ID.v	/^    input	wire	                        SBA_forwardMode_w_i,       $/;"	p
wire	Main/ID.v	/^    input	wire	                        WB_hasDangerous_w_i,     $/;"	p
wire	Main/ID.v	/^    input	wire	                        WB_writeEnable_w_i, $/;"	p
wire	Main/ID.v	/^    input	wire	CP0_excOccur_w_i,   $/;"	p
wire	Main/ID.v	/^    input	wire	SBA_flush_w_i,      $/;"	p
wire	Main/ID.v	/^    input	wire	[`GPR_NUM]              EXE_down_writeNum_w_i,  $/;"	p
wire	Main/ID.v	/^    input	wire	[`GPR_NUM]              EXE_up_writeNum_w_i,    $/;"	p
wire	Main/ID.v	/^    input	wire	[`GPR_NUM]              MEM_writeNum_w_i,       $/;"	p
wire	Main/ID.v	/^    input	wire	[`GPR_NUM]              PBA_writeNum_w_i,   $/;"	p
wire	Main/ID.v	/^    input	wire	[`GPR_NUM]              PREMEM_writeNum_w_i,    $/;"	p
wire	Main/ID.v	/^    input	wire	[`GPR_NUM]              REEXE_writeNum_w_i,     $/;"	p
wire	Main/ID.v	/^    input	wire	[`GPR_NUM]              SBA_writeNum_w_i,       $/;"	p
wire	Main/ID.v	/^    input	wire	[`GPR_NUM]              WB_writeNum_w_i,    $/;"	p
wire	Main/ID.v	/^    input	wire	[`IQ_VALID]                     ID_upDateMode_i,   \/\/ 可选宏定义三种 $/;"	p
wire	Main/ID.v	/^    input	wire	[`SINGLE_WORD]          PBA_forwardData_w_i,$/;"	p
wire	Main/ID.v	/^    input	wire	[`SINGLE_WORD]          WB_finalRes_w_i, $/;"	p
wire	Main/ID.v	/^    input	wire                                    IF_hasException_i,$/;"	p
wire	Main/ID.v	/^    input	wire    [`EXCCODE]                      IF_ExcCode_i,$/;"	p
wire	Main/ID.v	/^    input   wire	                                IF_valid_i,$/;"	p
wire	Main/ID.v	/^    input   wire	[3:0]                           IF_instEnable_i,$/;"	p
wire	Main/ID.v	/^    input   wire	[`SINGLE_WORD]                  IF_instBasePC_i,$/;"	p
wire	Main/ID.v	/^    input   wire	clk,$/;"	p
wire	Main/ID.v	/^    input   wire	rst,$/;"	p
wire	Main/ID.v	/^    input   wire    [2:0]                           IF_instNum_i,$/;"	p
wire	Main/ID.v	/^    input   wire    [3:0]                           IF_predTake_p_i,$/;"	p
wire	Main/ID.v	/^    input   wire    [4*`ALL_CHECKPOINT]             IF_predInfo_p_i,$/;"	p
wire	Main/ID.v	/^    input   wire    [4*`SINGLE_WORD]                IF_predDest_p_i,$/;"	p
wire	Main/ID.v	/^    input   wire    [`FOUR_WORDS]                   IF_inst_p_i,$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_data0Ready_o,       \/\/ 表示该operand是否可用$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_data1Ready_o,       \/\/ 表示该operand是否可用$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_eret_o,$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_hasException_o,       \/\/ 存在异常$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_isCacheInst_o,      \/\/ 表示是Cache指令$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_isDangerous_o,      \/\/ 表示该指令在执行期间不得执行其他指令$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_isDelaySlot_o,      \/\/ 表示该指令是否是延迟槽指令$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_isRefill_o,$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_isTLBInst_o,        \/\/ 表示是TLB指令$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_memAtom_o,          \/\/ 表示该访存操作是原子访存操作,需要读写LLbit$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_memReq_o,           \/\/ 表示访存请求$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_memWR_o,            \/\/ 表示访存类型$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_oprand0IsReg_o,     $/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_oprand1IsReg_o,     $/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_readCp0_o,          \/\/ 只有指令需要将cp0写入GPR,该信号才会拉高,mfc0$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_valid_w_o,$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_down_writeCp0_o,         \/\/ 只有指令需要将GPR写入cp0,该信号才会拉高,mtc0,直接将rt寄存器的数值接入$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_up_data0Ready_o,         \/\/ 表示该operand是否可用$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_up_data1Ready_o,         \/\/ 表示该operand是否可用$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_up_oprand0IsReg_o,       $/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_up_oprand1IsReg_o,       $/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_up_predTake_o,           \/\/ 预测的分支跳转$/;"	p
wire	Main/ID.v	/^    output	wire	                        ID_up_valid_w_o,$/;"	p
wire	Main/ID.v	/^    output	wire	[2*`SINGLE_WORD]        ID_down_readData_o,         \/\/ 寄存器值rsrt$/;"	p
wire	Main/ID.v	/^    output	wire	[2*`SINGLE_WORD]        ID_up_readData_o,           \/\/ 寄存器值rsrt$/;"	p
wire	Main/ID.v	/^    output	wire	[`ALL_CHECKPOINT]       ID_up_checkPoint_o,         \/\/ 分支预测检查点$/;"	p
wire	Main/ID.v	/^    output	wire	[`ALUOP]                ID_down_aluOprator_o,$/;"	p
wire	Main/ID.v	/^    output	wire	[`ALUOP]                ID_up_aluOprator_o,$/;"	p
wire	Main/ID.v	/^    output	wire	[`CACHE_OP]             ID_down_CacheOperator_o     \/\/ Cache指令op$/;"	p
wire	Main/ID.v	/^    output	wire	[`CP0_POSITION]         ID_down_positionCp0_o,      \/\/ {rd,sel}$/;"	p
wire	Main/ID.v	/^    output	wire	[`EXCEPRION_SEL]        ID_down_exceptionSel_o,$/;"	p
wire	Main/ID.v	/^    output	wire	[`FORWARD_MODE]         ID_down_forwardSel0_o,      \/\/ 用于选择前递信号$/;"	p
wire	Main/ID.v	/^    output	wire	[`FORWARD_MODE]         ID_down_forwardSel1_o,      \/\/ 用于选择前递信号$/;"	p
wire	Main/ID.v	/^    output	wire	[`FORWARD_MODE]         ID_up_forwardSel0_o,        \/\/ 用于选择前递信号$/;"	p
wire	Main/ID.v	/^    output	wire	[`FORWARD_MODE]         ID_up_forwardSel1_o,        \/\/ 用于选择前递信号$/;"	p
wire	Main/ID.v	/^    output	wire	[`GPR_NUM]              ID_down_writeNum_o,         \/\/ 回写寄存器数值,0为不回写$/;"	p
wire	Main/ID.v	/^    output	wire	[`GPR_NUM]              ID_up_writeNum_o,             \/\/ 回写寄存器数值,0为不回写$/;"	p
wire	Main/ID.v	/^    output	wire	[`HILO]                 ID_down_readHiLo_o,         \/\/ 只有指令需要将HiLo写入GPR,该信号才会拉高,包括clo\/z,mul,mfhilo$/;"	p
wire	Main/ID.v	/^    output	wire	[`HILO]                 ID_down_writeHiLo_o,        \/\/ 需要根据数值写HiLo的指令,有madd,\/sub,mult,div,mtc0,其中mtc0是类似与add做运算,之后将运算结果写入$/;"	p
wire	Main/ID.v	/^    output	wire	[`IQ_VALID]             ID_upDateMode_o,   \/\/ 可选宏定义三种 $/;"	p
wire	Main/ID.v	/^    output	wire	[`MDUOP]                ID_down_mduOperator_o,      \/\/ 包括乘除,clo,clz和累加累减$/;"	p
wire	Main/ID.v	/^    output	wire	[`REPAIR_ACTION]        ID_up_repairAction_o,       \/\/ 预测的分支类型$/;"	p
wire	Main/ID.v	/^    output	wire	[`SINGLE_WORD]          ID_down_VAddr_o,            \/\/ 用于debug和异常处理$/;"	p
wire	Main/ID.v	/^    output	wire	[`SINGLE_WORD]          ID_down_oprand0_o,          \/\/ 经过多路选择器,选择WB前递数据或立即数或SA的第一个操作数$/;"	p
wire	Main/ID.v	/^    output	wire	[`SINGLE_WORD]          ID_down_oprand1_o,          \/\/ 经过多路选择器,选择WB前递数据或立即数或SA的第一个操作数$/;"	p
wire	Main/ID.v	/^    output	wire	[`SINGLE_WORD]          ID_up_VAddr_o,$/;"	p
wire	Main/ID.v	/^    output	wire	[`SINGLE_WORD]          ID_up_oprand0_o,            \/\/ 经过多路选择,选择指令自带的数据$/;"	p
wire	Main/ID.v	/^    output	wire	[`SINGLE_WORD]          ID_up_oprand1_o,            \/\/ 经过多路选择器,选择WB前递数据或立即数或SA的第一个操作数$/;"	p
wire	Main/ID.v	/^    output	wire	[`SINGLE_WORD]          ID_up_predDest_o,           \/\/ 预测的分支地址$/;"	p
wire	Main/ID.v	/^    output	wire	[`TLB_INST]             ID_down_TLBInstOperator_o,  \/\/ 执行的种类$/;"	p
wire	Main/ID.v	/^    output	wire	[`TRAP_KIND]            ID_down_trapKind_o,           \/\/ 自陷指令的种类$/;"	p
wire	Main/ID.v	/^    output	wire                            ID_down_exceptionRisk_o,    \/\/ 存在异常的风险$/;"	p
wire	Main/ID.v	/^    output	wire                            ID_up_branchRisk_o,         \/\/ 存在分支确认失败的风险$/;"	p
wire	Main/ID.v	/^    output	wire    [`BRANCH_KIND]          ID_up_branchKind_o,         \/\/ 分支指令的种类$/;"	p
wire	Main/ID.v	/^    output	wire    [`EXCCODE]              ID_down_ExcCode_o,          \/\/ 异常信号	$/;"	p
wire	Main/ID.v	/^    output	wire    [`LOAD_MODE]            ID_down_loadMode_o,         \/\/ load模式	$/;"	p
wire	Main/ID.v	/^    output	wire    [`STORE_MODE]           ID_down_storeMode_o,        \/\/ store模式	$/;"	p
wire	Main/ID.v	/^    output   wire                           ID_stopFetch_o,$/;"	p
wire	Main/IF.v	/^    input	wire	                    ID_stopFetch_i,$/;"	p
wire	Main/IF.v	/^    input	wire	                    inst_d_i,$/;"	p
wire	Main/IF.v	/^    input	wire	                    inst_hit_i,$/;"	p
wire	Main/IF.v	/^    input	wire	                    inst_v_i,$/;"	p
wire	Main/IF.v	/^    input	wire	    [`CACHE_TAG]    inst_pfn_i,$/;"	p
wire	Main/IF.v	/^    input	wire	    [`TLB_WIDTH]    inst_index_i,$/;"	p
wire	Main/IF.v	/^    input	wire	[`ALL_CHECKPOINT]   SBA_checkPoint_w_i,     \/\/ 检查点信息，用于恢复PHT和IJTC$/;"	p
wire	Main/IF.v	/^    input	wire	[`CBITS]            inst_c_i,$/;"	p
wire	Main/IF.v	/^    input	wire	[`REPAIR_ACTION]    SBA_repairAction_w_i,   \/\/ 修复行为$/;"	p
wire	Main/IF.v	/^    input   wire                            inst_data_ok,$/;"	p
wire	Main/IF.v	/^    input   wire                            inst_index_ok,      \/\/ 类似addr_ok,表示cache成功接受到CPU发送的index$/;"	p
wire	Main/IF.v	/^    input   wire                        CP0_excOccur_w_i,         \/\/ WB检测到异常$/;"	p
wire	Main/IF.v	/^    input   wire                        SBA_corrTake_w_i,       \/\/正确的分支方向$/;"	p
wire	Main/IF.v	/^    input   wire                        SBA_flush_w_i,          \/\/表示分支错误，需要刷新流水线$/;"	p
wire	Main/IF.v	/^    input   wire    [`FOUR_WORDS]           inst_rdata,$/;"	p
wire	Main/IF.v	/^    input   wire    [`SINGLE_WORD]      CP0_Config_w_i,$/;"	p
wire	Main/IF.v	/^    input   wire    [`SINGLE_WORD]      CP0_excDestPC_w_i,        \/\/ 延迟确认的PC，重新从此处跳转$/;"	p
wire	Main/IF.v	/^    input   wire    [`SINGLE_WORD]      SBA_corrDest_w_i,       \/\/正确的分支目的$/;"	p
wire	Main/IF.v	/^    input   wire    [`SINGLE_WORD]      SBA_erroVAddr_w_i,      \/\/分支错误PC$/;"	p
wire	Main/IF.v	/^    input wire clk,$/;"	p
wire	Main/IF.v	/^    input wire rst$/;"	p
wire	Main/IF.v	/^    output	wire	                    IF_isRefill_o,$/;"	p
wire	Main/IF.v	/^    output	wire	                    inst_oddPage_o,$/;"	p
wire	Main/IF.v	/^    output	wire	[`ASID]             inst_asid_o,$/;"	p
wire	Main/IF.v	/^    output	wire	[`VPN2]             inst_vpn2_o,$/;"	p
wire	Main/IF.v	/^    output	wire                        IF_hasException_o,$/;"	p
wire	Main/IF.v	/^    output	wire    [`EXCCODE]          IF_ExcCode_o,$/;"	p
wire	Main/IF.v	/^    output  wire	                    IF_valid_o,$/;"	p
wire	Main/IF.v	/^    output  wire	[3:0]               IF_instEnable_o,$/;"	p
wire	Main/IF.v	/^    output  wire	[`SINGLE_WORD]      IF_instBasePC_o,$/;"	p
wire	Main/IF.v	/^    output  wire                            inst_hasException,$/;"	p
wire	Main/IF.v	/^    output  wire                            inst_req,$/;"	p
wire	Main/IF.v	/^    output  wire                            inst_unCache,$/;"	p
wire	Main/IF.v	/^    output  wire                            inst_wr,$/;"	p
wire	Main/IF.v	/^    output  wire                        inst_tlbReq_o,$/;"	p
wire	Main/IF.v	/^    output  wire    [1:0]                   inst_size,          \/\/ constant value = 2'b11 表示一次传输4条指令,共16字节;$/;"	p
wire	Main/IF.v	/^    output  wire    [2:0]               IF_instNum_o,$/;"	p
wire	Main/IF.v	/^    output  wire    [31:0]                  inst_wdata,         \/\/ 从不使用$/;"	p
wire	Main/IF.v	/^    output  wire    [3:0]               IF_predTake_p_o,$/;"	p
wire	Main/IF.v	/^    output  wire    [4*`ALL_CHECKPOINT] IF_predInfo_p_o,$/;"	p
wire	Main/IF.v	/^    output  wire    [4*`SINGLE_WORD]    IF_predDest_p_o,$/;"	p
wire	Main/IF.v	/^    output  wire    [`CACHE_INDEX]          inst_index,         \/\/ 4字对齐,即最后4bit一定为0$/;"	p
wire	Main/IF.v	/^    output  wire    [`CACHE_TAG]            inst_tag,      $/;"	p
wire	Main/IF.v	/^    output  wire    [`FOUR_WORDS]       IF_inst_p_o,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire	                        SCT_BTBValidTake_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire	                        SCT_hasException_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire	                        SCT_isRefill_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire	                        SCT_needDelaySlot_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire	                        SCT_valid_i,        \/\/ SecondCacheTrace送入信号$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire	[3:0]                   SCT_PHT_predTake_p_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire	[4*`IJTC_CHECKPOINT]    SCT_IJTC_checkPoint_p_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire	[4*`SINGLE_WORD]        SCT_IJTC_predDest_p_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire	[4*`SINGLE_WORD]        SCT_RAS_predDest_p_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire	[`SINGLE_WORD]          SCT_BTBfifthVAddr_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire    [4*`PHT_CHECKPOINT]     SCT_PHT_checkPoint_p_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire    [4*`RAS_CHECKPOINT]     SCT_RAS_checkPoint_p_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire    [`EXCCODE]              SCT_ExcCode_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire    [`INST_NUM]             SCT_originEnable_i,     \/\/ PCR寄存器的使能$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire    [`SINGLE_WORD]          SCT_BTBValidDest_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input	wire    [`SINGLE_WORD]          SCT_VAddr_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input   wire 	[3:0]                   SCT_predTake_p_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input   wire 	[4*`SINGLE_WORD]        SCT_predDest_p_i,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input   wire    [`FOUR_WORDS]           inst_rdata,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    input   wire    [`INST_NUM]             SCT_BTBInstEnable_i,    \/\/ 表示BTB读出的4条目标指令那些是需要$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire	                    BSC_DelaySlotIsGetted_w_o,\/\/ SCT是否传入了needDelaySlot$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire	                    BSC_correctTake_w_o,      \/\/ 跳转方向$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire	                    BSC_isDiffRes_w_o,        \/\/ BTB和BPU预测结果不同$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire	                    BSC_needCancel_w_o,       \/\/ 前段BTB预测失败$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire	                    BSC_needDelaySlot_w_o,    \/\/ BPU预测是否需要延迟槽$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire	                    IF_isRefill_o,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire	                    IF_valid_o,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire	[3:0]               IF_instEnable_o,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire	[`ALL_CHECKPOINT]   BSC_allCheckPoint_w_o,    \/\/ 三个分支预测单元共用一个$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire	[`REPAIR_ACTION]    BSC_repairAction_w_o,     \/\/ $/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire	[`SINGLE_WORD]      BSC_correctDest_w_o,      \/\/ 跳转目的$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire	[`SINGLE_WORD]      BSC_erroVAdr_w_o,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire	[`SINGLE_WORD]      BSC_fifthVAddr_w_o,       \/\/ VAddr开始的第5条指令$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire	[`SINGLE_WORD]      BSC_validDest_w_o,        \/\/ BPU预测的有效PC$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire	[`SINGLE_WORD]      IF_instBasePC_o,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire                        IF_hasException_o,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire    [2:0]               IF_instNum_o,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output	wire    [`EXCCODE]          IF_ExcCode_o$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output  wire    [3:0]               IF_predTake_p_o,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output  wire    [4*`ALL_CHECKPOINT] IF_predInfo_p_o,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output  wire    [4*`SINGLE_WORD]    IF_predDest_p_o,$/;"	p
wire	Main/IF/BranchSelectCheck.v	/^    output  wire    [`FOUR_WORDS]       IF_inst_p_o,$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    input	wire	                    FU_correctTake_w_i,      \/\/ 跳转方向$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    input	wire	                PCG_needDelaySlot_i,$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    input	wire	[`REPAIR_ACTION]    FU_repairAction_w_i,   \/\/ IJTC行为$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    input	wire	[`SINGLE_WORD]      FU_correctDest_w_i,      \/\/ 跳转目的$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    input	wire	[`SINGLE_WORD]      FU_erroVAddr_w_i,$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    input   wire                    clk,$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    input   wire                    rst,$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    input   wire    [3:0]           PCR_instEnable_i,           \/\/ BTB根据PC所需要的指令进行预测和选择，不要的不选择$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    input   wire    [`FOUR_WORDS]   PCG_VAddr_p_i,              \/\/ 给BTB的四条PC$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    output	wire	                    BTB_DelaySlotIsGetted_o$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    output	wire	                    BTB_needDelaySlot_o,$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    output	wire	                    BTB_validTake_o,$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    output	wire	[3:0]               BTB_predTake_p_o,$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    output	wire	[4*`SINGLE_WORD]    BTB_predDest_p_o,$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    output	wire	[`SINGLE_WORD]      BTB_fifthVAddr_o,        \/\/ VAddr开始的第5条指令$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    output	wire	[`SINGLE_WORD]      BTB_validDest_o,$/;"	p
wire	Main/IF/BranchTargetBuffer.v	/^    output  wire    [`INST_NUM]         BTB_instEnable_o,       \/\/ 表示BTB读出的4条目标指令那些是需要$/;"	p
wire	Main/IF/DelaySlotProcessor.v	/^    input	wire	                    BSC_DelaySlotIsGetted_w_i,$/;"	p
wire	Main/IF/DelaySlotProcessor.v	/^    input	wire	                    BSC_isDiffRes_w_i,$/;"	p
wire	Main/IF/DelaySlotProcessor.v	/^    input	wire	                    BSC_needDelaySlot_w_i,$/;"	p
wire	Main/IF/DelaySlotProcessor.v	/^    input	wire	                    BTB_DelaySlotIsGetted_i,$/;"	p
wire	Main/IF/DelaySlotProcessor.v	/^    input	wire	                    BTB_needDelaySlot_i,$/;"	p
wire	Main/IF/DelaySlotProcessor.v	/^    input	wire	[`SINGLE_WORD]      BSC_fifthVAddr_w_i,        \/\/ VAddr开始的第5条指令$/;"	p
wire	Main/IF/DelaySlotProcessor.v	/^    input	wire	[`SINGLE_WORD]      BSC_validDest_w_i,$/;"	p
wire	Main/IF/DelaySlotProcessor.v	/^    input	wire	[`SINGLE_WORD]      BTB_fifthVAddr_i,        \/\/ VAddr开始的第5条指令$/;"	p
wire	Main/IF/DelaySlotProcessor.v	/^    input	wire	[`SINGLE_WORD]      BTB_validDest_i,$/;"	p
wire	Main/IF/DelaySlotProcessor.v	/^    output	wire	                    DSP_needDelaySlot_o$/;"	p
wire	Main/IF/DelaySlotProcessor.v	/^    output	wire	[`SINGLE_WORD]      DSP_predictPC_o,$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input	wire	                    BSC_needCancel_w_i, \/\/ 两种分支预测结果不同$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input	wire	                    BTB_validTake_i,$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input	wire	                    CP0_excOccur_w_i,   \/\/ 异常发生$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input	wire	                    PCG_needDelaySlot_i,$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input	wire	                    SBA_flush_w_i,      \/\/ 分支预测恢复$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input	wire	                    SCT_allowin_w_i,$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input	wire	                    inst_index_ok,$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input	wire	                    inst_req,$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input	wire	[3:0]               BTB_predTake_p_i,$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input	wire	[4*`SINGLE_WORD]    BTB_predDest_p_i,$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input	wire	[`SINGLE_WORD]      BTB_fifthVAddr_i,$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input	wire	[`SINGLE_WORD]      BTB_validDest_i,$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input	wire	clk,$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input	wire	rst,$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input	wire 	                    PCR_hasException_i,  \/\/ 表明存在异常$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input 	wire    [`EXCCODE]          PCR_ExcCode_i,$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input   wire    [`INST_NUM]         BTB_instEnable_i,   \/\/ 表示BTB读出的4条目标指令那些是需要$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input   wire    [`INST_NUM]         PCR_instEnable_i,    \/\/ 表示此次读出的4条目标指令那些是需要的$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    input   wire    [`SINGLE_WORD]      PCR_VAddr_i,         \/\/ to TLB$/;"	p
wire	Main/IF/FirstCacheTrace.v	/^    output	wire                        FCT_valid_o,$/;"	p
wire	Main/IF/FixUnit.v	/^    input	wire	                    BSC_correctTake_w_i,      \/\/ 跳转方向$/;"	p
wire	Main/IF/FixUnit.v	/^    input	wire	                    BSC_isDiffRes_w_i,        \/\/ BTB和BPU预测结果不同$/;"	p
wire	Main/IF/FixUnit.v	/^    input	wire	[`ALL_CHECKPOINT]   BSC_allCheckPoint_w_i,    \/\/ 三个分支预测单元共用一个$/;"	p
wire	Main/IF/FixUnit.v	/^    input	wire	[`ALL_CHECKPOINT]   SBA_checkPoint_w_i,     \/\/ 检查点信息，用于恢复PHT和IJTC$/;"	p
wire	Main/IF/FixUnit.v	/^    input	wire	[`REPAIR_ACTION]    BSC_repairAction_w_i,     \/\/ $/;"	p
wire	Main/IF/FixUnit.v	/^    input	wire	[`REPAIR_ACTION]    SBA_repairAction_w_i,   \/\/ 修复行为$/;"	p
wire	Main/IF/FixUnit.v	/^    input	wire	[`SINGLE_WORD]      BSC_correctDest_w_i,      \/\/ 跳转目的$/;"	p
wire	Main/IF/FixUnit.v	/^    input	wire	[`SINGLE_WORD]      BSC_erroVAdr_w_i,$/;"	p
wire	Main/IF/FixUnit.v	/^    input   wire                        SBA_corrTake_w_i,       \/\/正确的分支方向$/;"	p
wire	Main/IF/FixUnit.v	/^    input   wire                        SBA_flush_w_i,          \/\/表示分支错误，需要刷新流水线$/;"	p
wire	Main/IF/FixUnit.v	/^    input   wire    [`SINGLE_WORD]      SBA_corrDest_w_i,       \/\/正确的分支目的$/;"	p
wire	Main/IF/FixUnit.v	/^    input   wire    [`SINGLE_WORD]      SBA_erroVAddr_w_i,      \/\/分支错误PC$/;"	p
wire	Main/IF/FixUnit.v	/^    output	wire	                    FU_correctTake_w_o,      \/\/ 跳转方向$/;"	p
wire	Main/IF/FixUnit.v	/^    output	wire	[`ALL_CHECKPOINT]   FU_allCheckPoint_w_o,    \/\/ 三个分支预测单元共用一个$/;"	p
wire	Main/IF/FixUnit.v	/^    output	wire	[`REPAIR_ACTION]    FU_repairAction_w_o,     \/\/ $/;"	p
wire	Main/IF/FixUnit.v	/^    output	wire	[`SINGLE_WORD]      FU_correctDest_w_o       \/\/ 跳转目的$/;"	p
wire	Main/IF/FixUnit.v	/^    output	wire	[`SINGLE_WORD]      FU_erroVAddr_w_o,$/;"	p
wire	Main/IF/IndirectJumpTargetCache.v	/^    input	wire	                    FU_correctTake_w_i,      \/\/ 跳转方向$/;"	p
wire	Main/IF/IndirectJumpTargetCache.v	/^    input	wire	    clk,$/;"	p
wire	Main/IF/IndirectJumpTargetCache.v	/^    input	wire	    inst_index_ok,$/;"	p
wire	Main/IF/IndirectJumpTargetCache.v	/^    input	wire	    inst_req,$/;"	p
wire	Main/IF/IndirectJumpTargetCache.v	/^    input	wire	    rst,$/;"	p
wire	Main/IF/IndirectJumpTargetCache.v	/^    input	wire	[`ALL_CHECKPOINT]   FU_allCheckPoint_w_i,  \/\/ 三个分支预测单元共用一个$/;"	p
wire	Main/IF/IndirectJumpTargetCache.v	/^    input	wire	[`REPAIR_ACTION]    FU_repairAction_w_i,   \/\/ IJTC行为$/;"	p
wire	Main/IF/IndirectJumpTargetCache.v	/^    input	wire	[`SINGLE_WORD]      BTB_fifthVAddr_i, \/\/ 该地址是四值字对齐,当第四条预测失败，返回该地址$/;"	p
wire	Main/IF/IndirectJumpTargetCache.v	/^    input	wire	[`SINGLE_WORD]      FU_correctDest_w_i       \/\/ 跳转目的$/;"	p
wire	Main/IF/IndirectJumpTargetCache.v	/^    input	wire	[`SINGLE_WORD]      FU_erroVAddr_w_i,$/;"	p
wire	Main/IF/IndirectJumpTargetCache.v	/^    input	wire	[`SINGLE_WORD]      PCR_VAddr_i,     \/\/ 该地址是四值字对齐,需要预测该PC开始的四条指令$/;"	p
wire	Main/IF/IndirectJumpTargetCache.v	/^    output	wire	[4*`IJTC_CHECKPOINT]  IJTC_checkPoint_p_o,$/;"	p
wire	Main/IF/IndirectJumpTargetCache.v	/^    output	wire	[4*`SINGLE_WORD]      IJTC_predDest_p_o,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    input	wire	                FCT_hasException_i,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    input	wire	                inst_d_i,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    input	wire	                inst_hit_i,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    input	wire	                inst_index_ok,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    input	wire	                inst_req,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    input	wire	                inst_v_i,\/*}}}*\/$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    input	wire	[`CACHE_TAG]    inst_pfn_i,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    input	wire	[`CBITS]        inst_c_i,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    input	wire	[`SINGLE_WORD]  PCR_VAddr_i,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    input	wire	[`TLB_WIDTH]    inst_index_i,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    input	wire	clk,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    input	wire	rst,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    input   wire    [`SINGLE_WORD]  CP0_Config_w_i,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    output	wire	                MMU_isRefill_o,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    output	wire	                inst_oddPage_o,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    output	wire	[`ASID]         inst_asid_o,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    output	wire	[`VPN2]         inst_vpn2_o,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    output	wire 	                MMU_hasException_o,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    output	wire 	                inst_hasException,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    output	wire 	                inst_unCache$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    output	wire 	[`CACHE_TAG]    inst_tag,$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    output	wire 	[`EXCCODE]      MMU_ExcCode_o,      \/\/包括TLB异常以及非对齐异常$/;"	p
wire	Main/IF/MemoryManagementUnit.v	/^    output  wire                    inst_tlbReq_o,$/;"	p
wire	Main/IF/PCGenerator.v	/^    input	wire	[`SINGLE_WORD]  PCR_lastVAddr_i,$/;"	p
wire	Main/IF/PCGenerator.v	/^    input   wire                    PCR_needDelaySlot_i, \/\/ 表示第一条指令是延迟槽指令$/;"	p
wire	Main/IF/PCGenerator.v	/^    input   wire    [`SINGLE_WORD]  PCR_VAddr_i,     \/\/ 必然四字对齐$/;"	p
wire	Main/IF/PCGenerator.v	/^    output	wire	                PCG_needDelaySlot_o,$/;"	p
wire	Main/IF/PCGenerator.v	/^    output  wire    [`FOUR_WORDS]   PCG_VAddr_p_o    \/\/ 给BTB的四条PC$/;"	p
wire	Main/IF/PCRegister.v	/^    input	wire	                BSC_isDiffRes_w_i,      \/\/ 前段分支预测刷新，采用DSP信号$/;"	p
wire	Main/IF/PCRegister.v	/^    input	wire	                DSP_needDelaySlot_i,$/;"	p
wire	Main/IF/PCRegister.v	/^    input	wire	                ID_stopFetch_i,$/;"	p
wire	Main/IF/PCRegister.v	/^    input	wire	[`SINGLE_WORD]  DSP_predictPC_i,$/;"	p
wire	Main/IF/PCRegister.v	/^    input   wire                    CP0_excOccur_w_i,         \/\/ WB检测到异常$/;"	p
wire	Main/IF/PCRegister.v	/^    input   wire                    SBA_flush_w_i,          \/\/ 后段分支预测刷新，采用SBA地址信号$/;"	p
wire	Main/IF/PCRegister.v	/^    input   wire                    inst_index_ok,$/;"	p
wire	Main/IF/PCRegister.v	/^    input   wire        clk,$/;"	p
wire	Main/IF/PCRegister.v	/^    input   wire        rst,$/;"	p
wire	Main/IF/PCRegister.v	/^    input   wire    [`SINGLE_WORD]  CP0_excDestPC_w_i,        \/\/ 延迟确认的PC，重新从此处跳转$/;"	p
wire	Main/IF/PCRegister.v	/^    input   wire    [`SINGLE_WORD]  SBA_corrDest_w_i,       \/\/ 异常PC的跳转目的$/;"	p
wire	Main/IF/PCRegister.v	/^    output	wire 	                PCR_hasException_o,  \/\/ 表明存在异常$/;"	p
wire	Main/IF/PCRegister.v	/^    output	wire 	[`EXCCODE]      PCR_ExcCode_o,$/;"	p
wire	Main/IF/PCRegister.v	/^    output	wire    [`SINGLE_WORD]  PCR_lastVAddr_o,$/;"	p
wire	Main/IF/PCRegister.v	/^    output  wire                    inst_req,$/;"	p
wire	Main/IF/PCRegister.v	/^    output  wire                    inst_wr,                \/\/ constant value = 1'b0;$/;"	p
wire	Main/IF/PCRegister.v	/^    output  wire     [`CACHE_INDEX]  inst_index,             \/\/ 4字对齐，`CACHE_INDEX'hx0$/;"	p
wire	Main/IF/PCRegister.v	/^    output  wire    [1:0]           inst_size,              \/\/ constant value = 2'b11 表示一次传输4条指令，共16字节;'$/;"	p
wire	Main/IF/PCRegister.v	/^    output  wire    [`INST_NUM]     PCR_instEnable_o \/\/ 表示此次读出的4条目标指令那些是需要的$/;"	p
wire	Main/IF/PCRegister.v	/^    output  wire    [`SINGLE_WORD]  PCR_VAddr_o,     \/\/ to TLB$/;"	p
wire	Main/IF/PCRegister.v	/^    output  wire    [`SINGLE_WORD]  inst_wdata,             \/\/ constant value = 32'b0$/;"	p
wire	Main/IF/PatternHistoryTable.v	/^    input	wire	                    FU_correctTake_w_i$/;"	p
wire	Main/IF/PatternHistoryTable.v	/^    input	wire	                    inst_index_ok,$/;"	p
wire	Main/IF/PatternHistoryTable.v	/^    input	wire	                    inst_req,$/;"	p
wire	Main/IF/PatternHistoryTable.v	/^    input	wire	[`ALL_CHECKPOINT]   FU_allCheckPoint_w_i,  \/\/ 三个分支预测单元共用一个$/;"	p
wire	Main/IF/PatternHistoryTable.v	/^    input	wire	[`REPAIR_ACTION]    FU_repairAction_w_i,   \/\/ PHT行为$/;"	p
wire	Main/IF/PatternHistoryTable.v	/^    input	wire	[`SINGLE_WORD]      FU_erroVAddr_w_i,$/;"	p
wire	Main/IF/PatternHistoryTable.v	/^    input	wire	[`SINGLE_WORD]      PCR_VAddr_i,$/;"	p
wire	Main/IF/PatternHistoryTable.v	/^    input	wire	clk,$/;"	p
wire	Main/IF/PatternHistoryTable.v	/^    input	wire	rst,$/;"	p
wire	Main/IF/PatternHistoryTable.v	/^    output	wire	[3:0]               PHT_predTake_p_o,$/;"	p
wire	Main/IF/PatternHistoryTable.v	/^    output	wire    [4*`PHT_CHECKPOINT] PHT_checkPoint_p_o,$/;"	p
wire	Main/IF/ReturnAddressStack.v	/^    input	wire	    inst_index_ok,$/;"	p
wire	Main/IF/ReturnAddressStack.v	/^    input	wire	    inst_req,$/;"	p
wire	Main/IF/ReturnAddressStack.v	/^    input	wire	[`ALL_CHECKPOINT]   FU_allCheckPoint_w_i,  \/\/ 三个分支预测单元共用一个$/;"	p
wire	Main/IF/ReturnAddressStack.v	/^    input	wire	[`REPAIR_ACTION]    FU_repairAction_w_i,   \/\/ RAS行为$/;"	p
wire	Main/IF/ReturnAddressStack.v	/^    input	wire	[`SINGLE_WORD]      BTB_fifthVAddr_i, \/\/ 该地址是四值字对齐,当第四条预测失败，返回该地址$/;"	p
wire	Main/IF/ReturnAddressStack.v	/^    input	wire	[`SINGLE_WORD]      FU_erroVAddr_w_i        \/\/ PC$/;"	p
wire	Main/IF/ReturnAddressStack.v	/^    input	wire	[`SINGLE_WORD]      PCR_VAddr_i,$/;"	p
wire	Main/IF/ReturnAddressStack.v	/^    input	wire	clk,$/;"	p
wire	Main/IF/ReturnAddressStack.v	/^    input	wire	rst,$/;"	p
wire	Main/IF/ReturnAddressStack.v	/^    output	wire	[4*`SINGLE_WORD]    RAS_predDest_p_o,$/;"	p
wire	Main/IF/ReturnAddressStack.v	/^    output	wire    [4*`RAS_CHECKPOINT] RAS_checkPoint_p_o,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire		                FCT_isCanceled_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	                    BSC_needCancel_w_i, \/\/ 两种分支预测结果不同$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	                    CP0_excOccur_w_i,   \/\/ 异常发生$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	                    FCT_BTBValidTake_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	                    FCT_hasException_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	                    FCT_needDelaySlot_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	                    MMU_hasException_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	                    MMU_isRefill_i,       \/\/ 表示是重填异常$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	                    SBA_flush_w_i,      \/\/ 分支预测恢复$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	                    inst_data_ok,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	[3:0]                   PHT_predTake_p_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	[4*`IJTC_CHECKPOINT]    IJTC_checkPoint_p_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	[4*`SINGLE_WORD]        IJTC_predDest_p_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	[4*`SINGLE_WORD]        RAS_predDest_p_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	[`EXCCODE]          FCT_ExcCode_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	[`SINGLE_WORD]      FCT_BTBValidDest_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	[`SINGLE_WORD]      FCT_BTBfifthVAddr_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	clk,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire	rst,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire  	[3:0]               FCT_predTake_p_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire  	[4*`SINGLE_WORD]    FCT_predDest_p_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire                        FCT_valid_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire    [4*`PHT_CHECKPOINT]     PHT_checkPoint_p_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire    [4*`RAS_CHECKPOINT]     RAS_checkPoint_p_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire    [`EXCCODE]          MMU_ExcCode_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire    [`INST_NUM]         FCT_originEnable_i,     \/\/ PCR寄存器的使能$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input	wire    [`SINGLE_WORD]      FCT_VAddr_i,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    input   wire    [`INST_NUM]         FCT_BTBInstEnable_i,    \/\/ 表示BTB读出的4条目标指令那些是需要$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    output	wire	                SCT_allowin_w_o,$/;"	p
wire	Main/IF/SecondCacheTrace.v	/^    output	wire	                SCT_valid_o,$/;"	p
wire	Main/IF/components/BranchFourToOne.v	/^    input	wire	[4*`SINGLE_WORD]    predDest_p_i,$/;"	p
wire	Main/IF/components/BranchFourToOne.v	/^    input	wire	[`INST_NUM]         originEnable_i,$/;"	p
wire	Main/IF/components/BranchFourToOne.v	/^    input	wire	[`INST_NUM]         predTake_p_i,$/;"	p
wire	Main/IF/components/BranchFourToOne.v	/^    input	wire	[`SINGLE_WORD]      fifthPC_i,$/;"	p
wire	Main/IF/components/BranchFourToOne.v	/^    output	wire	                    needDelaySlot,$/;"	p
wire	Main/IF/components/BranchFourToOne.v	/^    output	wire	                    validTake_o,$/;"	p
wire	Main/IF/components/BranchFourToOne.v	/^    output	wire	[`INST_NUM]         actualEnable_o,$/;"	p
wire	Main/IF/components/BranchFourToOne.v	/^    output	wire	[`INST_NUM]         firstValidBit$/;"	p
wire	Main/IF/components/BranchFourToOne.v	/^    output	wire	[`SINGLE_WORD]      validDest_o,$/;"	p
wire	Main/IF/components/Compressor.v	/^    input	wire	[`INST_NUM]     actualEnable,$/;"	p
wire	Main/IF/components/Compressor.v	/^    output	wire	[2:0]           outputNumber,$/;"	p
wire	Main/IF/components/Compressor.v	/^    output	wire	[4*`INST_NUM]   instSelect_p$/;"	p
wire	Main/IF/components/Compressor.v	/^    output	wire	[`INST_NUM]     outputEnable,$/;"	p
wire	Main/IF/components/RepairDecorder.v	/^    input	wire	                    isDiffRes,$/;"	p
wire	Main/IF/components/RepairDecorder.v	/^    input	wire	[`SINGLE_WORD]      inst,$/;"	p
wire	Main/IF/components/RepairDecorder.v	/^    output	wire	[`REPAIR_ACTION]    now_RepairAction$/;"	p
wire	Main/IF/components/TakeDestDecorder.v	/^    input	wire	                    SCT_valid_i,$/;"	p
wire	Main/IF/components/TakeDestDecorder.v	/^    input	wire	[`FOUR_WORDS]       inst_rdata,$/;"	p
wire	Main/IF/components/TakeDestDecorder.v	/^    output	wire	[4*`B_SELECT]       takeDestSel_p$/;"	p
wire	Main/MEM.v	/^    input	wire	                        CP0_excOccur_w_i,$/;"	p
wire	Main/MEM.v	/^    input	wire	                        DMMU_tlbRefill_i,   \/\/ 是否有重填异常$/;"	p
wire	Main/MEM.v	/^    input	wire	                        PREMEM_eret_i,$/;"	p
wire	Main/MEM.v	/^    input	wire	                        PREMEM_hasException_i,      \/\/ 存在异常$/;"	p
wire	Main/MEM.v	/^    input	wire	                        PREMEM_isCacheInst_i,       \/\/ 表示是Cache指令$/;"	p
wire	Main/MEM.v	/^    input	wire	                        PREMEM_isDangerous_i,       \/\/ 该条指令是危险指令,传递给下一级$/;"	p
wire	Main/MEM.v	/^    input	wire	                        PREMEM_isDelaySlot_i,       \/\/ 该指令是否是延迟槽指令,用于异常处理$/;"	p
wire	Main/MEM.v	/^    input	wire	                        PREMEM_isRefill_i,$/;"	p
wire	Main/MEM.v	/^    input	wire	                        PREMEM_nonBlockMark_i,      \/\/ 该条指令执行在MDU运算期间$/;"	p
wire	Main/MEM.v	/^    input	wire	                        PREMEM_readCp0_i,           \/\/ mfc0,才会拉高$/;"	p
wire	Main/MEM.v	/^    input	wire	                        PREMEM_valid_w_i,$/;"	p
wire	Main/MEM.v	/^    input	wire	                        PREMEM_writeCp0_i,          \/\/ mtc0,才会拉高$/;"	p
wire	Main/MEM.v	/^    input	wire	                        REEXE_okToChange_w_i,$/;"	p
wire	Main/MEM.v	/^    input	wire	                        WB_allowin_w_i,$/;"	p
wire	Main/MEM.v	/^    input	wire	                        data_data_ok,$/;"	p
wire	Main/MEM.v	/^    input	wire	                        data_hasException,$/;"	p
wire	Main/MEM.v	/^    input	wire	[1:0]                   PREMEM_alignCheck_i,$/;"	p
wire	Main/MEM.v	/^    input	wire	[`CACHE_OP]             PREMEM_CacheOperator_i,     \/\/ Cache指令op$/;"	p
wire	Main/MEM.v	/^    input	wire	[`CP0_POSITION]         PREMEM_positionCp0_i,       \/\/ {rd,sel}$/;"	p
wire	Main/MEM.v	/^    input	wire	[`EXCCODE]              DMMU_ExcCode_i,     \/\/包括TLB异常以及非对齐异常$/;"	p
wire	Main/MEM.v	/^    input	wire	[`EXCEP_SEG]            CP0_exceptSeg_w_i,$/;"	p
wire	Main/MEM.v	/^    input	wire	[`SINGLE_WORD]          CP0_Cause_w_i,$/;"	p
wire	Main/MEM.v	/^    input	wire	[`SINGLE_WORD]          CP0_Status_w_i,$/;"	p
wire	Main/MEM.v	/^    input	wire	[`SINGLE_WORD]          CP0_readData_w_i,   \/\/ 读出来的寄存器数值$/;"	p
wire	Main/MEM.v	/^    input	wire	[`SINGLE_WORD]          PREMEM_CacheAddress_i,      \/\/ Cache指令地址$/;"	p
wire	Main/MEM.v	/^    input	wire	[`SINGLE_WORD]          PREMEM_VAddr_i,$/;"	p
wire	Main/MEM.v	/^    input	wire	[`SINGLE_WORD]          PREMEM_exceptBadVAddr_i,    \/\/ 虚地址异常$/;"	p
wire	Main/MEM.v	/^    input	wire	[`SINGLE_WORD]          PREMEM_rtData_i,$/;"	p
wire	Main/MEM.v	/^    input	wire	clk,$/;"	p
wire	Main/MEM.v	/^    input	wire	rst,$/;"	p
wire	Main/MEM.v	/^    input	wire                            PREMEM_exceptionRisk_i,     \/\/ 存在异常的风险$/;"	p
wire	Main/MEM.v	/^    input	wire                            PREMEM_memReq_i,           \/\/ load指令模式		$/;"	p
wire	Main/MEM.v	/^    input	wire                            WB_hasRisk_w_i, $/;"	p
wire	Main/MEM.v	/^    input	wire    [`EXCCODE]              PREMEM_ExcCode_i,           \/\/ 异常信号$/;"	p
wire	Main/MEM.v	/^    input	wire    [`GPR_NUM]              PREMEM_writeNum_i,$/;"	p
wire	Main/MEM.v	/^    input	wire    [`LOAD_SEL]             PREMEM_loadSel_i,           \/\/ load指令模式		$/;"	p
wire	Main/MEM.v	/^    input	wire    [`SINGLE_WORD]          PREMEM_preliminaryRes_i,    \/\/ 对应于SBA段的aluRes，PREMEM段的结果对于乘除指令和mf指令是已经完成了的        $/;"	p
wire	Main/MEM.v	/^    output	wire	                        MEM_allowin_w_o,        \/\/ 逐级互锁信号$/;"	p
wire	Main/MEM.v	/^    output	wire	                        MEM_eret_w_o,$/;"	p
wire	Main/MEM.v	/^    output	wire	                        MEM_exceptionRisk_o,$/;"	p
wire	Main/MEM.v	/^    output	wire	                        MEM_forwardMode_w_o,    $/;"	p
wire	Main/MEM.v	/^    output	wire	                        MEM_hasDangerous_w_o,   \/\/ mul,clo,clz,madd,msub,cache,tlb等危险指令$/;"	p
wire	Main/MEM.v	/^    output	wire	                        MEM_hasException_w_o,     \/\/ 存在异常$/;"	p
wire	Main/MEM.v	/^    output	wire	                        MEM_hasRisk_w_o,         $/;"	p
wire	Main/MEM.v	/^    output	wire	                        MEM_isDangerous_o,      \/\/ 表示该条指令是不是危险指令,传递给下一级$/;"	p
wire	Main/MEM.v	/^    output	wire	                        MEM_isDelaySlot_w_o,$/;"	p
wire	Main/MEM.v	/^    output	wire	                        MEM_isInterrupt_w_o,    \/\/ 不同异常地址$/;"	p
wire	Main/MEM.v	/^    output	wire	                        MEM_isRefill_w_o,       \/\/ 不同异常地址$/;"	p
wire	Main/MEM.v	/^    output	wire	                        MEM_memReq_o,$/;"	p
wire	Main/MEM.v	/^    output	wire	                        MEM_nonBlockMark_w_o,$/;"	p
wire	Main/MEM.v	/^    output	wire	                        MEM_valid_w_o,          \/\/ 给下一级流水线决定是否采样$/;"	p
wire	Main/MEM.v	/^    output	wire	                        MEM_writeCp0_w_o,       \/\/ mtc0,才会拉高}}}$/;"	p
wire	Main/MEM.v	/^    output	wire	[1:0]                   MEM_alignCheck_o,$/;"	p
wire	Main/MEM.v	/^    output	wire	[`CP0_POSITION]         MEM_positionCp0_w_o,    \/\/ {rd,sel}$/;"	p
wire	Main/MEM.v	/^    output	wire	[`GPR_NUM]              MEM_writeNum_o,         \/\/ 回写寄存器数值,0为不回写$/;"	p
wire	Main/MEM.v	/^    output	wire	[`GPR_NUM]              MEM_writeNum_w_o,    $/;"	p
wire	Main/MEM.v	/^    output	wire	[`SINGLE_WORD]          MEM_VAddr_o,$/;"	p
wire	Main/MEM.v	/^    output	wire	[`SINGLE_WORD]          MEM_exceptBadVAddr_w_o,$/;"	p
wire	Main/MEM.v	/^    output	wire	[`SINGLE_WORD]          MEM_exceptPC_w_o,$/;"	p
wire	Main/MEM.v	/^    output	wire	[`SINGLE_WORD]          MEM_rtData_o,$/;"	p
wire	Main/MEM.v	/^    output	wire	[`SINGLE_WORD]          MEM_writeData_w_o,      \/\/ 需要写入CP0的内容$/;"	p
wire	Main/MEM.v	/^    output	wire    [`EXCCODE]              MEM_ExcCode_w_o,          \/\/ 异常信号$/;"	p
wire	Main/MEM.v	/^    output	wire    [`LOAD_SEL]             MEM_loadSel_o           \/\/ load指令模式		$/;"	p
wire	Main/MEM.v	/^    output	wire    [`SINGLE_WORD]          MEM_finalRes_o,         \/\/ 最终写入寄存器的数值 包括alu，乘除，cp0$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        CP0_excOccur_w_i,$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        EXE_down_eret_i,$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        EXE_down_hasException_i,    \/\/ 存在异常$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        EXE_down_isCacheInst_i,     \/\/ 表示是Cache指令$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        EXE_down_isDangerous_i,     \/\/ 该指令是否是延迟槽指令,用于异常处理$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        EXE_down_isDelaySlot_i,     \/\/ 该指令是否是延迟槽指令,用于异常处理$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        EXE_down_isRefill_i,$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        EXE_down_isTLBInst_i,       \/\/ 表示是TLB指令$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        EXE_down_memAtom_i,         \/\/ 表示该访存操作是原子访存操作,需要读写LLbit$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        EXE_down_memReq_i,          \/\/ 表示访存需要              $/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        EXE_down_memWR_i,            \/\/ 表示访存类型$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        EXE_down_nonBlockMark_i,    \/\/ 该条指令执行在MDU运算期间}}}$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        EXE_down_readCp0_i,         \/\/ mfc0,才会拉高$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        EXE_down_valid_w_i,$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        EXE_down_writeCp0_i,        \/\/ mtc0,才会拉高$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        EXE_up_branchRisk_i,$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        MEM_allowin_w_i,$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        SBA_flush_w_i,$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        SBA_okToChange_w_i,$/;"	p
wire	Main/PREMEM.v	/^    input	wire	                        data_index_ok,$/;"	p
wire	Main/PREMEM.v	/^    input	wire	[3:0]                   EXE_down_memEnable_i,       \/\/ 表示字节读写使能,0000表示全不写$/;"	p
wire	Main/PREMEM.v	/^    input	wire	[4:0]                   EXE_down_clRes_i,           \/\/ clo的计算结果$/;"	p
wire	Main/PREMEM.v	/^    input	wire	[`CACHE_OP]             EXE_down_CacheOperator_i,   \/\/ Cache指令op$/;"	p
wire	Main/PREMEM.v	/^    input	wire	[`CP0_POSITION]         EXE_down_positionCp0_i,     \/\/ {rd,sel}$/;"	p
wire	Main/PREMEM.v	/^    input	wire	[`EXCEP_SEG]            CP0_exceptSeg_w_i,$/;"	p
wire	Main/PREMEM.v	/^    input	wire	[`GPR_NUM]              EXE_down_writeNum_i,        \/\/ 回写寄存器数值,0为不回写$/;"	p
wire	Main/PREMEM.v	/^    input	wire	[`MATH_SEL]             EXE_down_mathResSel_i,      \/\/ 数学运算结果的选择$/;"	p
wire	Main/PREMEM.v	/^    input	wire	[`SINGLE_WORD]          EXE_down_VAddr_i,           \/\/ 用于debug和异常处理$/;"	p
wire	Main/PREMEM.v	/^    input	wire	[`SINGLE_WORD]          EXE_down_exceptBadVAddr_i,    \/\/ 虚地址异常$/;"	p
wire	Main/PREMEM.v	/^    input	wire	[`SINGLE_WORD]          EXE_down_mduRes_i,          \/\/ mfhilo的运算处理结果$/;"	p
wire	Main/PREMEM.v	/^    input	wire	[`SINGLE_WORD]          EXE_down_mulRes_i,          \/\/ 专门用于Mul的接口$/;"	p
wire	Main/PREMEM.v	/^    input	wire	[`SINGLE_WORD]          EXE_down_storeData_i,$/;"	p
wire	Main/PREMEM.v	/^    input	wire	[`TLB_INST]             EXE_down_TLBInstOperator_i, \/\/ 执行的种类$/;"	p
wire	Main/PREMEM.v	/^    input	wire	clk,$/;"	p
wire	Main/PREMEM.v	/^    input	wire	rst,$/;"	p
wire	Main/PREMEM.v	/^    input	wire                            EXE_down_exceptionRisk_i,   \/\/ 存在异常的风险$/;"	p
wire	Main/PREMEM.v	/^    input	wire                            MEM_hasRisk_w_i, $/;"	p
wire	Main/PREMEM.v	/^    input	wire    [`EXCCODE]              EXE_down_ExcCode_i,         \/\/ 异常信号	$/;"	p
wire	Main/PREMEM.v	/^    input	wire    [`LOAD_SEL]             EXE_down_loadSel_i,         \/\/ load指令模式		}}}$/;"	p
wire	Main/PREMEM.v	/^    input	wire    [`SINGLE_WORD]          EXE_down_aluRes_i,	        $/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_allowin_w_o,         \/\/ 逐级互锁信号$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_eret_o,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_eret_w_o,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_forwardMode_w_o,    $/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_hasDangerous_w_o,    \/\/ mul,clo,clz,madd,msub,cache,tlb等危险指令$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_hasException_o,      \/\/ 存在异常$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_hasException_w_o,     \/\/ 存在异常$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_hasRisk_w_o,         $/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_isCacheInst_o,       \/\/ 表示是Cache指令$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_isDangerous_o,       \/\/ 表示该条指令是不是危险指令,传递给下一级$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_isDelaySlot_o,       \/\/ 表示该指令是否是延迟槽指令,用于异常处理$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_isDelaySlot_w_o,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_isInterrupt_w_o,    \/\/ 不同异常地址$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_isRefill_o,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_isRefill_w_o,       \/\/ 不同异常地址$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_map_w_o,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_memReq_o,           $/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_nonBlockMark_o,      \/\/ 该条指令执行在MDU运算期间$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_nonBlockMark_w_o,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_readCp0_o,           \/\/ mfc0,才会拉高$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_read_w_o,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_search_w_o,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_valid_w_o,           \/\/ 用于给下一级流水线决定是否采样$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_writeCp0_o,          \/\/ mtc0,才会拉高$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_writeI_w_o,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        PREMEM_writeR_w_o,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	                        data_req,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	[11:0]                  data_index,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	[1:0]                   PREMEM_alignCheck_o,        \/\/ 访存地址后两位$/;"	p
wire	Main/PREMEM.v	/^    output	wire	[1:0]                   data_size,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	[3:0]                   data_wstrb,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	[`CACHE_OP]             PREMEM_CacheOperator_o,     \/\/ Cache指令op$/;"	p
wire	Main/PREMEM.v	/^    output	wire	[`CP0_POSITION]         PREMEM_positionCp0_o,       \/\/ {rd,sel}$/;"	p
wire	Main/PREMEM.v	/^    output	wire	[`GPR_NUM]              PREMEM_writeNum_w_o,    $/;"	p
wire	Main/PREMEM.v	/^    output	wire	[`SINGLE_WORD]          PREMEM_CacheAddress_o       \/\/ Cache指令地址$/;"	p
wire	Main/PREMEM.v	/^    output	wire	[`SINGLE_WORD]          PREMEM_VAddr_o,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	[`SINGLE_WORD]          PREMEM_VAddr_w_o,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	[`SINGLE_WORD]          PREMEM_exceptBadVAddr_o,    \/\/ 虚地址异常$/;"	p
wire	Main/PREMEM.v	/^    output	wire	[`SINGLE_WORD]          PREMEM_exceptBadVAddr_w_o,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	[`SINGLE_WORD]          PREMEM_exceptPC_w_o,$/;"	p
wire	Main/PREMEM.v	/^    output	wire	[`SINGLE_WORD]          data_wdata,$/;"	p
wire	Main/PREMEM.v	/^    output	wire                            PREMEM_exceptionRisk_o,     \/\/ 存在异常的风险$/;"	p
wire	Main/PREMEM.v	/^    output	wire                            data_wr,$/;"	p
wire	Main/PREMEM.v	/^    output	wire    [`EXCCODE]              PREMEM_ExcCode_o,           \/\/ 异常信号$/;"	p
wire	Main/PREMEM.v	/^    output	wire    [`EXCCODE]              PREMEM_ExcCode_w_o,          \/\/ 异常信号$/;"	p
wire	Main/PREMEM.v	/^    output	wire    [`GPR_NUM]              PREMEM_writeNum_o,$/;"	p
wire	Main/PREMEM.v	/^    output	wire    [`LOAD_SEL]             PREMEM_loadSel_o,           \/\/ load指令模式		$/;"	p
wire	Main/PREMEM.v	/^    output	wire    [`SINGLE_WORD]          PREMEM_preliminaryRes_o,    \/\/ 对应于SBA段的aluRes，PREMEM段的结果对于乘除指令和mf指令是已经完成了的        $/;"	p
wire	Main/PREMEM.v	/^    output	wire    [`SINGLE_WORD]          PREMEM_rtData_o,$/;"	p
wire	Main/PrimaryBranchAmend.v	/^    input	wire	                        REEXE_valid_w_i,$/;"	p
wire	Main/PrimaryBranchAmend.v	/^    input	wire	                        WB_allowin_w_i,$/;"	p
wire	Main/PrimaryBranchAmend.v	/^    input	wire	[`GPR_NUM]              REEXE_writeNum_i,             \/\/ 回写寄存器数值,0为不回写$/;"	p
wire	Main/PrimaryBranchAmend.v	/^    input	wire	[`SINGLE_WORD]          REEXE_VAddr_i,                \/\/ 用于debug和异常处理$/;"	p
wire	Main/PrimaryBranchAmend.v	/^    input	wire	clk,$/;"	p
wire	Main/PrimaryBranchAmend.v	/^    input	wire	rst,$/;"	p
wire	Main/PrimaryBranchAmend.v	/^    input	wire    [`SINGLE_WORD]          REEXE_regData_i        $/;"	p
wire	Main/PrimaryBranchAmend.v	/^    output	wire	                        PBA_okToChange_w_o,            \/\/ 逐级互锁信号$/;"	p
wire	Main/PrimaryBranchAmend.v	/^    output	wire	                        PBA_writeEnable_w_o,       \/\/ 回写使能$/;"	p
wire	Main/PrimaryBranchAmend.v	/^    output	wire	[`GPR_NUM]              PBA_writeNum_w_o,    $/;"	p
wire	Main/PrimaryBranchAmend.v	/^    output	wire	[`SINGLE_WORD]          PBA_forwardData_w_o,        \/\/ 将上一周期的运算结果前递$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^	input   wire    [0:0]			        EXE_down_hasExceprion_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^	input   wire    [`EXCCODE]			    EXE_down_ExcCode_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        DMMU_TLBPwrite_i,       \/\/ 查询指令，写Index$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        DMMU_TLBRwrite_i,       \/\/ 读指令,写大部分TLB寄存器$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        EXE_down_eret_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        EXE_down_isDelaySlot_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        EXE_down_isInterrupt_w_i,    \/\/ 不同异常地址$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        EXE_down_isRefill_w_i,       \/\/ 不同异常地址$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        EXE_down_nonBlockMark_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        MEM_eret_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        MEM_hasException_w_i,     \/\/ 存在异常$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        MEM_hasRisk_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        MEM_isDelaySlot_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        MEM_isInterrupt_w_i,    \/\/ 不同异常地址$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        MEM_isRefill_w_i,       \/\/ 不同异常地址$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        MEM_nonBlockMark_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        MEM_writeCp0_w_i,         \/\/ mtc0,才会拉高$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        PREMEM_eret_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        PREMEM_hasException_w_i,     \/\/ 存在异常$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        PREMEM_hasRisk_w_i,         $/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        PREMEM_isDelaySlot_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        PREMEM_isInterrupt_w_i,    \/\/ 不同异常地址$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        PREMEM_isRefill_w_i,       \/\/ 不同异常地址$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        PREMEM_nonBlockMark_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        WB_hasRisk_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        clk,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	                        rst,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	[`CP0_POSITION]         MEM_positionCp0_w_i,      \/\/ {rd,sel}$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	[`SINGLE_WORD]          EXE_down_exceptBadVAddr_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	[`SINGLE_WORD]          EXE_down_exceptPC_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	[`SINGLE_WORD]          MEM_exceptBadVAddr_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	[`SINGLE_WORD]          MEM_exceptPC_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	[`SINGLE_WORD]          MEM_writeData_w_i,        \/\/ 需要写入CP0的内容$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	[`SINGLE_WORD]          PREMEM_exceptBadVAddr_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire	[`SINGLE_WORD]          PREMEM_exceptPC_w_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire    [`EXCCODE]              MEM_ExcCode_w_i,          \/\/ 异常信号$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire    [`EXCCODE]              PREMEM_ExcCode_w_i,          \/\/ 异常信号$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire    [`SINGLE_WORD]          DMMU_EntryHi_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire    [`SINGLE_WORD]          DMMU_EntryLo0_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire    [`SINGLE_WORD]          DMMU_EntryLo1_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire    [`SINGLE_WORD]          DMMU_Index_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input	wire    [`SINGLE_WORD]          DMMU_PageMask_i,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    input   wire    [5:0]                   ext_int                 \/\/ 外部中断接入口 $/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    output	wire	                        CP0_excOccur_w_o,       \/\/ 判断是否发生了异常冲刷$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    output	wire	                        CP0_nonBlockMark_w_o,   \/\/此次异常发生在乘除之后$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    output	wire	[`EXCEP_SEG]            CP0_exceptSeg_w_o,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    output	wire	[`SINGLE_WORD]          CP0_Cause_w_o,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    output	wire	[`SINGLE_WORD]          CP0_Config_w_o,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    output	wire	[`SINGLE_WORD]          CP0_EntryHi_w_o, $/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    output	wire	[`SINGLE_WORD]          CP0_EntryLo0_w_o, $/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    output	wire	[`SINGLE_WORD]          CP0_EntryLo1_w_o, $/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    output	wire	[`SINGLE_WORD]          CP0_Index_w_o, $/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    output	wire	[`SINGLE_WORD]          CP0_PageMask_w_o, $/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    output	wire	[`SINGLE_WORD]          CP0_Random_w_o, $/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    output	wire	[`SINGLE_WORD]          CP0_Status_w_o,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    output	wire	[`SINGLE_WORD]          CP0_excDestPC_w_o,$/;"	p
wire	Main/PrimaryExceptionProcessor.v	/^    output	wire	[`SINGLE_WORD]          CP0_readData_w_o,       \/\/ 读出来的寄存器数值$/;"	p
wire	Main/REEXE.v	/^    input	wire	                        MEM_allowin_w_i,$/;"	p
wire	Main/REEXE.v	/^    input	wire	                        SBA_valid_w_i,$/;"	p
wire	Main/REEXE.v	/^    input	wire	[`GPR_NUM]              SBA_writeNum_i,             \/\/ 回写寄存器数值,0为不回写$/;"	p
wire	Main/REEXE.v	/^    input	wire	[`SINGLE_WORD]          SBA_VAddr_i,             \/\/ 用于debug和异常处理$/;"	p
wire	Main/REEXE.v	/^    input	wire	clk,$/;"	p
wire	Main/REEXE.v	/^    input	wire	rst,$/;"	p
wire	Main/REEXE.v	/^    input	wire    [`SINGLE_WORD]          SBA_aluRes_i,	        $/;"	p
wire	Main/REEXE.v	/^    output	wire	                        REEXE_forwardMode_w_o,    $/;"	p
wire	Main/REEXE.v	/^    output	wire	                        REEXE_okToChange_w_o,            \/\/ 逐级互锁信号$/;"	p
wire	Main/REEXE.v	/^    output	wire	                        REEXE_valid_w_o,              \/\/ 给下一级流水线决定是否采样$/;"	p
wire	Main/REEXE.v	/^    output	wire	[`GPR_NUM]              REEXE_writeNum_o,           \/\/ 回写寄存器数值,0为不回写$/;"	p
wire	Main/REEXE.v	/^    output	wire	[`GPR_NUM]              REEXE_writeNum_w_o,    $/;"	p
wire	Main/REEXE.v	/^    output	wire	[`SINGLE_WORD]          REEXE_VAddr_o,              \/\/ 用于debug和异常处理$/;"	p
wire	Main/REEXE.v	/^    output	wire    [`SINGLE_WORD]          REEXE_regData_o$/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire	                        CP0_excOccur_w_i,            $/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire	                        EXE_down_nonBlockDS_i,$/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire	                        EXE_up_branchRisk_i,$/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire	                        EXE_up_corrTake_i,          \/\/ 预测的分支跳转$/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire	                        EXE_up_valid_w_i,$/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire	                        MEM_hasRisk_w_i,$/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire	                        PREMEM_allowin_w_i,         \/\/ 上下段互锁$/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire	[`ALL_CHECKPOINT]       EXE_up_checkPoint_i,$/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire	[`EXCEP_SEG]            CP0_exceptSeg_w_i,$/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire	[`GPR_NUM]              EXE_up_writeNum_i,          \/\/ 回写寄存器数值,0为不回写$/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire	[`REPAIR_ACTION]        EXE_up_repairAction_i,      \/\/ 修复动作，包含是否需要修复的信号$/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire	[`SINGLE_WORD]          EXE_up_VAddr_i,             \/\/ 用于debug和异常处理$/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire	[`SINGLE_WORD]          EXE_up_corrDest_i,          \/\/ 预测的分支地址$/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire	clk,$/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire	rst,$/;"	p
wire	Main/SecondBranchAmend.v	/^    input	wire    [`SINGLE_WORD]          EXE_up_aluRes_i,	        $/;"	p
wire	Main/SecondBranchAmend.v	/^    output	wire	                        SBA_branchRisk_w_o,$/;"	p
wire	Main/SecondBranchAmend.v	/^    output	wire	                        SBA_forwardMode_w_o,    $/;"	p
wire	Main/SecondBranchAmend.v	/^    output	wire	                        SBA_nonBlockDS_w_o,       \/\/ 在分支跳转的时候处理非阻塞$/;"	p
wire	Main/SecondBranchAmend.v	/^    output	wire	                        SBA_okToChange_w_o,            \/\/ 逐级互锁信号$/;"	p
wire	Main/SecondBranchAmend.v	/^    output	wire	                        SBA_valid_w_o,$/;"	p
wire	Main/SecondBranchAmend.v	/^    output	wire	[`ALL_CHECKPOINT]       SBA_checkPoint_w_o,         \/\/  检查点信息$/;"	p
wire	Main/SecondBranchAmend.v	/^    output	wire	[`GPR_NUM]              SBA_writeNum_o,             \/\/ 回写寄存器数值,0为不回写$/;"	p
wire	Main/SecondBranchAmend.v	/^    output	wire	[`GPR_NUM]              SBA_writeNum_w_o,    $/;"	p
wire	Main/SecondBranchAmend.v	/^    output	wire	[`REPAIR_ACTION]        SBA_repairAction_w_o,       \/\/  检查点信息$/;"	p
wire	Main/SecondBranchAmend.v	/^    output	wire	[`SINGLE_WORD]          SBA_VAddr_o,                \/\/ 用于debug和异常处理$/;"	p
wire	Main/SecondBranchAmend.v	/^    output	wire    [`SINGLE_WORD]          SBA_aluRes_o$/;"	p
wire	Main/SecondBranchAmend.v	/^    output  wire                            SBA_corrTake_w_o,           \/\/  正确的分支方向$/;"	p
wire	Main/SecondBranchAmend.v	/^    output  wire                            SBA_flush_w_o,              \/\/  表示分支错误，需要刷新流水线$/;"	p
wire	Main/SecondBranchAmend.v	/^    output  wire    [`SINGLE_WORD]          SBA_corrDest_w_o,           \/\/  正确的分支目的$/;"	p
wire	Main/SecondBranchAmend.v	/^    output  wire    [`SINGLE_WORD]          SBA_erroVAddr_w_o,          \/\/  分支错误PC$/;"	p
wire	Main/TLB.v	/^    input	wire	                data_oddPage_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	                r_enbale_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	                w_enbale_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	                w_g_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	[`ASID]         data_asid_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	[`ASID]         inst_asid_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	[`ASID]         w_asid_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	[`CACHE_TAG]    w_pfn0_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	[`CACHE_TAG]    w_pfn1_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	[`FLAG0]        w_flags0_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	[`FLAG1]        w_flags1_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	[`MASK]         w_mask_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	[`TLB_WIDTH]    r_index_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	[`TLB_WIDTH]    w_index_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	[`VPN2]         data_vpn2_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	[`VPN2]         inst_vpn2_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	[`VPN2]         w_vpn2_i,$/;"	p
wire	Main/TLB.v	/^    input	wire	clk,$/;"	p
wire	Main/TLB.v	/^    input	wire	rst,$/;"	p
wire	Main/TLB.v	/^    input	wire                    inst_oddPage_i,$/;"	p
wire	Main/TLB.v	/^    input   wire                    data_tlbReq_i,  \/\/ 只有在该信号拉高的时候才会在下一周期更新TLB输出$/;"	p
wire	Main/TLB.v	/^    input   wire                    inst_tlbReq_i,  \/\/ 只有在该信号拉高的时候才会在下一周期更新TLB输出$/;"	p
wire	Main/TLB.v	/^    output	wire	                data_d_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	                data_hit_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	                data_v_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	                inst_d_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	                inst_hit_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	                inst_v_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	                r_g_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	[`ASID]         r_asid_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	[`CACHE_TAG]    data_pfn_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	[`CACHE_TAG]    inst_pfn_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	[`CACHE_TAG]    r_pfn0_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	[`CACHE_TAG]    r_pfn1_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	[`CBITS]        data_c_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	[`CBITS]        inst_c_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	[`FLAG0]        r_flags0_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	[`FLAG1]        r_flags1_o$/;"	p
wire	Main/TLB.v	/^    output	wire	[`MASK]         r_mask_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	[`TLB_WIDTH]    data_index_o,$/;"	p
wire	Main/TLB.v	/^    output	wire	[`TLB_WIDTH]    inst_index_o,$/;"	p
wire	Main/TLB.v	/^    output	wire    [`VPN2]         r_vpn2_o,$/;"	p
wire	Main/WriteBack.v	/^    input	wire	                        MEM_exceptionRisk_i,$/;"	p
wire	Main/WriteBack.v	/^    input	wire	                        MEM_isDangerous_i,      \/\/ 表示该条指令是不是危险指令,传递给下一级$/;"	p
wire	Main/WriteBack.v	/^    input	wire	                        MEM_memReq_i,$/;"	p
wire	Main/WriteBack.v	/^    input	wire	                        MEM_valid_w_i,$/;"	p
wire	Main/WriteBack.v	/^    input	wire	                        PBA_okToChange_w_i,        \/\/ allowin共用一个，代表上下两端都可进$/;"	p
wire	Main/WriteBack.v	/^    input	wire	[1:0]                   MEM_alignCheck_i,$/;"	p
wire	Main/WriteBack.v	/^    input	wire	[`GPR_NUM]              MEM_writeNum_i,         \/\/ 回写寄存器数值,0为不回写$/;"	p
wire	Main/WriteBack.v	/^    input	wire	[`SINGLE_WORD]          MEM_VAddr_i,$/;"	p
wire	Main/WriteBack.v	/^    input	wire	[`SINGLE_WORD]          MEM_rtData_i,$/;"	p
wire	Main/WriteBack.v	/^    input	wire	[`SINGLE_WORD]          data_rdata,$/;"	p
wire	Main/WriteBack.v	/^    input	wire	clk,$/;"	p
wire	Main/WriteBack.v	/^    input	wire	rst,$/;"	p
wire	Main/WriteBack.v	/^    input	wire    [`LOAD_SEL]             MEM_loadSel_i           \/\/ load指令模式		$/;"	p
wire	Main/WriteBack.v	/^    input	wire    [`SINGLE_WORD]          MEM_finalRes_i,         \/\/ 最终写入寄存器的数值 包括alu，乘除，cp0$/;"	p
wire	Main/WriteBack.v	/^    output	wire	                        WB_allowin_w_o,         \/\/ 逐级互锁信号$/;"	p
wire	Main/WriteBack.v	/^    output	wire	                        WB_hasDangerous_w_o,    \/\/ mul,clo,clz,madd,msub,cache,tlb等危险指令$/;"	p
wire	Main/WriteBack.v	/^    output	wire	                        WB_hasRisk_w_o,         $/;"	p
wire	Main/WriteBack.v	/^    output	wire	                        WB_writeEnable_w_o,       \/\/ 回写使能$/;"	p
wire	Main/WriteBack.v	/^    output	wire	[`GPR_NUM]              WB_writeNum_w_o,    $/;"	p
wire	Main/WriteBack.v	/^    output	wire	[`SINGLE_WORD]          WB_finalRes_w_o,        \/\/ 送回寄存器堆的数据$/;"	p
wire	Main/WriteBack.v	/^    output	wire	[`SINGLE_WORD]          WB_forwardData_w_o,     \/\/ EXE计算结果前递$/;"	p
wire	Main/components/EXE/ALU.v	/^        input	wire	[`SINGLE_WORD]  scr1,$/;"	p
wire	Main/components/EXE/ALU.v	/^        input   wire    [`ALUOP]        aluop,$/;"	p
wire	Main/components/EXE/ALU.v	/^        input   wire    [`SINGLE_WORD]  scr0,$/;"	p
wire	Main/components/EXE/ALU.v	/^        output  wire                    overflow,$/;"	p
wire	Main/components/EXE/ALU.v	/^        output  wire    [`SINGLE_WORD]  aluso$/;"	p
wire	Main/components/EXE/Divider.v	/^    input	wire	                    cancel,$/;"	p
wire	Main/components/EXE/Divider.v	/^    input	wire	    [`SINGLE_WORD]  divisor_i,$/;"	p
wire	Main/components/EXE/Divider.v	/^    input	wire                        rst,$/;"	p
wire	Main/components/EXE/Divider.v	/^    input   wire                        clk,$/;"	p
wire	Main/components/EXE/Divider.v	/^    input   wire                        divReq,        \/\/tvalid$/;"	p
wire	Main/components/EXE/Divider.v	/^    input   wire                        isSignedDiv, \/\/{0:无符号,1:有符号}$/;"	p
wire	Main/components/EXE/Divider.v	/^    input   wire        [`SINGLE_WORD]  divident_i,$/;"	p
wire	Main/components/EXE/Divider.v	/^    output	wire	    [`SINGLE_WORD]  reminder_o,$/;"	p
wire	Main/components/EXE/Divider.v	/^    output  wire                        div_data_ok$/;"	p
wire	Main/components/EXE/Divider.v	/^    output  wire                        div_oprand_ok,$/;"	p
wire	Main/components/EXE/Divider.v	/^    output  wire        [`SINGLE_WORD]  quotient_o,$/;"	p
wire	Main/components/EXE/MultiDivideUnit.v	/^    input	wire	                    cancel,$/;"	p
wire	Main/components/EXE/MultiDivideUnit.v	/^    input	wire	                    mulrReq,         \/\/ 直连乘法的请求$/;"	p
wire	Main/components/EXE/MultiDivideUnit.v	/^    input	wire	[`MDU_REQ]          MDU_operator,$/;"	p
wire	Main/components/EXE/MultiDivideUnit.v	/^    input	wire	clk,$/;"	p
wire	Main/components/EXE/MultiDivideUnit.v	/^    input	wire	rst,$/;"	p
wire	Main/components/EXE/MultiDivideUnit.v	/^    input	wire                        MduReq,$/;"	p
wire	Main/components/EXE/MultiDivideUnit.v	/^    input	wire    [2*`SINGLE_WORD]    MDU_HiLoData, $/;"	p
wire	Main/components/EXE/MultiDivideUnit.v	/^    input	wire    [2*`SINGLE_WORD]    MDU_oprand, $/;"	p
wire	Main/components/EXE/MultiDivideUnit.v	/^    output	wire	                    mulr_data_ok,    \/\/ 直连乘法完成$/;"	p
wire	Main/components/EXE/MultiDivideUnit.v	/^    output	wire	[2*`SINGLE_WORD]    MDU_writeData_p$/;"	p
wire	Main/components/EXE/MultiDivideUnit.v	/^    output	wire	[`HILO]             MDU_writeEnable,$/;"	p
wire	Main/components/EXE/MultiDivideUnit.v	/^    output	wire                        MDU_Oprand_ok,  \/\/操作数ok$/;"	p
wire	Main/components/EXE/MultiDivideUnit.v	/^    output	wire                        MDU_data_ok,    \/\/计算结果ok$/;"	p
wire	Main/components/EXE/MyMultiplier.v	/^    input	wire	                    add_sub_op,     \/\/ 表示累加1'b1,累减1'b0$/;"	p
wire	Main/components/EXE/MyMultiplier.v	/^    input	wire	                    cancel,$/;"	p
wire	Main/components/EXE/MyMultiplier.v	/^    input	wire	                    clk,$/;"	p
wire	Main/components/EXE/MyMultiplier.v	/^    input	wire	                    isAccumlate,    \/\/ 是否是累加计算$/;"	p
wire	Main/components/EXE/MyMultiplier.v	/^    input	wire	                    isSignedMul,$/;"	p
wire	Main/components/EXE/MyMultiplier.v	/^    input	wire	                    mulReq,         \/\/ 表示有mult,madd类的计算$/;"	p
wire	Main/components/EXE/MyMultiplier.v	/^    input	wire	                    rst,$/;"	p
wire	Main/components/EXE/MyMultiplier.v	/^    input	wire	[2*`SINGLE_WORD]    HiLoData,$/;"	p
wire	Main/components/EXE/MyMultiplier.v	/^    input	wire	[2*`SINGLE_WORD]    mulOprand,$/;"	p
wire	Main/components/EXE/MyMultiplier.v	/^    output	wire	                    mulOprand_ok,   \/\/ 握手信号$/;"	p
wire	Main/components/EXE/MyMultiplier.v	/^    output	wire	[2*`SINGLE_WORD]    mulRes$/;"	p
wire	Main/components/EXE/MyMultiplier.v	/^    output	wire                        mulData_ok,     \/\/ 表示完成运算$/;"	p
wire	Main/components/EXE/adder.v	/^         input	wire	        cin_i,$/;"	p
wire	Main/components/EXE/adder.v	/^         input  wire [3:0]      adder_op, \/\/control:选择计算类型--{0:stlu,1:stl,2:-,3:+}$/;"	p
wire	Main/components/EXE/adder.v	/^         input  wire [BUS-1:0]  add_a,add_b, \/\/data: a-b$/;"	p
wire	Main/components/EXE/adder.v	/^         output	wire	        crFlag,$/;"	p
wire	Main/components/EXE/adder.v	/^         output wire            overflow$/;"	p
wire	Main/components/EXE/adder.v	/^         output wire [BUS-1:0]  add_res,$/;"	p
wire	Main/components/EXE/div.v	/^    input	wire        rst,$/;"	p
wire	Main/components/EXE/div.v	/^    input   wire        [31:0] x,y,$/;"	p
wire	Main/components/EXE/div.v	/^    input   wire        clk,$/;"	p
wire	Main/components/EXE/div.v	/^    input   wire        div,\/\/tvalid$/;"	p
wire	Main/components/EXE/div.v	/^    input   wire        div_signed, \/\/{0:无符号,1:有符号}$/;"	p
wire	Main/components/EXE/div.v	/^    output  wire        [31:0] s,r,$/;"	p
wire	Main/components/EXE/div.v	/^    output  wire        [5:0] timer_out$/;"	p
wire	Main/components/EXE/div.v	/^    output  wire        complete,$/;"	p
wire	Main/components/EXE/div.v	/^    output  wire        div_tready,$/;"	p
wire	Main/components/EXE/try_div_ans.v	/^    input wire [31:0] divisor,$/;"	p
wire	Main/components/EXE/try_div_ans.v	/^    input wire [31:0] quotient_iter,$/;"	p
wire	Main/components/EXE/try_div_ans.v	/^    input wire [5:0] timer,$/;"	p
wire	Main/components/EXE/try_div_ans.v	/^    input wire [63:0] minuend,$/;"	p
wire	Main/components/EXE/try_div_ans.v	/^    output wire [31:0] quotient_temp,$/;"	p
wire	Main/components/EXE/try_div_ans.v	/^    output wire [63:0] minuend_back,$/;"	p
wire	Main/components/EXE/try_div_ans.v	/^    output wire pre_complete$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    input	wire	[1:0]                       IQ_isRefill_p,$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    input	wire    [1:0]                       IQ_hasException_p,$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    input	wire    [2*`SINGLE_WORD]            IQ_VAddr_p,$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    input	wire    [2*`SINGLE_WORD]            IQ_inst_p,$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    input	wire    [`IQ_VALID]                 IQ_supplyValid,   \/\/ 可选宏定义三种$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    input   wire    [1:0]                       IQ_predTake_p,$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    input   wire    [2*`ALL_CHECKPOINT]         IQ_checkPoint_p,$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    input   wire    [2*`EXCCODE]                IQ_ExcCode_p,$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    input   wire    [2*`SINGLE_WORD]            IQ_predDest_p,$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    output	wire	[2*`GPR_NUM]                AB_regWriteNum_p_w$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    output	wire	[2*`SINGLE_WORD]            AB_Inst_p,        \/\/ 经过选择分发指令,[0]在上流水线，[1]在下$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    output	wire	[3:0]                       AB_needRead_p_w,                       $/;"	p
wire	Main/components/ID/Arbitrator.v	/^    output	wire	[4*`GPR_NUM]                AB_regReadNum_p_w,$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    output	wire	[`ISSUE_MODE]               AB_issueMode_w,   \/\/ 表示发射类型，同时也可以作为指令使能$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    output	wire    [1:0]                       AB_hasException_p,$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    output	wire    [2*`SINGLE_WORD]            AB_VAddr_p,$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    output  wire    [1:0]                       AB_isRefill_p,$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    output  wire    [1:0]                       AB_predTake_p,$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    output  wire    [2*`ALL_CHECKPOINT]         AB_checkPoint_p,$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    output  wire    [2*`EXCCODE]                AB_ExcCode_p,$/;"	p
wire	Main/components/ID/Arbitrator.v	/^    output  wire    [2*`SINGLE_WORD]            AB_predDest_p,$/;"	p
wire	Main/components/ID/Decorder.v	/^    input	wire	[2*`SINGLE_WORD]  AB_Inst_p,$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	                        ID_down_eret_o,             \/\/ 是eret指令 TODO$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	                        ID_down_isCacheInst_o,      \/\/ 表示是Cache指令$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	                        ID_down_isDangerous_o,      \/\/ 表示该指令在执行期间不得执行其他指令$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	                        ID_down_isTLBInst_o,        \/\/ 表示是TLB指令$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	                        ID_down_memAtom_o,          \/\/ 表示该访存操作是原子访存操作,需要读写LLbit$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	                        ID_down_memReq_o,$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	                        ID_down_memWR_o,            \/\/ 表示访存，0表示访问，1表示存储$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	                        ID_down_readCp0_o,          \/\/ 只有指令需要将cp0写入GPR,该信号才会拉高,mfc0$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	                        ID_down_writeCp0_o,         \/\/ 只有指令需要将GPR写入cp0,该信号才会拉高,mtc0,直接将rt寄存器的数值接入$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	                        ID_up_branchRisk_o,   $/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	[1:0]                   decorderException_p,$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	[2*`EXCCODE]            decorderExcCode_p,$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	[`ALUOP]                ID_down_aluOprator_o,$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	[`ALUOP]                ID_up_aluOprator_o,         $/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	[`BRANCH_KIND]          ID_up_branchKind_o,         \/\/ only up$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	[`CACHE_OP]             ID_down_CacheOperator_o     \/\/ Cache指令op}}}$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	[`EXCEPRION_SEL]        ID_down_exceptionSel_o,$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	[`HILO]                 ID_down_readHiLo_o,         \/\/ 只有指令需要将HiLo写入GPR,该信号才会拉高,包括clo\/z,mul,mfhilo$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	[`HILO]                 ID_down_writeHiLo_o,        \/\/ 需要根据数值写HiLo的指令,有madd,\/sub,mult,div,mtc0,其中mtc0是类似与add做运算,之后将运算结果写入$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	[`MDUOP]                ID_down_mduOperator_o,      \/\/ 包括乘除,clo,clz和累加累减$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	[`REPAIR_ACTION]        ID_up_repairAction_o,\/*}}}*\/$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	[`TLB_INST]             ID_down_TLBInstOperator_o,  \/\/ 执行的种类$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire	[`TRAP_KIND]            ID_down_trapKind_o,         \/\/ 自陷指令的种类$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire    [1:0]                   ID_exceptionRisk_p,         \/\/ 存在异常的风险$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire    [`LOAD_MODE]            ID_down_loadMode_o,         \/\/ load模式	$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire    [`OPRAND_SEL]           down_oprand0_sel,$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire    [`OPRAND_SEL]           down_oprand1_sel,$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire    [`OPRAND_SEL]           up_oprand0_sel,$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire    [`OPRAND_SEL]           up_oprand1_sel,$/;"	p
wire	Main/components/ID/Decorder.v	/^    output	wire    [`STORE_MODE]           ID_down_storeMode_o,        \/\/ store模式	$/;"	p
wire	Main/components/ID/Decorder.v	/^    output  wire    [2*`EXTEND_ACTION]      extendAction_p,$/;"	p
wire	Main/components/ID/ImmExtender.v	/^    input	wire	[25:0]              inst_index, \/\/ inst低26位$/;"	p
wire	Main/components/ID/ImmExtender.v	/^    input	wire	[`EXTEND_ACTION]    extendAction,$/;"	p
wire	Main/components/ID/ImmExtender.v	/^    output	wire	[`SINGLE_WORD]      extendedRes$/;"	p
wire	Main/components/ID/InstQueue.v	/^    input	wire	                        SBA_flush_w_i,            $/;"	p
wire	Main/components/ID/InstQueue.v	/^    input	wire	[1:0]                   ID_upDateMode_i,    \/\/ 输入数值2'b00,2'b01,2'b11，将队头的x个数据出队$/;"	p
wire	Main/components/ID/InstQueue.v	/^    input	wire                            CP0_excOccur_w_i,	$/;"	p
wire	Main/components/ID/InstQueue.v	/^    input	wire                            IF_hasException_i,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    input	wire                            IF_isRefill_i,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    input	wire    [`EXCCODE]              IF_ExcCode_i,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    input   wire	                        IF_valid_i,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    input   wire	[`SINGLE_WORD]          IF_instBasePC_i,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    input   wire            clk,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    input   wire            rst,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    input   wire    [2:0]                   IF_instNum_i,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    input   wire    [3:0]                   IF_instEnable_i,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    input   wire    [3:0]                   IF_predTake_p_i,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    input   wire    [4*`ALL_CHECKPOINT]     IF_predInfo_p_i,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    input   wire    [4*`SINGLE_WORD]        IF_predDest_p_i,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    input   wire    [`FOUR_WORDS]           IF_inst_p_i,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    output	wire	                            ID_stopFetch_o,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    output	wire    [1:0]                       IQ_hasException_p  ,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    output	wire    [2*`SINGLE_WORD]            IQ_VAddr_p  ,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    output	wire    [2*`SINGLE_WORD]            IQ_inst_p  ,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    output  wire                                IQ_empty  ,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    output  wire                                IQ_full  ,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    output  wire    [1:0]                       IQ_isRefill_p  ,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    output  wire    [1:0]                       IQ_predTake_p  ,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    output  wire    [2*`ALL_CHECKPOINT]         IQ_checkPoint_p  ,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    output  wire    [2*`EXCCODE]                IQ_ExcCode_p  ,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    output  wire    [2*`SINGLE_WORD]            IQ_predDest_p  ,$/;"	p
wire	Main/components/ID/InstQueue.v	/^    output  wire    [`IQ_POINT]                 IQ_number_w  $/;"	p
wire	Main/components/ID/RegFile.v	/^    input	wire	                    PBA_writeEnable_w_i,     $/;"	p
wire	Main/components/ID/RegFile.v	/^    input	wire	                    WB_writeEnable_w_i,     $/;"	p
wire	Main/components/ID/RegFile.v	/^    input	wire	[4*`GPR_NUM]        AB_regReadNum_p_w,         $/;"	p
wire	Main/components/ID/RegFile.v	/^    input	wire	[`GPR_NUM]          PBA_writeNum_w_i,        $/;"	p
wire	Main/components/ID/RegFile.v	/^    input	wire	[`GPR_NUM]          WB_writeNum_w_i,        $/;"	p
wire	Main/components/ID/RegFile.v	/^    input	wire	[`SINGLE_WORD]      PBA_forwardData_w_i,\/\/ 先执行的指令回写数据$/;"	p
wire	Main/components/ID/RegFile.v	/^    input	wire	[`SINGLE_WORD]      WB_forwardData_w_i  \/\/ 后执行的指令回写数据$/;"	p
wire	Main/components/ID/RegFile.v	/^    input	wire	clk,$/;"	p
wire	Main/components/ID/RegFile.v	/^    input	wire	rst,$/;"	p
wire	Main/components/ID/RegFile.v	/^    output	wire	[4*`SINGLE_WORD]    readData_p_o,        $/;"	p
wline	Main/components/MyRAM.v	/^    reg  [MY_DATA_WIDTH-1:0]    wline;$/;"	r
wordBoundary	Main/IF/PCRegister.v	/^    wire [1:0]                  wordBoundary                    ;$/;"	n
writeData	Main/components/ID/RegFile.v	/^    wire    [`SINGLE_WORD]  writeData       [1:0];$/;"	n
writeEnable	Main/components/ID/RegFile.v	/^    wire	[1:0]           writeEnable     ;$/;"	n
writeHiLoConflict	Main/EXEDOWN.v	/^    wire writeHiLoConflict = isMduWrite && PREMEM_hasRisk_w_i;$/;"	n
writeK0	Main/PrimaryExceptionProcessor.v	/^    wire    writeK0 = mtc0_wen && (mtc0_addr==`ADDR_CONFIG);$/;"	n
writeNum	Main/components/ID/RegFile.v	/^    wire	[`GPR_NUM]      writeNum        [1:0]; $/;"	n
writeRd	Main/components/ID/Arbitrator.v	/^    wire    [`GPR_NUM]      writeRd     [1:0];  \/\/ 表示写入的寄存器，可能是rt也可能是rd$/;"	n
writeToRt	Main/components/ID/Arbitrator.v	/^            wire writeToRt;         \/\/ 输出到的目的寄存器是rt$/;"	n
wstrb	Main/components/MyRAM.v	/^    wire    [(MY_DATA_WIDTH\/8)-1:0] wstrb = {MY_DATA_WIDTH\/8{wen}};$/;"	n
x_abs	Main/components/EXE/Divider.v	/^    wire    [`SINGLE_WORD]      x_abs,y_abs;$/;"	n
x_abs	Main/components/EXE/div.v	/^wire [31:0] x_abs,y_abs;$/;"	n
x_sign	Main/components/EXE/Divider.v	/^    wire                        x_sign;$/;"	n
x_sign	Main/components/EXE/div.v	/^wire x_sign,y_sign;$/;"	n
xor_op	Main/components/EXE/ALU.v	/^    wire xor_op = aluop[`ALU_XOR];$/;"	n
xor_res	Main/components/EXE/ALU.v	/^    wire [31:0] and_res,or_res,nor_res,xor_res,sll_res,srl_res,sra_res,lui_res;$/;"	n
y_abs	Main/components/EXE/Divider.v	/^    wire    [`SINGLE_WORD]      x_abs,y_abs;$/;"	n
y_abs	Main/components/EXE/div.v	/^wire [31:0] x_abs,y_abs;$/;"	n
y_sign	Main/components/EXE/Divider.v	/^    wire                        y_sign;$/;"	n
y_sign	Main/components/EXE/div.v	/^wire x_sign,y_sign;$/;"	n
